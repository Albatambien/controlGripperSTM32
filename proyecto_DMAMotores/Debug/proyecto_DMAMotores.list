
proyecto_DMAMotores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b8c  08003b8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b94  08003b94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003ba8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003ba8  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf32  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c59  00000000  00000000  0002bf6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002dbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016793  00000000  00000000  0002f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccf1  00000000  00000000  000459a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939f6  00000000  00000000  00052694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e608a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003048  00000000  00000000  000e60dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003b5c 	.word	0x08003b5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003b5c 	.word	0x08003b5c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fbca 	bl	8000c78 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f85c 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f9b8 	bl	800085c <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f996 	bl	800081c <MX_DMA_Init>
  MX_ADC1_Init();
 80004f0:	f000 f8b4 	bl	800065c <MX_ADC1_Init>
  MX_TIM2_Init();
 80004f4:	f000 f912 	bl	800071c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4822      	ldr	r0, [pc, #136]	; (8000584 <main+0xa8>)
 80004fc:	f002 fc40 	bl	8002d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000500:	2104      	movs	r1, #4
 8000502:	4820      	ldr	r0, [pc, #128]	; (8000584 <main+0xa8>)
 8000504:	f002 fc3c 	bl	8002d80 <HAL_TIM_PWM_Start>

  TIM2->CCR1 = 62;
 8000508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800050c:	223e      	movs	r2, #62	; 0x3e
 800050e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 83;
 8000510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000514:	2253      	movs	r2, #83	; 0x53
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
  art = 0;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <main+0xac>)
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  aux = TIM2->CCR1;
 800051e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000524:	461a      	mov	r2, r3
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <main+0xb0>)
 8000528:	601a      	str	r2, [r3, #0]
	  aux2 = TIM2->CCR2;
 800052a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800052e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000530:	461a      	mov	r2, r3
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <main+0xb4>)
 8000534:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Start_DMA(&hadc1, adcVal, 2);
 8000536:	2202      	movs	r2, #2
 8000538:	4916      	ldr	r1, [pc, #88]	; (8000594 <main+0xb8>)
 800053a:	4817      	ldr	r0, [pc, #92]	; (8000598 <main+0xbc>)
 800053c:	f000 fd86 	bl	800104c <HAL_ADC_Start_DMA>
	  TIM2->CCR1 +=1;
 8000540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054a:	3301      	adds	r3, #1
 800054c:	6353      	str	r3, [r2, #52]	; 0x34
	  gripper = TIM2->CCR1;
 800054e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000554:	461a      	mov	r2, r3
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <main+0xc0>)
 8000558:	601a      	str	r2, [r3, #0]
	  if(TIM2->CCR1 > 131)
 800055a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800055e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000560:	2b83      	cmp	r3, #131	; 0x83
 8000562:	d9dc      	bls.n	800051e <main+0x42>
	  {
		  HAL_Delay(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000568:	f000 fbf8 	bl	8000d5c <HAL_Delay>
		  TIM2->CCR2 = 197;
 800056c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000570:	22c5      	movs	r2, #197	; 0xc5
 8000572:	639a      	str	r2, [r3, #56]	; 0x38
		  art = 90;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <main+0xac>)
 8000576:	225a      	movs	r2, #90	; 0x5a
 8000578:	601a      	str	r2, [r3, #0]
		  TIM2->CCR1 = 62;
 800057a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800057e:	223e      	movs	r2, #62	; 0x3e
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
	  aux = TIM2->CCR1;
 8000582:	e7cc      	b.n	800051e <main+0x42>
 8000584:	200000d0 	.word	0x200000d0
 8000588:	20000130 	.word	0x20000130
 800058c:	20000124 	.word	0x20000124
 8000590:	20000128 	.word	0x20000128
 8000594:	20000118 	.word	0x20000118
 8000598:	20000028 	.word	0x20000028
 800059c:	2000012c 	.word	0x2000012c

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 facc 	bl	8003b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xb4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xb4>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xb4>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <SystemClock_Config+0xb8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <SystemClock_Config+0xb8>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <SystemClock_Config+0xb8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fee9 	bl	80023e8 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800061c:	f000 f97e 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f94c 	bl	80028d8 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000646:	f000 f969 	bl	800091c <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_ADC1_Init+0xb4>)
 8000670:	4a28      	ldr	r2, [pc, #160]	; (8000714 <MX_ADC1_Init+0xb8>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <MX_ADC1_Init+0xb4>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067a:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_ADC1_Init+0xb4>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <MX_ADC1_Init+0xb4>)
 8000682:	2201      	movs	r2, #1
 8000684:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000686:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_ADC1_Init+0xb4>)
 8000688:	2201      	movs	r2, #1
 800068a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_ADC1_Init+0xb4>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_ADC1_Init+0xb4>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_ADC1_Init+0xb4>)
 800069c:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <MX_ADC1_Init+0xbc>)
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_ADC1_Init+0xb4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_ADC1_Init+0xb4>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_ADC1_Init+0xb4>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_ADC1_Init+0xb4>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ba:	4815      	ldr	r0, [pc, #84]	; (8000710 <MX_ADC1_Init+0xb4>)
 80006bc:	f000 fb72 	bl	8000da4 <HAL_ADC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 f929 	bl	800091c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006ca:	2303      	movs	r3, #3
 80006cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006d2:	2307      	movs	r3, #7
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_ADC1_Init+0xb4>)
 80006dc:	f000 fdc4 	bl	8001268 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006e6:	f000 f919 	bl	800091c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_ADC1_Init+0xb4>)
 80006f8:	f000 fdb6 	bl	8001268 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000702:	f000 f90b 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000028 	.word	0x20000028
 8000714:	40012000 	.word	0x40012000
 8000718:	0f000001 	.word	0x0f000001

0800071c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	; 0x38
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074c:	4b32      	ldr	r3, [pc, #200]	; (8000818 <MX_TIM2_Init+0xfc>)
 800074e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8000754:	4b30      	ldr	r3, [pc, #192]	; (8000818 <MX_TIM2_Init+0xfc>)
 8000756:	2240      	movs	r2, #64	; 0x40
 8000758:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_TIM2_Init+0xfc>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8000760:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_TIM2_Init+0xfc>)
 8000762:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000766:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <MX_TIM2_Init+0xfc>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_TIM2_Init+0xfc>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000774:	4828      	ldr	r0, [pc, #160]	; (8000818 <MX_TIM2_Init+0xfc>)
 8000776:	f002 fa5b 	bl	8002c30 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000780:	f000 f8cc 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	4619      	mov	r1, r3
 8000790:	4821      	ldr	r0, [pc, #132]	; (8000818 <MX_TIM2_Init+0xfc>)
 8000792:	f002 fd6f 	bl	8003274 <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800079c:	f000 f8be 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007a0:	481d      	ldr	r0, [pc, #116]	; (8000818 <MX_TIM2_Init+0xfc>)
 80007a2:	f002 fa94 	bl	8002cce <HAL_TIM_PWM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007ac:	f000 f8b6 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4619      	mov	r1, r3
 80007be:	4816      	ldr	r0, [pc, #88]	; (8000818 <MX_TIM2_Init+0xfc>)
 80007c0:	f003 f91e 	bl	8003a00 <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007ca:	f000 f8a7 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ce:	2360      	movs	r3, #96	; 0x60
 80007d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <MX_TIM2_Init+0xfc>)
 80007e6:	f002 fc83 	bl	80030f0 <HAL_TIM_PWM_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007f0:	f000 f894 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2204      	movs	r2, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <MX_TIM2_Init+0xfc>)
 80007fc:	f002 fc78 	bl	80030f0 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000806:	f000 f889 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <MX_TIM2_Init+0xfc>)
 800080c:	f000 f958 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 8000810:	bf00      	nop
 8000812:	3738      	adds	r7, #56	; 0x38
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000d0 	.word	0x200000d0

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_DMA_Init+0x3c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <MX_DMA_Init+0x3c>)
 800082c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_DMA_Init+0x3c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2038      	movs	r0, #56	; 0x38
 8000844:	f001 f8a5 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000848:	2038      	movs	r0, #56	; 0x38
 800084a:	f001 f8be 	bl	80019ca <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_GPIO_Init+0x84>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <MX_GPIO_Init+0x84>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_GPIO_Init+0x84>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_GPIO_Init+0x84>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <MX_GPIO_Init+0x84>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_GPIO_Init+0x84>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_GPIO_Init+0x84>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MX_GPIO_Init+0x84>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_GPIO_Init+0x84>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_GPIO_Init+0x84>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <MX_GPIO_Init+0x84>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_GPIO_Init+0x84>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	adc1 = adcVal[0];
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_ADC_ConvCpltCallback+0x2c>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <HAL_ADC_ConvCpltCallback+0x30>)
 80008f6:	601a      	str	r2, [r3, #0]
	adc2 = adcVal[1];
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_ADC_ConvCpltCallback+0x2c>)
 80008fa:	885b      	ldrh	r3, [r3, #2]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_ADC_ConvCpltCallback+0x34>)
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	20000118 	.word	0x20000118
 8000914:	2000011c 	.word	0x2000011c
 8000918:	20000120 	.word	0x20000120

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a32      	ldr	r2, [pc, #200]	; (8000a60 <HAL_ADC_MspInit+0xe8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d15e      	bne.n	8000a58 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <HAL_ADC_MspInit+0xec>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <HAL_ADC_MspInit+0xec>)
 80009a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <HAL_ADC_MspInit+0xec>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <HAL_ADC_MspInit+0xec>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <HAL_ADC_MspInit+0xec>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <HAL_ADC_MspInit+0xec>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80009d2:	2318      	movs	r3, #24
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4820      	ldr	r0, [pc, #128]	; (8000a68 <HAL_ADC_MspInit+0xf0>)
 80009e6:	f001 fb7b 	bl	80020e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <HAL_ADC_MspInit+0xf8>)
 80009ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 8000a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 8000a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 8000a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a2c:	480f      	ldr	r0, [pc, #60]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 8000a2e:	f000 ffe7 	bl	8001a00 <HAL_DMA_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000a38:	f7ff ff70 	bl	800091c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 8000a40:	639a      	str	r2, [r3, #56]	; 0x38
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_ADC_MspInit+0xf4>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2012      	movs	r0, #18
 8000a4e:	f000 ffa0 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a52:	2012      	movs	r0, #18
 8000a54:	f000 ffb9 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40012000 	.word	0x40012000
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	20000070 	.word	0x20000070
 8000a70:	40026410 	.word	0x40026410

08000a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a84:	d115      	bne.n	8000ab2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_TIM_Base_MspInit+0x48>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_TIM_Base_MspInit+0x48>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_TIM_Base_MspInit+0x48>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	201c      	movs	r0, #28
 8000aa8:	f000 ff73 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aac:	201c      	movs	r0, #28
 8000aae:	f000 ff8c 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ae0:	d13b      	bne.n	8000b5a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <HAL_TIM_MspPostInit+0xa4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <HAL_TIM_MspPostInit+0xa4>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_TIM_MspPostInit+0xa4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_TIM_MspPostInit+0xa4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_TIM_MspPostInit+0xa4>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_TIM_MspPostInit+0xa4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b1a:	2320      	movs	r3, #32
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <HAL_TIM_MspPostInit+0xa8>)
 8000b36:	f001 fad3 	bl	80020e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_TIM_MspPostInit+0xac>)
 8000b56:	f001 fac3 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8ae 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <ADC_IRQHandler+0x10>)
 8000bca:	f000 f92e 	bl	8000e2a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000028 	.word	0x20000028

08000bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM2_IRQHandler+0x10>)
 8000bde:	f002 f97f 	bl	8002ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000d0 	.word	0x200000d0

08000bec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <DMA2_Stream0_IRQHandler+0x10>)
 8000bf2:	f001 f80b 	bl	8001c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000070 	.word	0x20000070

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4e:	f7ff ffd7 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f002 ff57 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc41 	bl	80004dc <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c68:	08003b9c 	.word	0x08003b9c
  ldr r2, =_sbss
 8000c6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c70:	20000138 	.word	0x20000138

08000c74 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <DMA1_Stream0_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 fe6b 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	200f      	movs	r0, #15
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fe3c 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fe83 	bl	80019e6 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 fe4b 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000134 	.word	0x20000134

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000134 	.word	0x20000134

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff ffee 	bl	8000d44 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffde 	bl	8000d44 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008

08000da4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e033      	b.n	8000e22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d109      	bne.n	8000dd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fdd8 	bl	8000978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d118      	bne.n	8000e14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dea:	f023 0302 	bic.w	r3, r3, #2
 8000dee:	f043 0202 	orr.w	r2, r3, #2
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 fb68 	bl	80014cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f023 0303 	bic.w	r3, r3, #3
 8000e0a:	f043 0201 	orr.w	r2, r3, #1
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40
 8000e12:	e001      	b.n	8000e18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d049      	beq.n	8000ef4 <HAL_ADC_IRQHandler+0xca>
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d046      	beq.n	8000ef4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d12b      	bne.n	8000ee4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d127      	bne.n	8000ee4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d119      	bne.n	8000ee4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0220 	bic.w	r2, r2, #32
 8000ebe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fcfd 	bl	80008e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f06f 0212 	mvn.w	r2, #18
 8000ef2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d057      	beq.n	8000fba <HAL_ADC_IRQHandler+0x190>
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d054      	beq.n	8000fba <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d105      	bne.n	8000f28 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d139      	bne.n	8000faa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d12b      	bne.n	8000faa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d124      	bne.n	8000faa <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d11d      	bne.n	8000faa <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d119      	bne.n	8000faa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f84:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fc0c 	bl	80017c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f06f 020c 	mvn.w	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d017      	beq.n	8001000 <HAL_ADC_IRQHandler+0x1d6>
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d014      	beq.n	8001000 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d10d      	bne.n	8001000 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f925 	bl	8001240 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f06f 0201 	mvn.w	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800100e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d015      	beq.n	8001042 <HAL_ADC_IRQHandler+0x218>
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d012      	beq.n	8001042 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001020:	f043 0202 	orr.w	r2, r3, #2
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f06f 0220 	mvn.w	r2, #32
 8001030:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f90e 	bl	8001254 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f06f 0220 	mvn.w	r2, #32
 8001040:	601a      	str	r2, [r3, #0]
  }
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_ADC_Start_DMA+0x1e>
 8001066:	2302      	movs	r3, #2
 8001068:	e0ce      	b.n	8001208 <HAL_ADC_Start_DMA+0x1bc>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	d018      	beq.n	80010b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001090:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <HAL_ADC_Start_DMA+0x1c4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a5f      	ldr	r2, [pc, #380]	; (8001214 <HAL_ADC_Start_DMA+0x1c8>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	0c9a      	lsrs	r2, r3, #18
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010a4:	e002      	b.n	80010ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c0:	d107      	bne.n	80010d2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f040 8086 	bne.w	80011ee <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800110c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001120:	d106      	bne.n	8001130 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f023 0206 	bic.w	r2, r3, #6
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
 800112e:	e002      	b.n	8001136 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <HAL_ADC_Start_DMA+0x1cc>)
 8001140:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <HAL_ADC_Start_DMA+0x1d0>)
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114e:	4a34      	ldr	r2, [pc, #208]	; (8001220 <HAL_ADC_Start_DMA+0x1d4>)
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	4a33      	ldr	r2, [pc, #204]	; (8001224 <HAL_ADC_Start_DMA+0x1d8>)
 8001158:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001162:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001172:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001182:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	334c      	adds	r3, #76	; 0x4c
 800118e:	4619      	mov	r1, r3
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f000 fce2 	bl	8001b5c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10f      	bne.n	80011c4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d129      	bne.n	8001206 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	e020      	b.n	8001206 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_ADC_Start_DMA+0x1dc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d11b      	bne.n	8001206 <HAL_ADC_Start_DMA+0x1ba>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d114      	bne.n	8001206 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e00b      	b.n	8001206 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f043 0210 	orr.w	r2, r3, #16
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f043 0201 	orr.w	r2, r3, #1
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	431bde83 	.word	0x431bde83
 8001218:	40012300 	.word	0x40012300
 800121c:	080016c5 	.word	0x080016c5
 8001220:	0800177f 	.word	0x0800177f
 8001224:	0800179b 	.word	0x0800179b
 8001228:	40012000 	.word	0x40012000

0800122c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1c>
 8001280:	2302      	movs	r3, #2
 8001282:	e113      	b.n	80014ac <HAL_ADC_ConfigChannel+0x244>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b09      	cmp	r3, #9
 8001292:	d925      	bls.n	80012e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68d9      	ldr	r1, [r3, #12]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	3b1e      	subs	r3, #30
 80012aa:	2207      	movs	r2, #7
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43da      	mvns	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	400a      	ands	r2, r1
 80012b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68d9      	ldr	r1, [r3, #12]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	4603      	mov	r3, r0
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4403      	add	r3, r0
 80012d2:	3b1e      	subs	r3, #30
 80012d4:	409a      	lsls	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	e022      	b.n	8001326 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6919      	ldr	r1, [r3, #16]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	2207      	movs	r2, #7
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	400a      	ands	r2, r1
 8001302:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6919      	ldr	r1, [r3, #16]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	4603      	mov	r3, r0
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4403      	add	r3, r0
 800131c:	409a      	lsls	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b06      	cmp	r3, #6
 800132c:	d824      	bhi.n	8001378 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	3b05      	subs	r3, #5
 8001340:	221f      	movs	r2, #31
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	400a      	ands	r2, r1
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	3b05      	subs	r3, #5
 800136a:	fa00 f203 	lsl.w	r2, r0, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
 8001376:	e04c      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b0c      	cmp	r3, #12
 800137e:	d824      	bhi.n	80013ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	3b23      	subs	r3, #35	; 0x23
 8001392:	221f      	movs	r2, #31
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43da      	mvns	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	400a      	ands	r2, r1
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	3b23      	subs	r3, #35	; 0x23
 80013bc:	fa00 f203 	lsl.w	r2, r0, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
 80013c8:	e023      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b41      	subs	r3, #65	; 0x41
 80013dc:	221f      	movs	r2, #31
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	400a      	ands	r2, r1
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b41      	subs	r3, #65	; 0x41
 8001406:	fa00 f203 	lsl.w	r2, r0, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <HAL_ADC_ConfigChannel+0x250>)
 8001414:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a28      	ldr	r2, [pc, #160]	; (80014bc <HAL_ADC_ConfigChannel+0x254>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d10f      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1d8>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b12      	cmp	r3, #18
 8001426:	d10b      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_ADC_ConfigChannel+0x254>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12b      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x23a>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <HAL_ADC_ConfigChannel+0x258>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d003      	beq.n	800145c <HAL_ADC_ConfigChannel+0x1f4>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b11      	cmp	r3, #17
 800145a:	d122      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <HAL_ADC_ConfigChannel+0x258>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d111      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_ADC_ConfigChannel+0x25c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_ADC_ConfigChannel+0x260>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	0c9a      	lsrs	r2, r3, #18
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001494:	e002      	b.n	800149c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3b01      	subs	r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f9      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40012300 	.word	0x40012300
 80014bc:	40012000 	.word	0x40012000
 80014c0:	10000012 	.word	0x10000012
 80014c4:	20000000 	.word	0x20000000
 80014c8:	431bde83 	.word	0x431bde83

080014cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d4:	4b79      	ldr	r3, [pc, #484]	; (80016bc <ADC_Init+0x1f0>)
 80014d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	431a      	orrs	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	021a      	lsls	r2, r3, #8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001546:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6899      	ldr	r1, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	4a58      	ldr	r2, [pc, #352]	; (80016c0 <ADC_Init+0x1f4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d022      	beq.n	80015aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001572:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6899      	ldr	r1, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	e00f      	b.n	80015ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0202 	bic.w	r2, r2, #2
 80015d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6899      	ldr	r1, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e1b      	ldrb	r3, [r3, #24]
 80015e4:	005a      	lsls	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01b      	beq.n	8001630 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001606:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001616:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6859      	ldr	r1, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	3b01      	subs	r3, #1
 8001624:	035a      	lsls	r2, r3, #13
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	e007      	b.n	8001640 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800163e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	3b01      	subs	r3, #1
 800165c:	051a      	lsls	r2, r3, #20
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001682:	025a      	lsls	r2, r3, #9
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6899      	ldr	r1, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	029a      	lsls	r2, r3, #10
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	609a      	str	r2, [r3, #8]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40012300 	.word	0x40012300
 80016c0:	0f000001 	.word	0x0f000001

080016c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d13c      	bne.n	8001758 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d12b      	bne.n	8001750 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d127      	bne.n	8001750 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001718:	2b00      	cmp	r3, #0
 800171a:	d119      	bne.n	8001750 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0220 	bic.w	r2, r2, #32
 800172a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff f8c7 	bl	80008e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001756:	e00e      	b.n	8001776 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff fd75 	bl	8001254 <HAL_ADC_ErrorCallback>
}
 800176a:	e004      	b.n	8001776 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff fd4d 	bl	800122c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f043 0204 	orr.w	r2, r3, #4
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fd4a 	bl	8001254 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff29 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff3e 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff31 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa2 	bl	8001938 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff f99a 	bl	8000d44 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e099      	b.n	8001b50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3c:	e00f      	b.n	8001a5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a3e:	f7ff f981 	bl	8000d44 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d908      	bls.n	8001a5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e078      	b.n	8001b50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e8      	bne.n	8001a3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <HAL_DMA_Init+0x158>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d107      	bne.n	8001ac8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f023 0307 	bic.w	r3, r3, #7
 8001ade:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d117      	bne.n	8001b22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00e      	beq.n	8001b22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fa6f 	bl	8001fe8 <DMA_CheckFifoParam>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2240      	movs	r2, #64	; 0x40
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e016      	b.n	8001b50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fa26 	bl	8001f7c <DMA_CalcBaseAndBitshift>
 8001b30:	4603      	mov	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	223f      	movs	r2, #63	; 0x3f
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	f010803f 	.word	0xf010803f

08001b5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_DMA_Start_IT+0x26>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e040      	b.n	8001c04 <HAL_DMA_Start_IT+0xa8>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d12f      	bne.n	8001bf6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f9b8 	bl	8001f20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	223f      	movs	r2, #63	; 0x3f
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0216 	orr.w	r2, r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0208 	orr.w	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e005      	b.n	8001c02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c18:	4b8e      	ldr	r3, [pc, #568]	; (8001e54 <HAL_DMA_IRQHandler+0x248>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a8e      	ldr	r2, [pc, #568]	; (8001e58 <HAL_DMA_IRQHandler+0x24c>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	0a9b      	lsrs	r3, r3, #10
 8001c24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	2208      	movs	r2, #8
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d01a      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0204 	bic.w	r2, r2, #4
 8001c5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c64:	2208      	movs	r2, #8
 8001c66:	409a      	lsls	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d012      	beq.n	8001cae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	f043 0202 	orr.w	r2, r3, #2
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d012      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	f043 0204 	orr.w	r2, r3, #4
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	2210      	movs	r2, #16
 8001cea:	409a      	lsls	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d043      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d03c      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	2210      	movs	r2, #16
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d018      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d108      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d024      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	4798      	blx	r3
 8001d3a:	e01f      	b.n	8001d7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
 8001d4c:	e016      	b.n	8001d7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d107      	bne.n	8001d6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0208 	bic.w	r2, r2, #8
 8001d6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	2220      	movs	r2, #32
 8001d82:	409a      	lsls	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 808f 	beq.w	8001eac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8087 	beq.w	8001eac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	2220      	movs	r2, #32
 8001da4:	409a      	lsls	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d136      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0216 	bic.w	r2, r2, #22
 8001dc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <HAL_DMA_IRQHandler+0x1da>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0208 	bic.w	r2, r2, #8
 8001df4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	223f      	movs	r2, #63	; 0x3f
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d07e      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
        }
        return;
 8001e22:	e079      	b.n	8001f18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01d      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10d      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d031      	beq.n	8001eac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
 8001e50:	e02c      	b.n	8001eac <HAL_DMA_IRQHandler+0x2a0>
 8001e52:	bf00      	nop
 8001e54:	20000000 	.word	0x20000000
 8001e58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d023      	beq.n	8001eac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
 8001e6c:	e01e      	b.n	8001eac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10f      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0210 	bic.w	r2, r2, #16
 8001e8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d032      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d022      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2205      	movs	r2, #5
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	3301      	adds	r3, #1
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d307      	bcc.n	8001ef4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f2      	bne.n	8001ed8 <HAL_DMA_IRQHandler+0x2cc>
 8001ef2:	e000      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ef4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
 8001f16:	e000      	b.n	8001f1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f18:	bf00      	nop
    }
  }
}
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d108      	bne.n	8001f60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f5e:	e007      	b.n	8001f70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	60da      	str	r2, [r3, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3b10      	subs	r3, #16
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f96:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d909      	bls.n	8001fbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fb2:	f023 0303 	bic.w	r3, r3, #3
 8001fb6:	1d1a      	adds	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	659a      	str	r2, [r3, #88]	; 0x58
 8001fbc:	e007      	b.n	8001fce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	aaaaaaab 	.word	0xaaaaaaab
 8001fe4:	08003b84 	.word	0x08003b84

08001fe8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d11f      	bne.n	8002042 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d856      	bhi.n	80020b6 <DMA_CheckFifoParam+0xce>
 8002008:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <DMA_CheckFifoParam+0x28>)
 800200a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200e:	bf00      	nop
 8002010:	08002021 	.word	0x08002021
 8002014:	08002033 	.word	0x08002033
 8002018:	08002021 	.word	0x08002021
 800201c:	080020b7 	.word	0x080020b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d046      	beq.n	80020ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002030:	e043      	b.n	80020ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800203a:	d140      	bne.n	80020be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002040:	e03d      	b.n	80020be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800204a:	d121      	bne.n	8002090 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d837      	bhi.n	80020c2 <DMA_CheckFifoParam+0xda>
 8002052:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <DMA_CheckFifoParam+0x70>)
 8002054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002058:	08002069 	.word	0x08002069
 800205c:	0800206f 	.word	0x0800206f
 8002060:	08002069 	.word	0x08002069
 8002064:	08002081 	.word	0x08002081
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      break;
 800206c:	e030      	b.n	80020d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d025      	beq.n	80020c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800207e:	e022      	b.n	80020c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002088:	d11f      	bne.n	80020ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800208e:	e01c      	b.n	80020ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d903      	bls.n	800209e <DMA_CheckFifoParam+0xb6>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d003      	beq.n	80020a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800209c:	e018      	b.n	80020d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
      break;
 80020a2:	e015      	b.n	80020d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00e      	beq.n	80020ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
      break;
 80020b4:	e00b      	b.n	80020ce <DMA_CheckFifoParam+0xe6>
      break;
 80020b6:	bf00      	nop
 80020b8:	e00a      	b.n	80020d0 <DMA_CheckFifoParam+0xe8>
      break;
 80020ba:	bf00      	nop
 80020bc:	e008      	b.n	80020d0 <DMA_CheckFifoParam+0xe8>
      break;
 80020be:	bf00      	nop
 80020c0:	e006      	b.n	80020d0 <DMA_CheckFifoParam+0xe8>
      break;
 80020c2:	bf00      	nop
 80020c4:	e004      	b.n	80020d0 <DMA_CheckFifoParam+0xe8>
      break;
 80020c6:	bf00      	nop
 80020c8:	e002      	b.n	80020d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80020ca:	bf00      	nop
 80020cc:	e000      	b.n	80020d0 <DMA_CheckFifoParam+0xe8>
      break;
 80020ce:	bf00      	nop
    }
  } 
  
  return status; 
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e159      	b.n	80023b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	f040 8148 	bne.w	80023aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d005      	beq.n	8002132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212e:	2b02      	cmp	r3, #2
 8002130:	d130      	bne.n	8002194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 0201 	and.w	r2, r3, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b03      	cmp	r3, #3
 800219e:	d017      	beq.n	80021d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d123      	bne.n	8002224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	08da      	lsrs	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3208      	adds	r2, #8
 800221e:	69b9      	ldr	r1, [r7, #24]
 8002220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a2 	beq.w	80023aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a56      	ldr	r2, [pc, #344]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <HAL_GPIO_Init+0x2e8>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002282:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_GPIO_Init+0x2ec>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a49      	ldr	r2, [pc, #292]	; (80023d0 <HAL_GPIO_Init+0x2f0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d019      	beq.n	80022e2 <HAL_GPIO_Init+0x202>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a48      	ldr	r2, [pc, #288]	; (80023d4 <HAL_GPIO_Init+0x2f4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x1fe>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <HAL_GPIO_Init+0x2f8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00d      	beq.n	80022da <HAL_GPIO_Init+0x1fa>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a46      	ldr	r2, [pc, #280]	; (80023dc <HAL_GPIO_Init+0x2fc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <HAL_GPIO_Init+0x1f6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a45      	ldr	r2, [pc, #276]	; (80023e0 <HAL_GPIO_Init+0x300>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_GPIO_Init+0x1f2>
 80022ce:	2304      	movs	r3, #4
 80022d0:	e008      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022d2:	2307      	movs	r3, #7
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022d6:	2303      	movs	r3, #3
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x204>
 80022e2:	2300      	movs	r3, #0
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	f002 0203 	and.w	r2, r2, #3
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f4:	4935      	ldr	r1, [pc, #212]	; (80023cc <HAL_GPIO_Init+0x2ec>)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002326:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_GPIO_Init+0x304>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002350:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237a:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_GPIO_Init+0x304>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_GPIO_Init+0x304>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a4:	4a0f      	ldr	r2, [pc, #60]	; (80023e4 <HAL_GPIO_Init+0x304>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	f67f aea2 	bls.w	80020fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40013800 	.word	0x40013800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020800 	.word	0x40020800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e267      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d075      	beq.n	80024f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002406:	4b88      	ldr	r3, [pc, #544]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b04      	cmp	r3, #4
 8002410:	d00c      	beq.n	800242c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002412:	4b85      	ldr	r3, [pc, #532]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241a:	2b08      	cmp	r3, #8
 800241c:	d112      	bne.n	8002444 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	4b82      	ldr	r3, [pc, #520]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242a:	d10b      	bne.n	8002444 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	4b7e      	ldr	r3, [pc, #504]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d05b      	beq.n	80024f0 <HAL_RCC_OscConfig+0x108>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d157      	bne.n	80024f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e242      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244c:	d106      	bne.n	800245c <HAL_RCC_OscConfig+0x74>
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a75      	ldr	r2, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0xb0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x98>
 8002466:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6f      	ldr	r2, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6c      	ldr	r2, [pc, #432]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xb0>
 8002480:	4b69      	ldr	r3, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a68      	ldr	r2, [pc, #416]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b66      	ldr	r3, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a65      	ldr	r2, [pc, #404]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fc50 	bl	8000d44 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a8:	f7fe fc4c 	bl	8000d44 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e207      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b5b      	ldr	r3, [pc, #364]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0xc0>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fc3c 	bl	8000d44 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe fc38 	bl	8000d44 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1f3      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	4b51      	ldr	r3, [pc, #324]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0xe8>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d063      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fe:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002512:	2b08      	cmp	r3, #8
 8002514:	d11c      	bne.n	8002550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002516:	4b44      	ldr	r3, [pc, #272]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x152>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1c7      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4937      	ldr	r1, [pc, #220]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	e03a      	b.n	80025c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002558:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_RCC_OscConfig+0x244>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7fe fbf1 	bl	8000d44 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002566:	f7fe fbed 	bl	8000d44 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1a8      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4925      	ldr	r1, [pc, #148]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	e015      	b.n	80025c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCC_OscConfig+0x244>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7fe fbd0 	bl	8000d44 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe fbcc 	bl	8000d44 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e187      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d036      	beq.n	8002640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d016      	beq.n	8002608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_RCC_OscConfig+0x248>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7fe fbb0 	bl	8000d44 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e8:	f7fe fbac 	bl	8000d44 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e167      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 80025fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x200>
 8002606:	e01b      	b.n	8002640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_OscConfig+0x248>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7fe fb99 	bl	8000d44 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	e00e      	b.n	8002634 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002616:	f7fe fb95 	bl	8000d44 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d907      	bls.n	8002634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e150      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
 8002628:	40023800 	.word	0x40023800
 800262c:	42470000 	.word	0x42470000
 8002630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ea      	bne.n	8002616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8097 	beq.w	800277c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b81      	ldr	r3, [pc, #516]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	4b7d      	ldr	r3, [pc, #500]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a7c      	ldr	r2, [pc, #496]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b7a      	ldr	r3, [pc, #488]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b77      	ldr	r3, [pc, #476]	; (800285c <HAL_RCC_OscConfig+0x474>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268a:	4b74      	ldr	r3, [pc, #464]	; (800285c <HAL_RCC_OscConfig+0x474>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a73      	ldr	r2, [pc, #460]	; (800285c <HAL_RCC_OscConfig+0x474>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7fe fb55 	bl	8000d44 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7fe fb51 	bl	8000d44 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e10c      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b6a      	ldr	r3, [pc, #424]	; (800285c <HAL_RCC_OscConfig+0x474>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x2ea>
 80026c4:	4b64      	ldr	r3, [pc, #400]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a63      	ldr	r2, [pc, #396]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	e01c      	b.n	800270c <HAL_RCC_OscConfig+0x324>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x30c>
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a5e      	ldr	r2, [pc, #376]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
 80026e6:	4b5c      	ldr	r3, [pc, #368]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a5b      	ldr	r2, [pc, #364]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0x324>
 80026f4:	4b58      	ldr	r3, [pc, #352]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a57      	ldr	r2, [pc, #348]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	4b55      	ldr	r3, [pc, #340]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a54      	ldr	r2, [pc, #336]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 0304 	bic.w	r3, r3, #4
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d015      	beq.n	8002740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe fb16 	bl	8000d44 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe fb12 	bl	8000d44 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0cb      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	4b49      	ldr	r3, [pc, #292]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0ee      	beq.n	800271c <HAL_RCC_OscConfig+0x334>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7fe fb00 	bl	8000d44 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe fafc 	bl	8000d44 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0b5      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275e:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ee      	bne.n	8002748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002770:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4a38      	ldr	r2, [pc, #224]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a1 	beq.w	80028c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002786:	4b34      	ldr	r3, [pc, #208]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b08      	cmp	r3, #8
 8002790:	d05c      	beq.n	800284c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d141      	bne.n	800281e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_RCC_OscConfig+0x478>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fad0 	bl	8000d44 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe facc 	bl	8000d44 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e087      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	019b      	lsls	r3, r3, #6
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	3b01      	subs	r3, #1
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	491b      	ldr	r1, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x478>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe faa5 	bl	8000d44 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe faa1 	bl	8000d44 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e05c      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x416>
 800281c:	e054      	b.n	80028c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_RCC_OscConfig+0x478>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fa8e 	bl	8000d44 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe fa8a 	bl	8000d44 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e045      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x444>
 800284a:	e03d      	b.n	80028c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d107      	bne.n	8002864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e038      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
 8002858:	40023800 	.word	0x40023800
 800285c:	40007000 	.word	0x40007000
 8002860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x4ec>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d028      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d121      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d11a      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800289a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289c:	4293      	cmp	r3, r2
 800289e:	d111      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800

080028d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0cc      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b68      	ldr	r3, [pc, #416]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d90c      	bls.n	8002914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b8      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002944:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a52      	ldr	r2, [pc, #328]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800294e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	494d      	ldr	r1, [pc, #308]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d044      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d119      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d003      	beq.n	8002996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	2b03      	cmp	r3, #3
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002996:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e06f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a6:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e067      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b6:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4934      	ldr	r1, [pc, #208]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c8:	f7fe f9bc 	bl	8000d44 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fe f9b8 	bl	8000d44 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e04f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 020c 	and.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1eb      	bne.n	80029d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d20c      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4916      	ldr	r1, [pc, #88]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	490e      	ldr	r1, [pc, #56]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a5e:	f000 f821 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	490a      	ldr	r1, [pc, #40]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	5ccb      	ldrb	r3, [r1, r3]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe f91c 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00
 8002a94:	40023800 	.word	0x40023800
 8002a98:	08003b74 	.word	0x08003b74
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	20000004 	.word	0x20000004

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa8:	b090      	sub	sp, #64	; 0x40
 8002aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	f200 80a1 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x3a>
 8002ad6:	e09b      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ada:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002adc:	e09b      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ade:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ae2:	e098      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aee:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d028      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afa:	4b4a      	ldr	r3, [pc, #296]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	2200      	movs	r2, #0
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	627a      	str	r2, [r7, #36]	; 0x24
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b10:	fb03 f201 	mul.w	r2, r3, r1
 8002b14:	2300      	movs	r3, #0
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a43      	ldr	r2, [pc, #268]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b24:	460a      	mov	r2, r1
 8002b26:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2a:	4413      	add	r3, r2
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	2200      	movs	r2, #0
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	61fa      	str	r2, [r7, #28]
 8002b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b3e:	f7fd fb4b 	bl	80001d8 <__aeabi_uldivmod>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4613      	mov	r3, r2
 8002b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b4a:	e053      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4c:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	2200      	movs	r2, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	617a      	str	r2, [r7, #20]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b5e:	f04f 0b00 	mov.w	fp, #0
 8002b62:	4652      	mov	r2, sl
 8002b64:	465b      	mov	r3, fp
 8002b66:	f04f 0000 	mov.w	r0, #0
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	0159      	lsls	r1, r3, #5
 8002b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b74:	0150      	lsls	r0, r2, #5
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b96:	ebb2 0408 	subs.w	r4, r2, r8
 8002b9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	00eb      	lsls	r3, r5, #3
 8002ba8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bac:	00e2      	lsls	r2, r4, #3
 8002bae:	4614      	mov	r4, r2
 8002bb0:	461d      	mov	r5, r3
 8002bb2:	eb14 030a 	adds.w	r3, r4, sl
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	eb45 030b 	adc.w	r3, r5, fp
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	028b      	lsls	r3, r1, #10
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	028a      	lsls	r2, r1, #10
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	2200      	movs	r2, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	60fa      	str	r2, [r7, #12]
 8002be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be8:	f7fd faf6 	bl	80001d8 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3740      	adds	r7, #64	; 0x40
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	017d7840 	.word	0x017d7840

08002c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e041      	b.n	8002cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd ff0c 	bl	8000a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 fbfa 	bl	8003468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e041      	b.n	8002d64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f839 	bl	8002d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f000 fbab 	bl	8003468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_TIM_PWM_Start+0x24>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e022      	b.n	8002dea <HAL_TIM_PWM_Start+0x6a>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d109      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x3e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e015      	b.n	8002dea <HAL_TIM_PWM_Start+0x6a>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d109      	bne.n	8002dd8 <HAL_TIM_PWM_Start+0x58>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e008      	b.n	8002dea <HAL_TIM_PWM_Start+0x6a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e068      	b.n	8002ec4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_PWM_Start+0x82>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e00:	e013      	b.n	8002e2a <HAL_TIM_PWM_Start+0xaa>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x92>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e10:	e00b      	b.n	8002e2a <HAL_TIM_PWM_Start+0xaa>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_PWM_Start+0xa2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e20:	e003      	b.n	8002e2a <HAL_TIM_PWM_Start+0xaa>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	6839      	ldr	r1, [r7, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fdbe 	bl	80039b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <HAL_TIM_PWM_Start+0x14c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d107      	bne.n	8002e52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_TIM_PWM_Start+0x14c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d018      	beq.n	8002e8e <HAL_TIM_PWM_Start+0x10e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d013      	beq.n	8002e8e <HAL_TIM_PWM_Start+0x10e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <HAL_TIM_PWM_Start+0x150>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00e      	beq.n	8002e8e <HAL_TIM_PWM_Start+0x10e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <HAL_TIM_PWM_Start+0x154>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_TIM_PWM_Start+0x10e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_TIM_PWM_Start+0x158>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_TIM_PWM_Start+0x10e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a14      	ldr	r2, [pc, #80]	; (8002edc <HAL_TIM_PWM_Start+0x15c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d010      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb0:	e007      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800
 8002ed8:	40000c00 	.word	0x40000c00
 8002edc:	40014000 	.word	0x40014000

08002ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0202 	mvn.w	r2, #2
 8002f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa81 	bl	800342a <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa73 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fa84 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0204 	mvn.w	r2, #4
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa57 	bl	800342a <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa49 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fa5a 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0208 	mvn.w	r2, #8
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa2d 	bl	800342a <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa1f 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fa30 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0210 	mvn.w	r2, #16
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2208      	movs	r2, #8
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa03 	bl	800342a <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9f5 	bl	8003416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fa06 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0201 	mvn.w	r2, #1
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9cf 	bl	8003402 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b80      	cmp	r3, #128	; 0x80
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fd30 	bl	8003af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9cb 	bl	8003452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0220 	mvn.w	r2, #32
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fcfa 	bl	8003adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800310a:	2302      	movs	r3, #2
 800310c:	e0ae      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0c      	cmp	r3, #12
 800311a:	f200 809f 	bhi.w	800325c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800311e:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003159 	.word	0x08003159
 8003128:	0800325d 	.word	0x0800325d
 800312c:	0800325d 	.word	0x0800325d
 8003130:	0800325d 	.word	0x0800325d
 8003134:	08003199 	.word	0x08003199
 8003138:	0800325d 	.word	0x0800325d
 800313c:	0800325d 	.word	0x0800325d
 8003140:	0800325d 	.word	0x0800325d
 8003144:	080031db 	.word	0x080031db
 8003148:	0800325d 	.word	0x0800325d
 800314c:	0800325d 	.word	0x0800325d
 8003150:	0800325d 	.word	0x0800325d
 8003154:	0800321b 	.word	0x0800321b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fa02 	bl	8003568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0208 	orr.w	r2, r2, #8
 8003172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0204 	bic.w	r2, r2, #4
 8003182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6999      	ldr	r1, [r3, #24]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	619a      	str	r2, [r3, #24]
      break;
 8003196:	e064      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa48 	bl	8003634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6999      	ldr	r1, [r3, #24]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	021a      	lsls	r2, r3, #8
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	619a      	str	r2, [r3, #24]
      break;
 80031d8:	e043      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fa93 	bl	800370c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0208 	orr.w	r2, r2, #8
 80031f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0204 	bic.w	r2, r2, #4
 8003204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69d9      	ldr	r1, [r3, #28]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	61da      	str	r2, [r3, #28]
      break;
 8003218:	e023      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fadd 	bl	80037e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69d9      	ldr	r1, [r3, #28]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	021a      	lsls	r2, r3, #8
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	61da      	str	r2, [r3, #28]
      break;
 800325a:	e002      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
      break;
 8003260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800326a:	7dfb      	ldrb	r3, [r7, #23]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_TIM_ConfigClockSource+0x1c>
 800328c:	2302      	movs	r3, #2
 800328e:	e0b4      	b.n	80033fa <HAL_TIM_ConfigClockSource+0x186>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c8:	d03e      	beq.n	8003348 <HAL_TIM_ConfigClockSource+0xd4>
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	f200 8087 	bhi.w	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	f000 8086 	beq.w	80033e6 <HAL_TIM_ConfigClockSource+0x172>
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d87f      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b70      	cmp	r3, #112	; 0x70
 80032e2:	d01a      	beq.n	800331a <HAL_TIM_ConfigClockSource+0xa6>
 80032e4:	2b70      	cmp	r3, #112	; 0x70
 80032e6:	d87b      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b60      	cmp	r3, #96	; 0x60
 80032ea:	d050      	beq.n	800338e <HAL_TIM_ConfigClockSource+0x11a>
 80032ec:	2b60      	cmp	r3, #96	; 0x60
 80032ee:	d877      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f0:	2b50      	cmp	r3, #80	; 0x50
 80032f2:	d03c      	beq.n	800336e <HAL_TIM_ConfigClockSource+0xfa>
 80032f4:	2b50      	cmp	r3, #80	; 0x50
 80032f6:	d873      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d058      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x13a>
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d86f      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b30      	cmp	r3, #48	; 0x30
 8003302:	d064      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15a>
 8003304:	2b30      	cmp	r3, #48	; 0x30
 8003306:	d86b      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d060      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15a>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d867      	bhi.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05c      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15a>
 8003314:	2b10      	cmp	r3, #16
 8003316:	d05a      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x15a>
 8003318:	e062      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f000 fb23 	bl	8003974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800333c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	609a      	str	r2, [r3, #8]
      break;
 8003346:	e04f      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f000 fb0c 	bl	8003974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336a:	609a      	str	r2, [r3, #8]
      break;
 800336c:	e03c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	461a      	mov	r2, r3
 800337c:	f000 fa80 	bl	8003880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2150      	movs	r1, #80	; 0x50
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fad9 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 800338c:	e02c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	461a      	mov	r2, r3
 800339c:	f000 fa9f 	bl	80038de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2160      	movs	r1, #96	; 0x60
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fac9 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 80033ac:	e01c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 fa60 	bl	8003880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fab9 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 80033cc:	e00c      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f000 fab0 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 80033de:	e003      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a34      	ldr	r2, [pc, #208]	; (800354c <TIM_Base_SetConfig+0xe4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00f      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003486:	d00b      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a31      	ldr	r2, [pc, #196]	; (8003550 <TIM_Base_SetConfig+0xe8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a30      	ldr	r2, [pc, #192]	; (8003554 <TIM_Base_SetConfig+0xec>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a2f      	ldr	r2, [pc, #188]	; (8003558 <TIM_Base_SetConfig+0xf0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d108      	bne.n	80034b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a25      	ldr	r2, [pc, #148]	; (800354c <TIM_Base_SetConfig+0xe4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01b      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d017      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a22      	ldr	r2, [pc, #136]	; (8003550 <TIM_Base_SetConfig+0xe8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a21      	ldr	r2, [pc, #132]	; (8003554 <TIM_Base_SetConfig+0xec>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a20      	ldr	r2, [pc, #128]	; (8003558 <TIM_Base_SetConfig+0xf0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <TIM_Base_SetConfig+0xf4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <TIM_Base_SetConfig+0xf8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <TIM_Base_SetConfig+0xfc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <TIM_Base_SetConfig+0xe4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d103      	bne.n	8003538 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	615a      	str	r2, [r3, #20]
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800

08003568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f023 0201 	bic.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 0302 	bic.w	r3, r3, #2
 80035b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <TIM_OC1_SetConfig+0xc8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10c      	bne.n	80035de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f023 0308 	bic.w	r3, r3, #8
 80035ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a13      	ldr	r2, [pc, #76]	; (8003630 <TIM_OC1_SetConfig+0xc8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d111      	bne.n	800360a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	40010000 	.word	0x40010000

08003634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 0210 	bic.w	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0320 	bic.w	r3, r3, #32
 800367e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <TIM_OC2_SetConfig+0xd4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d10d      	bne.n	80036b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a15      	ldr	r2, [pc, #84]	; (8003708 <TIM_OC2_SetConfig+0xd4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d113      	bne.n	80036e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40010000 	.word	0x40010000

0800370c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <TIM_OC3_SetConfig+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10d      	bne.n	8003786 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a14      	ldr	r2, [pc, #80]	; (80037dc <TIM_OC3_SetConfig+0xd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d113      	bne.n	80037b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800379c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40010000 	.word	0x40010000

080037e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800382a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	031b      	lsls	r3, r3, #12
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a10      	ldr	r2, [pc, #64]	; (800387c <TIM_OC4_SetConfig+0x9c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d109      	bne.n	8003854 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	019b      	lsls	r3, r3, #6
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000

08003880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f023 030a 	bic.w	r3, r3, #10
 80038bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038de:	b480      	push	{r7}
 80038e0:	b087      	sub	sp, #28
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f023 0210 	bic.w	r2, r3, #16
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800391a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	f043 0307 	orr.w	r3, r3, #7
 8003960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	431a      	orrs	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	2201      	movs	r2, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1a      	ldr	r2, [r3, #32]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e050      	b.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d013      	beq.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40014000 	.word	0x40014000

08003adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4d0d      	ldr	r5, [pc, #52]	; (8003b3c <__libc_init_array+0x38>)
 8003b08:	4c0d      	ldr	r4, [pc, #52]	; (8003b40 <__libc_init_array+0x3c>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	2600      	movs	r6, #0
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	4d0b      	ldr	r5, [pc, #44]	; (8003b44 <__libc_init_array+0x40>)
 8003b16:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <__libc_init_array+0x44>)
 8003b18:	f000 f820 	bl	8003b5c <_init>
 8003b1c:	1b64      	subs	r4, r4, r5
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	2600      	movs	r6, #0
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	08003b94 	.word	0x08003b94
 8003b40:	08003b94 	.word	0x08003b94
 8003b44:	08003b94 	.word	0x08003b94
 8003b48:	08003b98 	.word	0x08003b98

08003b4c <memset>:
 8003b4c:	4402      	add	r2, r0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d100      	bne.n	8003b56 <memset+0xa>
 8003b54:	4770      	bx	lr
 8003b56:	f803 1b01 	strb.w	r1, [r3], #1
 8003b5a:	e7f9      	b.n	8003b50 <memset+0x4>

08003b5c <_init>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr

08003b68 <_fini>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr
