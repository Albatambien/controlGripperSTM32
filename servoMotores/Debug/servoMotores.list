
servoMotores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002a7c  08002a7c  00012a7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae8  08002ae8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002af0  08002af0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08002b68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002b68  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122c5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d9  00000000  00000000  00032365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000bf2f  00000000  00000000  0003473e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  00040670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f60  00000000  00000000  000410f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b9b  00000000  00000000  00042050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012696  00000000  00000000  00059beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a24e  00000000  00000000  0006c281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001064cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023f0  00000000  00000000  00106520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002a64 	.word	0x08002a64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002a64 	.word	0x08002a64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <delay_us>:
	lcd_send(lcd, _cmd, 0);
}
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 8000584:	b510      	push	{r4, lr}
 8000586:	4604      	mov	r4, r0
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 8000588:	f001 fa28 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <delay_us+0x24>)
 800058e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000592:	fb13 f004 	smulbb	r0, r3, r4
 8000596:	b280      	uxth	r0, r0
	for (int i = 0; i < delay; i += 14) {
 8000598:	2300      	movs	r3, #0
 800059a:	4298      	cmp	r0, r3
 800059c:	dc00      	bgt.n	80005a0 <delay_us+0x1c>
		__ASM("NOP");
	}
}
 800059e:	bd10      	pop	{r4, pc}
		__ASM("NOP");
 80005a0:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 80005a2:	330e      	adds	r3, #14
 80005a4:	e7f9      	b.n	800059a <delay_us+0x16>
 80005a6:	bf00      	nop
 80005a8:	000f4240 	.word	0x000f4240

080005ac <lcd_send>:
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 80005ac:	b538      	push	{r3, r4, r5, lr}
 80005ae:	4604      	mov	r4, r0
 80005b0:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 80005b2:	8881      	ldrh	r1, [r0, #4]
 80005b4:	6800      	ldr	r0, [r0, #0]
 80005b6:	f000 ff91 	bl	80014dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 80005ba:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80005bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80005be:	08ea      	lsrs	r2, r5, #3
 80005c0:	f000 ff8c 	bl	80014dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 80005c4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80005c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80005c8:	f3c5 0280 	ubfx	r2, r5, #2, #1
 80005cc:	f000 ff86 	bl	80014dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 80005d0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80005d2:	6a20      	ldr	r0, [r4, #32]
 80005d4:	f3c5 0240 	ubfx	r2, r5, #1, #1
 80005d8:	f000 ff80 	bl	80014dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 80005dc:	8ba1      	ldrh	r1, [r4, #28]
 80005de:	69a0      	ldr	r0, [r4, #24]
 80005e0:	f005 0201 	and.w	r2, r5, #1
 80005e4:	f000 ff7a 	bl	80014dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 80005e8:	8aa1      	ldrh	r1, [r4, #20]
 80005ea:	6920      	ldr	r0, [r4, #16]
 80005ec:	2201      	movs	r2, #1
 80005ee:	f000 ff75 	bl	80014dc <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff ffc6 	bl	8000584 <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 80005f8:	6920      	ldr	r0, [r4, #16]
 80005fa:	8aa1      	ldrh	r1, [r4, #20]
 80005fc:	2200      	movs	r2, #0
 80005fe:	f000 ff6d 	bl	80014dc <HAL_GPIO_WritePin>
}
 8000602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_us(50);	// commands need > 37us to settle
 8000606:	2032      	movs	r0, #50	; 0x32
 8000608:	f7ff bfbc 	b.w	8000584 <delay_us>

0800060c <lcd_sendCmd>:
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 800060c:	b538      	push	{r3, r4, r5, lr}
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 800060e:	2200      	movs	r2, #0
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 8000610:	4605      	mov	r5, r0
 8000612:	460c      	mov	r4, r1
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 8000614:	0909      	lsrs	r1, r1, #4
 8000616:	f7ff ffc9 	bl	80005ac <lcd_send>
	lcd_send(lcd, _cmd, 0);
 800061a:	f004 010f 	and.w	r1, r4, #15
 800061e:	4628      	mov	r0, r5
 8000620:	2200      	movs	r2, #0
}
 8000622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_send(lcd, _cmd, 0);
 8000626:	f7ff bfc1 	b.w	80005ac <lcd_send>

0800062a <lcd_sendData>:
static void lcd_sendData(LCD_t *lcd, char data) {
 800062a:	b538      	push	{r3, r4, r5, lr}
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 800062c:	2201      	movs	r2, #1
static void lcd_sendData(LCD_t *lcd, char data) {
 800062e:	4605      	mov	r5, r0
 8000630:	460c      	mov	r4, r1
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 8000632:	0909      	lsrs	r1, r1, #4
 8000634:	f7ff ffba 	bl	80005ac <lcd_send>
	lcd_send(lcd, _data, 1);
 8000638:	f004 010f 	and.w	r1, r4, #15
 800063c:	4628      	mov	r0, r5
 800063e:	2201      	movs	r2, #1
}
 8000640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_send(lcd, _data, 1);
 8000644:	f7ff bfb2 	b.w	80005ac <lcd_send>

08000648 <lcd_clear>:
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 8000648:	2101      	movs	r1, #1
 800064a:	f7ff bfdf 	b.w	800060c <lcd_sendCmd>

0800064e <lcd_display>:
	lcd->displaycontrol |= LCD_DISPLAYON;
 800064e:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
 8000652:	f041 0204 	orr.w	r2, r1, #4
 8000656:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 800065a:	f041 010c 	orr.w	r1, r1, #12
 800065e:	f7ff bfd5 	b.w	800060c <lcd_sendCmd>

08000662 <lcd_begin>:
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 8000662:	2a01      	cmp	r2, #1
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 8000664:	b510      	push	{r4, lr}
 8000666:	4604      	mov	r4, r0
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000668:	bf94      	ite	ls
 800066a:	2000      	movls	r0, #0
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 800066c:	2008      	movhi	r0, #8
 800066e:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
	lcd->row_offsets[0] = row0;
 8000672:	2000      	movs	r0, #0
 8000674:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	lcd->row_offsets[1] = row1;
 8000678:	2040      	movs	r0, #64	; 0x40
	lcd->cols = cols;
 800067a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
	lcd->row_offsets[2] = row2;
 800067e:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
	lcd->row_offsets[3] = row3;
 8000682:	4401      	add	r1, r0
	lcd->rows = rows;
 8000684:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
	lcd->row_offsets[1] = row1;
 8000688:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
	lcd->row_offsets[3] = row3;
 800068c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 8000690:	b13b      	cbz	r3, 80006a2 <lcd_begin+0x40>
 8000692:	2a01      	cmp	r2, #1
		lcd->displayfunction |= LCD_5x10DOTS;
 8000694:	bf02      	ittt	eq
 8000696:	f894 3037 	ldrbeq.w	r3, [r4, #55]	; 0x37
 800069a:	f043 0304 	orreq.w	r3, r3, #4
 800069e:	f884 3037 	strbeq.w	r3, [r4, #55]	; 0x37
	HAL_Delay(50);	// wait for >40ms
 80006a2:	2032      	movs	r0, #50	; 0x32
 80006a4:	f000 fbd8 	bl	8000e58 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 80006a8:	2103      	movs	r1, #3
 80006aa:	4620      	mov	r0, r4
 80006ac:	f7ff ffae 	bl	800060c <lcd_sendCmd>
	HAL_Delay(5);		// wait for >4.1ms
 80006b0:	2005      	movs	r0, #5
 80006b2:	f000 fbd1 	bl	8000e58 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 80006b6:	2103      	movs	r1, #3
 80006b8:	4620      	mov	r0, r4
 80006ba:	f7ff ffa7 	bl	800060c <lcd_sendCmd>
	delay_us(150);	// wait for >100us
 80006be:	2096      	movs	r0, #150	; 0x96
 80006c0:	f7ff ff60 	bl	8000584 <delay_us>
	lcd_sendCmd(lcd, 0x03);
 80006c4:	4620      	mov	r0, r4
 80006c6:	2103      	movs	r1, #3
 80006c8:	f7ff ffa0 	bl	800060c <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 80006cc:	2102      	movs	r1, #2
 80006ce:	4620      	mov	r0, r4
 80006d0:	f7ff ff9c 	bl	800060c <lcd_sendCmd>
	HAL_Delay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 fbbf 	bl	8000e58 <HAL_Delay>
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 80006da:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 80006de:	4620      	mov	r0, r4
 80006e0:	f041 0120 	orr.w	r1, r1, #32
 80006e4:	f7ff ff92 	bl	800060c <lcd_sendCmd>
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80006e8:	2304      	movs	r3, #4
 80006ea:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	lcd_display(lcd);
 80006ee:	4620      	mov	r0, r4
 80006f0:	f7ff ffad 	bl	800064e <lcd_display>
	lcd_clear(lcd);  // clear display
 80006f4:	4620      	mov	r0, r4
 80006f6:	f7ff ffa7 	bl	8000648 <lcd_clear>
	HAL_Delay(2);
 80006fa:	2002      	movs	r0, #2
 80006fc:	f000 fbac 	bl	8000e58 <HAL_Delay>
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000700:	2302      	movs	r3, #2
 8000702:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 8000706:	4620      	mov	r0, r4
 8000708:	2106      	movs	r1, #6
}
 800070a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 800070e:	f7ff bf7d 	b.w	800060c <lcd_sendCmd>

08000712 <lcd_setCursor>:
	if (row >= max_rows) {
 8000712:	2a03      	cmp	r2, #3
	if (row >= lcd->rows) {
 8000714:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8000718:	bf28      	it	cs
 800071a:	2203      	movcs	r2, #3
 800071c:	4293      	cmp	r3, r2
		row = lcd->rows - 1;    // we count rows starting w/0
 800071e:	bf9c      	itt	ls
 8000720:	f103 32ff 	addls.w	r2, r3, #4294967295
 8000724:	b2d2      	uxtbls	r2, r2
	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 8000726:	4402      	add	r2, r0
 8000728:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 800072c:	4419      	add	r1, r3
 800072e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8000732:	b2c9      	uxtb	r1, r1
 8000734:	f7ff bf6a 	b.w	800060c <lcd_sendCmd>

08000738 <lcd_print>:
void lcd_print(LCD_t *lcd, char *str) {
 8000738:	b538      	push	{r3, r4, r5, lr}
 800073a:	4605      	mov	r5, r0
 800073c:	1e4c      	subs	r4, r1, #1
	while (*str)
 800073e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000742:	b901      	cbnz	r1, 8000746 <lcd_print+0xe>
}
 8000744:	bd38      	pop	{r3, r4, r5, pc}
		lcd_sendData(lcd, *str++);
 8000746:	4628      	mov	r0, r5
 8000748:	f7ff ff6f 	bl	800062a <lcd_sendData>
 800074c:	e7f7      	b.n	800073e <lcd_print+0x6>
	...

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b510      	push	{r4, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000754:	2214      	movs	r2, #20
 8000756:	2100      	movs	r1, #0
 8000758:	a809      	add	r0, sp, #36	; 0x24
 800075a:	f001 fd05 	bl	8002168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075e:	2214      	movs	r2, #20
 8000760:	2100      	movs	r1, #0
 8000762:	a803      	add	r0, sp, #12
 8000764:	f001 fd00 	bl	8002168 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <SystemClock_Config+0x90>)
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000770:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000774:	6411      	str	r1, [r2, #64]	; 0x40
 8000776:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000778:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <SystemClock_Config+0x94>)
 8000782:	9302      	str	r3, [sp, #8]
 8000784:	6811      	ldr	r1, [r2, #0]
 8000786:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800078a:	6011      	str	r1, [r2, #0]
 800078c:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078e:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 64;
 800079a:	2008      	movs	r0, #8
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2101      	movs	r1, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a6:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007aa:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f000 fe97 	bl	80014e8 <HAL_RCC_OscConfig>
 80007ba:	4601      	mov	r1, r0
 80007bc:	b108      	cbz	r0, 80007c2 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007be:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80007c8:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d0:	a803      	add	r0, sp, #12
 80007d2:	f001 f867 	bl	80018a4 <HAL_RCC_ClockConfig>
 80007d6:	b108      	cbz	r0, 80007dc <SystemClock_Config+0x8c>
 80007d8:	b672      	cpsid	i
  while (1)
 80007da:	e7fe      	b.n	80007da <SystemClock_Config+0x8a>
}
 80007dc:	b014      	add	sp, #80	; 0x50
 80007de:	bd10      	pop	{r4, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <printLCD>:
{
 80007e8:	b570      	push	{r4, r5, r6, lr}
	  lcd_setCursor(&lcd, 0, 0);
 80007ea:	4c27      	ldr	r4, [pc, #156]	; (8000888 <printLCD+0xa0>)
 80007ec:	2200      	movs	r2, #0
{
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	4606      	mov	r6, r0
 80007f2:	460d      	mov	r5, r1
	  lcd_setCursor(&lcd, 0, 0);
 80007f4:	4620      	mov	r0, r4
 80007f6:	4611      	mov	r1, r2
 80007f8:	f7ff ff8b 	bl	8000712 <lcd_setCursor>
	  sprintf(bufferL, "Lectura: ");
 80007fc:	4923      	ldr	r1, [pc, #140]	; (800088c <printLCD+0xa4>)
 80007fe:	a807      	add	r0, sp, #28
 8000800:	f001 fcda 	bl	80021b8 <strcpy>
	  lcd_print(&lcd, bufferL);
 8000804:	a907      	add	r1, sp, #28
 8000806:	4620      	mov	r0, r4
 8000808:	f7ff ff96 	bl	8000738 <lcd_print>
	  lcd_setCursor(&lcd, 9, 0);
 800080c:	4620      	mov	r0, r4
 800080e:	2200      	movs	r2, #0
 8000810:	2109      	movs	r1, #9
 8000812:	f7ff ff7e 	bl	8000712 <lcd_setCursor>
	  sprintf(buffer_Lectura, "%hu", adcIn);
 8000816:	4632      	mov	r2, r6
 8000818:	491d      	ldr	r1, [pc, #116]	; (8000890 <printLCD+0xa8>)
 800081a:	a801      	add	r0, sp, #4
 800081c:	f001 fcac 	bl	8002178 <siprintf>
	  lcd_print(&lcd, buffer_Lectura);
 8000820:	a901      	add	r1, sp, #4
 8000822:	4620      	mov	r0, r4
 8000824:	f7ff ff88 	bl	8000738 <lcd_print>
	  sprintf(buffer_Lectura, "   ");
 8000828:	491a      	ldr	r1, [pc, #104]	; (8000894 <printLCD+0xac>)
 800082a:	a801      	add	r0, sp, #4
 800082c:	f001 fcc4 	bl	80021b8 <strcpy>
	  lcd_print(&lcd, buffer_Lectura);
 8000830:	a901      	add	r1, sp, #4
 8000832:	4620      	mov	r0, r4
 8000834:	f7ff ff80 	bl	8000738 <lcd_print>
	  lcd_setCursor(&lcd, 0, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	4620      	mov	r0, r4
 800083c:	2100      	movs	r1, #0
 800083e:	f7ff ff68 	bl	8000712 <lcd_setCursor>
	  sprintf(bufferT, "Tiempo: ");
 8000842:	4915      	ldr	r1, [pc, #84]	; (8000898 <printLCD+0xb0>)
 8000844:	a804      	add	r0, sp, #16
 8000846:	f001 fcb7 	bl	80021b8 <strcpy>
	  lcd_print(&lcd, bufferT);
 800084a:	a904      	add	r1, sp, #16
 800084c:	4620      	mov	r0, r4
 800084e:	f7ff ff73 	bl	8000738 <lcd_print>
	  lcd_setCursor(&lcd, 8, 1);
 8000852:	4620      	mov	r0, r4
 8000854:	2201      	movs	r2, #1
 8000856:	2108      	movs	r1, #8
 8000858:	f7ff ff5b 	bl	8000712 <lcd_setCursor>
	  sprintf(buffer_Tiempo, "%lu", tiempoTranscurrido);
 800085c:	462a      	mov	r2, r5
 800085e:	490f      	ldr	r1, [pc, #60]	; (800089c <printLCD+0xb4>)
 8000860:	a802      	add	r0, sp, #8
 8000862:	f001 fc89 	bl	8002178 <siprintf>
	  lcd_print(&lcd, buffer_Tiempo);
 8000866:	a902      	add	r1, sp, #8
 8000868:	4620      	mov	r0, r4
 800086a:	f7ff ff65 	bl	8000738 <lcd_print>
	  sprintf(buffer_Tiempo, "    ");
 800086e:	490c      	ldr	r1, [pc, #48]	; (80008a0 <printLCD+0xb8>)
 8000870:	a802      	add	r0, sp, #8
 8000872:	f001 fca1 	bl	80021b8 <strcpy>
	  lcd_print(&lcd, buffer_Tiempo);
 8000876:	a902      	add	r1, sp, #8
 8000878:	4620      	mov	r0, r4
 800087a:	f7ff ff5d 	bl	8000738 <lcd_print>
	  HAL_Delay(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f000 faea 	bl	8000e58 <HAL_Delay>
}
 8000884:	b00a      	add	sp, #40	; 0x28
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	20000164 	.word	0x20000164
 800088c:	08002a7c 	.word	0x08002a7c
 8000890:	08002a86 	.word	0x08002a86
 8000894:	08002a98 	.word	0x08002a98
 8000898:	08002a8a 	.word	0x08002a8a
 800089c:	08002a93 	.word	0x08002a93
 80008a0:	08002a97 	.word	0x08002a97

080008a4 <main>:
{
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	b094      	sub	sp, #80	; 0x50
    return HAL_GetTick();
 80008aa:	f000 facf 	bl	8000e4c <HAL_GetTick>
	tiempoInicial = obtenerTiempoActual();
 80008ae:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8000b4c <main+0x2a8>
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|LCD_D7_Pin|LCD_D6_Pin
 80008b2:	4f9c      	ldr	r7, [pc, #624]	; (8000b24 <main+0x280>)
	tiempoInicial = obtenerTiempoActual();
 80008b4:	f8c8 0000 	str.w	r0, [r8]
  HAL_Init();
 80008b8:	f000 faa2 	bl	8000e00 <HAL_Init>
  SystemClock_Config();
 80008bc:	f7ff ff48 	bl	8000750 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	2214      	movs	r2, #20
 80008c2:	2100      	movs	r1, #0
 80008c4:	a80d      	add	r0, sp, #52	; 0x34
 80008c6:	f001 fc4f 	bl	8002168 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2400      	movs	r4, #0
 80008cc:	4b96      	ldr	r3, [pc, #600]	; (8000b28 <main+0x284>)
 80008ce:	9403      	str	r4, [sp, #12]
 80008d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  htim2.Instance = TIM2;
 80008d2:	4d96      	ldr	r5, [pc, #600]	; (8000b2c <main+0x288>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d4:	f042 0204 	orr.w	r2, r2, #4
 80008d8:	631a      	str	r2, [r3, #48]	; 0x30
 80008da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008dc:	f002 0204 	and.w	r2, r2, #4
 80008e0:	9203      	str	r2, [sp, #12]
 80008e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e4:	9404      	str	r4, [sp, #16]
 80008e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
 80008ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80008f4:	9204      	str	r2, [sp, #16]
 80008f6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	9405      	str	r4, [sp, #20]
 80008fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008fc:	f042 0201 	orr.w	r2, r2, #1
 8000900:	631a      	str	r2, [r3, #48]	; 0x30
 8000902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000904:	f002 0201 	and.w	r2, r2, #1
 8000908:	9205      	str	r2, [sp, #20]
 800090a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090c:	9406      	str	r4, [sp, #24]
 800090e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000910:	f042 0202 	orr.w	r2, r2, #2
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|LCD_D7_Pin|LCD_D6_Pin
 800091c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|LCD_D7_Pin|LCD_D6_Pin
 8000920:	f24f 4102 	movw	r1, #62466	; 0xf402
 8000924:	4638      	mov	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|LCD_D7_Pin|LCD_D6_Pin
 800092c:	f000 fdd6 	bl	80014dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	f24f 4302 	movw	r3, #62466	; 0xf402
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	a90d      	add	r1, sp, #52	; 0x34
 8000936:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	e9cd 390d 	strd	r3, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f000 fd04 	bl	800134c <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000944:	2210      	movs	r2, #16
 8000946:	4621      	mov	r1, r4
 8000948:	a809      	add	r0, sp, #36	; 0x24
 800094a:	f001 fc0d 	bl	8002168 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094e:	4621      	mov	r1, r4
 8000950:	221c      	movs	r2, #28
 8000952:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000958:	f001 fc06 	bl	8002168 <memset>
  htim2.Init.Prescaler = 64;
 800095c:	2340      	movs	r3, #64	; 0x40
 800095e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000962:	e9c5 1300 	strd	r1, r3, [r5]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000966:	4628      	mov	r0, r5
  htim2.Init.Period = 2499;
 8000968:	f640 13c3 	movw	r3, #2499	; 0x9c3
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000974:	f001 f91c 	bl	8001bb0 <HAL_TIM_Base_Init>
 8000978:	b108      	cbz	r0, 800097e <main+0xda>
 800097a:	b672      	cpsid	i
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0xd8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000982:	a909      	add	r1, sp, #36	; 0x24
 8000984:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800098a:	f001 f9fb 	bl	8001d84 <HAL_TIM_ConfigClockSource>
 800098e:	b108      	cbz	r0, 8000994 <main+0xf0>
 8000990:	b672      	cpsid	i
  while (1)
 8000992:	e7fe      	b.n	8000992 <main+0xee>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000994:	4628      	mov	r0, r5
 8000996:	f001 f937 	bl	8001c08 <HAL_TIM_PWM_Init>
 800099a:	b108      	cbz	r0, 80009a0 <main+0xfc>
 800099c:	b672      	cpsid	i
  while (1)
 800099e:	e7fe      	b.n	800099e <main+0xfa>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a4:	a907      	add	r1, sp, #28
 80009a6:	4628      	mov	r0, r5
 80009a8:	f001 faf2 	bl	8001f90 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4602      	mov	r2, r0
 80009ae:	b108      	cbz	r0, 80009b4 <main+0x110>
 80009b0:	b672      	cpsid	i
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <main+0x10e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b4:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80009b6:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ba:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009be:	a90d      	add	r1, sp, #52	; 0x34
 80009c0:	4628      	mov	r0, r5
 80009c2:	f001 f979 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
 80009c6:	b108      	cbz	r0, 80009cc <main+0x128>
 80009c8:	b672      	cpsid	i
  while (1)
 80009ca:	e7fe      	b.n	80009ca <main+0x126>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009cc:	2204      	movs	r2, #4
 80009ce:	a90d      	add	r1, sp, #52	; 0x34
 80009d0:	4628      	mov	r0, r5
 80009d2:	f001 f971 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4604      	mov	r4, r0
 80009d8:	b108      	cbz	r0, 80009de <main+0x13a>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x138>
  HAL_TIM_MspPostInit(&htim2);
 80009de:	4628      	mov	r0, r5
 80009e0:	f000 f91a 	bl	8000c18 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 80009e4:	4852      	ldr	r0, [pc, #328]	; (8000b30 <main+0x28c>)
  huart1.Init.BaudRate = 9600;
 80009e6:	4a53      	ldr	r2, [pc, #332]	; (8000b34 <main+0x290>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e8:	6104      	str	r4, [r0, #16]
  huart1.Init.BaudRate = 9600;
 80009ea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80009ee:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f2:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f8:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fe:	f001 fb5b 	bl	80020b8 <HAL_UART_Init>
 8000a02:	4606      	mov	r6, r0
 8000a04:	b108      	cbz	r0, 8000a0a <main+0x166>
 8000a06:	b672      	cpsid	i
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x164>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	a80d      	add	r0, sp, #52	; 0x34
 8000a10:	f001 fbaa 	bl	8002168 <memset>
  hadc1.Instance = ADC1;
 8000a14:	4c48      	ldr	r4, [pc, #288]	; (8000b38 <main+0x294>)
 8000a16:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <main+0x298>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a18:	60a6      	str	r6, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a1a:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a1e:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a20:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <main+0x29c>)
  hadc1.Init.ScanConvMode = ENABLE;
 8000a22:	f8c4 9010 	str.w	r9, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a26:	f884 9018 	strb.w	r9, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2a:	f884 6020 	strb.w	r6, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2e:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a32:	60e6      	str	r6, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a34:	f8c4 901c 	str.w	r9, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a38:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a3c:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3e:	f000 fa1f 	bl	8000e80 <HAL_ADC_Init>
 8000a42:	b108      	cbz	r0, 8000a48 <main+0x1a4>
 8000a44:	b672      	cpsid	i
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <main+0x1a2>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a48:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4a:	a90d      	add	r1, sp, #52	; 0x34
 8000a4c:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8000a4e:	e9cd 990d 	strd	r9, r9, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a52:	f000 fb87 	bl	8001164 <HAL_ADC_ConfigChannel>
 8000a56:	b108      	cbz	r0, 8000a5c <main+0x1b8>
 8000a58:	b672      	cpsid	i
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <main+0x1b6>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000a5c:	4601      	mov	r1, r0
 8000a5e:	9001      	str	r0, [sp, #4]
 8000a60:	4628      	mov	r0, r5
 8000a62:	f001 fa93 	bl	8001f8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000a66:	2104      	movs	r1, #4
 8000a68:	4628      	mov	r0, r5
 8000a6a:	f001 fa8f 	bl	8001f8c <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f000 faac 	bl	8000fcc <HAL_ADC_Start>
  lcd.RS_port = LCD_RS_GPIO_Port;
 8000a74:	4833      	ldr	r0, [pc, #204]	; (8000b44 <main+0x2a0>)
  lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000a76:	9b01      	ldr	r3, [sp, #4]
  lcd.RS_port = LCD_RS_GPIO_Port;
 8000a78:	6007      	str	r7, [r0, #0]
  lcd.D4_pin = LCD_D4_Pin;
 8000a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7e:	8381      	strh	r1, [r0, #28]
  lcd.D5_pin = LCD_D5_Pin;
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  lcd.RS_pin = LCD_RS_Pin;
 8000a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
  lcd.D5_pin = LCD_D5_Pin;
 8000a88:	8481      	strh	r1, [r0, #36]	; 0x24
  lcd.D6_pin = LCD_D6_Pin;
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  lcd.RS_pin = LCD_RS_Pin;
 8000a8e:	8082      	strh	r2, [r0, #4]
  lcd.D6_pin = LCD_D6_Pin;
 8000a90:	8581      	strh	r1, [r0, #44]	; 0x2c
  lcd.EN_pin = LCD_EN_Pin;
 8000a92:	2202      	movs	r2, #2
  lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000a94:	2110      	movs	r1, #16
  lcd.EN_port = LCD_EN_GPIO_Port;
 8000a96:	6107      	str	r7, [r0, #16]
  lcd.D4_port = LCD_D4_GPIO_Port;
 8000a98:	6187      	str	r7, [r0, #24]
  lcd.D5_port = LCD_D5_GPIO_Port;
 8000a9a:	6207      	str	r7, [r0, #32]
  lcd.D6_port = LCD_D6_GPIO_Port;
 8000a9c:	6287      	str	r7, [r0, #40]	; 0x28
  lcd.D7_port = LCD_D7_GPIO_Port;
 8000a9e:	6307      	str	r7, [r0, #48]	; 0x30
  lcd.EN_pin = LCD_EN_Pin;
 8000aa0:	8282      	strh	r2, [r0, #20]
  lcd.D7_pin = LCD_D7_Pin;
 8000aa2:	f8a0 a034 	strh.w	sl, [r0, #52]	; 0x34
  lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000aa6:	f7ff fddc 	bl	8000662 <lcd_begin>
		  adcIn = HAL_ADC_GetValue(&hadc1);
 8000aaa:	4f27      	ldr	r7, [pc, #156]	; (8000b48 <main+0x2a4>)
	  for (int i = 65; i < 180; i++) {
 8000aac:	2541      	movs	r5, #65	; 0x41
		  TIM2->CCR1 = i ;
 8000aae:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
			  TIM2->CCR2 = 10 ;
 8000ab2:	f04f 090a 	mov.w	r9, #10
		  HAL_ADC_PollForConversion(&hadc1, 50);
 8000ab6:	2132      	movs	r1, #50	; 0x32
		  TIM2->CCR1 = i ;
 8000ab8:	6375      	str	r5, [r6, #52]	; 0x34
		  HAL_ADC_PollForConversion(&hadc1, 50);
 8000aba:	4620      	mov	r0, r4
			  TIM2->CCR2 = 10 ;
 8000abc:	f8c6 9038 	str.w	r9, [r6, #56]	; 0x38
		  HAL_ADC_PollForConversion(&hadc1, 50);
 8000ac0:	f000 fafa 	bl	80010b8 <HAL_ADC_PollForConversion>
		  adcIn = HAL_ADC_GetValue(&hadc1);
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f000 fb4a 	bl	800115e <HAL_ADC_GetValue>
 8000aca:	8038      	strh	r0, [r7, #0]
    return HAL_GetTick();
 8000acc:	f000 f9be 	bl	8000e4c <HAL_GetTick>
		  uint32_t tiempoTranscurrido = obtenerTiempoActual() - tiempoInicial;
 8000ad0:	f8d8 1000 	ldr.w	r1, [r8]
	  for (int i = 65; i < 180; i++) {
 8000ad4:	3501      	adds	r5, #1
		  printLCD(adcIn, tiempoTranscurrido);
 8000ad6:	1a41      	subs	r1, r0, r1
 8000ad8:	8838      	ldrh	r0, [r7, #0]
 8000ada:	f7ff fe85 	bl	80007e8 <printLCD>
	  for (int i = 65; i < 180; i++) {
 8000ade:	2db4      	cmp	r5, #180	; 0xb4
 8000ae0:	d1e5      	bne.n	8000aae <main+0x20a>
	  HAL_Delay(800);
 8000ae2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ae6:	f000 f9b7 	bl	8000e58 <HAL_Delay>
		  if (i == 180){
 8000aea:	2db4      	cmp	r5, #180	; 0xb4
		  	  TIM2->CCR2 = 130 ;
 8000aec:	bf08      	it	eq
 8000aee:	2382      	moveq	r3, #130	; 0x82
		  TIM2->CCR1 = i;
 8000af0:	6375      	str	r5, [r6, #52]	; 0x34
		  HAL_ADC_PollForConversion(&hadc1, 50);
 8000af2:	f04f 0132 	mov.w	r1, #50	; 0x32
		  	  TIM2->CCR2 = 130 ;
 8000af6:	bf0c      	ite	eq
 8000af8:	63b3      	streq	r3, [r6, #56]	; 0x38
			  TIM2->CCR2 = 10 ;
 8000afa:	f8c6 9038 	strne.w	r9, [r6, #56]	; 0x38
		  HAL_ADC_PollForConversion(&hadc1, 50);
 8000afe:	4620      	mov	r0, r4
 8000b00:	f000 fada 	bl	80010b8 <HAL_ADC_PollForConversion>
		  adcIn = HAL_ADC_GetValue(&hadc1);
 8000b04:	4620      	mov	r0, r4
 8000b06:	f000 fb2a 	bl	800115e <HAL_ADC_GetValue>
 8000b0a:	8038      	strh	r0, [r7, #0]
    return HAL_GetTick();
 8000b0c:	f000 f99e 	bl	8000e4c <HAL_GetTick>
		  uint32_t tiempoTranscurrido = obtenerTiempoActual() - tiempoInicial;
 8000b10:	f8d8 1000 	ldr.w	r1, [r8]
	  for (int i = 180; i > 65; i--) {
 8000b14:	3d01      	subs	r5, #1
		  printLCD(adcIn, tiempoTranscurrido);
 8000b16:	1a41      	subs	r1, r0, r1
 8000b18:	8838      	ldrh	r0, [r7, #0]
 8000b1a:	f7ff fe65 	bl	80007e8 <printLCD>
	  for (int i = 180; i > 65; i--) {
 8000b1e:	2d41      	cmp	r5, #65	; 0x41
 8000b20:	d1e3      	bne.n	8000aea <main+0x246>
 8000b22:	e7c3      	b.n	8000aac <main+0x208>
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	200000d8 	.word	0x200000d8
 8000b30:	20000120 	.word	0x20000120
 8000b34:	40011000 	.word	0x40011000
 8000b38:	20000090 	.word	0x20000090
 8000b3c:	40012000 	.word	0x40012000
 8000b40:	0f000001 	.word	0x0f000001
 8000b44:	20000164 	.word	0x20000164
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	200001a4 	.word	0x200001a4

08000b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x34>)
 8000b54:	2100      	movs	r1, #0
 8000b56:	9100      	str	r1, [sp, #0]
 8000b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b5e:	645a      	str	r2, [r3, #68]	; 0x44
 8000b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b62:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b66:	9200      	str	r2, [sp, #0]
 8000b68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	9101      	str	r1, [sp, #4]
 8000b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b72:	641a      	str	r2, [r3, #64]	; 0x40
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	b002      	add	sp, #8
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	2214      	movs	r2, #20
 8000b90:	2100      	movs	r1, #0
 8000b92:	a803      	add	r0, sp, #12
 8000b94:	f001 fae8 	bl	8002168 <memset>
  if(hadc->Instance==ADC1)
 8000b98:	6822      	ldr	r2, [r4, #0]
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_ADC_MspInit+0x5c>)
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d11e      	bne.n	8000bde <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ba0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	9101      	str	r1, [sp, #4]
 8000ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	480f      	ldr	r0, [pc, #60]	; (8000be8 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bb0:	645a      	str	r2, [r3, #68]	; 0x44
 8000bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bb4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000bb8:	9201      	str	r2, [sp, #4]
 8000bba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	9102      	str	r1, [sp, #8]
 8000bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc0:	f042 0201 	orr.w	r2, r2, #1
 8000bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2206      	movs	r2, #6
 8000bd2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f000 fbb7 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bde:	b008      	add	sp, #32
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	bf00      	nop
 8000be4:	40012000 	.word	0x40012000
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000bec:	6803      	ldr	r3, [r0, #0]
 8000bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8000bf2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8000bf4:	d10b      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_TIM_Base_MspInit+0x28>)
 8000bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfe:	f042 0201 	orr.w	r2, r2, #1
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c0e:	b002      	add	sp, #8
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	2214      	movs	r2, #20
 8000c20:	2100      	movs	r1, #0
 8000c22:	a803      	add	r0, sp, #12
 8000c24:	f001 faa0 	bl	8002168 <memset>
  if(htim->Instance==TIM2)
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c2e:	d129      	bne.n	8000c84 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000c34:	2400      	movs	r4, #0
 8000c36:	9401      	str	r4, [sp, #4]
 8000c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	4813      	ldr	r0, [pc, #76]	; (8000c88 <HAL_TIM_MspPostInit+0x70>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	f042 0201 	orr.w	r2, r2, #1
 8000c40:	631a      	str	r2, [r3, #48]	; 0x30
 8000c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c44:	f002 0201 	and.w	r2, r2, #1
 8000c48:	9201      	str	r2, [sp, #4]
 8000c4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	9402      	str	r4, [sp, #8]
 8000c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c50:	f042 0202 	orr.w	r2, r2, #2
 8000c54:	631a      	str	r2, [r3, #48]	; 0x30
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c66:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	e9cd 5603 	strd	r5, r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f000 fb6e 	bl	800134c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c70:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c74:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f000 fb64 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c84:	b008      	add	sp, #32
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b510      	push	{r4, lr}
 8000c92:	4604      	mov	r4, r0
 8000c94:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	2214      	movs	r2, #20
 8000c98:	2100      	movs	r1, #0
 8000c9a:	a803      	add	r0, sp, #12
 8000c9c:	f001 fa64 	bl	8002168 <memset>
  if(huart->Instance==USART1)
 8000ca0:	6822      	ldr	r2, [r4, #0]
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_UART_MspInit+0x64>)
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d123      	bne.n	8000cf0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000cac:	2100      	movs	r1, #0
 8000cae:	9101      	str	r1, [sp, #4]
 8000cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb4:	f042 0210 	orr.w	r2, r2, #16
 8000cb8:	645a      	str	r2, [r3, #68]	; 0x44
 8000cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cbc:	f002 0210 	and.w	r2, r2, #16
 8000cc0:	9201      	str	r2, [sp, #4]
 8000cc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	9102      	str	r1, [sp, #8]
 8000cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc8:	f042 0201 	orr.w	r2, r2, #1
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	9302      	str	r3, [sp, #8]
 8000cd6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000cdc:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cde:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	a903      	add	r1, sp, #12
 8000cec:	f000 fb2e 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cf0:	b008      	add	sp, #32
 8000cf2:	bd10      	pop	{r4, pc}
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	40020000 	.word	0x40020000

08000cfc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler>

08000cfe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler>

08000d00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler>

08000d02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler>

08000d04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler>

08000d06 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 b892 	b.w	8000e34 <HAL_IncTick>

08000d10 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <_sbrk+0x30>)
 8000d12:	6811      	ldr	r1, [r2, #0]
{
 8000d14:	b510      	push	{r4, lr}
 8000d16:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000d18:	b909      	cbnz	r1, 8000d1e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000d1a:	490a      	ldr	r1, [pc, #40]	; (8000d44 <_sbrk+0x34>)
 8000d1c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	6810      	ldr	r0, [r2, #0]
 8000d20:	4909      	ldr	r1, [pc, #36]	; (8000d48 <_sbrk+0x38>)
 8000d22:	4c0a      	ldr	r4, [pc, #40]	; (8000d4c <_sbrk+0x3c>)
 8000d24:	4403      	add	r3, r0
 8000d26:	1b09      	subs	r1, r1, r4
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d906      	bls.n	8000d3a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000d2c:	f001 f9f2 	bl	8002114 <__errno>
 8000d30:	230c      	movs	r3, #12
 8000d32:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000d38:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000d3a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000d3c:	e7fc      	b.n	8000d38 <_sbrk+0x28>
 8000d3e:	bf00      	nop
 8000d40:	200001a8 	.word	0x200001a8
 8000d44:	200001c0 	.word	0x200001c0
 8000d48:	20020000 	.word	0x20020000
 8000d4c:	00000400 	.word	0x00000400

08000d50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <SystemInit+0x10>)
 8000d52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000d56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6a:	490e      	ldr	r1, [pc, #56]	; (8000da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d80:	4c0b      	ldr	r4, [pc, #44]	; (8000db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d8e:	f7ff ffdf 	bl	8000d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f001 f9c5 	bl	8002120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fd85 	bl	80008a4 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da8:	08002af8 	.word	0x08002af8
  ldr r2, =_sbss
 8000dac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db0:	200001c0 	.word	0x200001c0

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_InitTick+0x3c>)
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_InitTick+0x40>)
{
 8000dbe:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	7818      	ldrb	r0, [r3, #0]
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f0 	udiv	r3, r3, r0
 8000dca:	6810      	ldr	r0, [r2, #0]
 8000dcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dd0:	f000 faa8 	bl	8001324 <HAL_SYSTICK_Config>
 8000dd4:	4604      	mov	r4, r0
 8000dd6:	b958      	cbnz	r0, 8000df0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd8:	2d0f      	cmp	r5, #15
 8000dda:	d809      	bhi.n	8000df0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4629      	mov	r1, r5
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 fa6c 	bl	80012c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_InitTick+0x44>)
 8000dea:	4620      	mov	r0, r4
 8000dec:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000df0:	2001      	movs	r0, #1
 8000df2:	e7fc      	b.n	8000dee <HAL_InitTick+0x36>
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	20000008 	.word	0x20000008

08000e00 <HAL_Init>:
{
 8000e00:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_Init+0x30>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e0a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e1a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 fa3d 	bl	800129c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	200f      	movs	r0, #15
 8000e24:	f7ff ffc8 	bl	8000db8 <HAL_InitTick>
  HAL_MspInit();
 8000e28:	f7ff fe92 	bl	8000b50 <HAL_MspInit>
}
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	bd08      	pop	{r3, pc}
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <HAL_IncTick+0x10>)
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_IncTick+0x14>)
 8000e38:	6811      	ldr	r1, [r2, #0]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	440b      	add	r3, r1
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200001ac 	.word	0x200001ac
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e4c:	4b01      	ldr	r3, [pc, #4]	; (8000e54 <HAL_GetTick+0x8>)
 8000e4e:	6818      	ldr	r0, [r3, #0]
}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200001ac 	.word	0x200001ac

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff fff6 	bl	8000e4c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e60:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e62:	bf1c      	itt	ne
 8000e64:	4b05      	ldrne	r3, [pc, #20]	; (8000e7c <HAL_Delay+0x24>)
 8000e66:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	bf18      	it	ne
 8000e6c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e6e:	f7ff ffed 	bl	8000e4c <HAL_GetTick>
 8000e72:	1b43      	subs	r3, r0, r5
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	d3fa      	bcc.n	8000e6e <HAL_Delay+0x16>
  {
  }
}
 8000e78:	bd38      	pop	{r3, r4, r5, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e80:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e82:	4604      	mov	r4, r0
 8000e84:	2800      	cmp	r0, #0
 8000e86:	f000 809b 	beq.w	8000fc0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e8a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000e8c:	b925      	cbnz	r5, 8000e98 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e8e:	f7ff fe7b 	bl	8000b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e92:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e94:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e9a:	06db      	lsls	r3, r3, #27
 8000e9c:	f100 808e 	bmi.w	8000fbc <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ea2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ea6:	f023 0302 	bic.w	r3, r3, #2
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000eb0:	4b44      	ldr	r3, [pc, #272]	; (8000fc4 <HAL_ADC_Init+0x144>)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000eb8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	6861      	ldr	r1, [r4, #4]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ec2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ec4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ed4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ed6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ed8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000eda:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ede:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ee6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ee8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ef6:	4934      	ldr	r1, [pc, #208]	; (8000fc8 <HAL_ADC_Init+0x148>)
 8000ef8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000efa:	428a      	cmp	r2, r1
 8000efc:	d052      	beq.n	8000fa4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000efe:	6899      	ldr	r1, [r3, #8]
 8000f00:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000f04:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f06:	6899      	ldr	r1, [r3, #8]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f0c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f1a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	f022 0202 	bic.w	r2, r2, #2
 8000f22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	7e21      	ldrb	r1, [r4, #24]
 8000f28:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000f2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f2e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d03e      	beq.n	8000fb4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f36:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f38:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	3901      	subs	r1, #1
 8000f4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f50:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f54:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f5e:	3901      	subs	r1, #1
 8000f60:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8000f74:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000f78:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f7a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f7c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f84:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000f86:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f88:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000f8c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000fa2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000faa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fb2:	e7b2      	b.n	8000f1a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fba:	e7c9      	b.n	8000f50 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	e7ed      	b.n	8000f9c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	e7ee      	b.n	8000fa2 <HAL_ADC_Init+0x122>
 8000fc4:	40012300 	.word	0x40012300
 8000fc8:	0f000001 	.word	0x0f000001

08000fcc <HAL_ADC_Start>:
{
 8000fcc:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000fd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000fd6:	2b01      	cmp	r3, #1
{
 8000fd8:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8000fda:	d060      	beq.n	800109e <HAL_ADC_Start+0xd2>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fdc:	6801      	ldr	r1, [r0, #0]
  __HAL_LOCK(hadc);
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fe4:	688b      	ldr	r3, [r1, #8]
 8000fe6:	07d8      	lsls	r0, r3, #31
 8000fe8:	d50c      	bpl.n	8001004 <HAL_ADC_Start+0x38>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fea:	688b      	ldr	r3, [r1, #8]
 8000fec:	f013 0301 	ands.w	r3, r3, #1
 8000ff0:	d11a      	bne.n	8001028 <HAL_ADC_Start+0x5c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ff4:	f041 0110 	orr.w	r1, r1, #16
 8000ff8:	6411      	str	r1, [r2, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000ffc:	f041 0101 	orr.w	r1, r1, #1
 8001000:	6451      	str	r1, [r2, #68]	; 0x44
 8001002:	e04a      	b.n	800109a <HAL_ADC_Start+0xce>
    __HAL_ADC_ENABLE(hadc);
 8001004:	688b      	ldr	r3, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001006:	4828      	ldr	r0, [pc, #160]	; (80010a8 <HAL_ADC_Start+0xdc>)
    __HAL_ADC_ENABLE(hadc);
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	608b      	str	r3, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_ADC_Start+0xe0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	fbb3 f3f0 	udiv	r3, r3, r0
 8001016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 800101a:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 800101c:	9b01      	ldr	r3, [sp, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0e3      	beq.n	8000fea <HAL_ADC_Start+0x1e>
      counter--;
 8001022:	9b01      	ldr	r3, [sp, #4]
 8001024:	3b01      	subs	r3, #1
 8001026:	e7f8      	b.n	800101a <HAL_ADC_Start+0x4e>
    ADC_STATE_CLR_SET(hadc->State,
 8001028:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800102a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800102e:	f023 0301 	bic.w	r3, r3, #1
 8001032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001038:	684b      	ldr	r3, [r1, #4]
 800103a:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800103c:	bf41      	itttt	mi
 800103e:	6c13      	ldrmi	r3, [r2, #64]	; 0x40
 8001040:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001044:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001048:	6413      	strmi	r3, [r2, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800104a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800104c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001050:	bf1c      	itt	ne
 8001052:	6c53      	ldrne	r3, [r2, #68]	; 0x44
 8001054:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800105a:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800105c:	f06f 0322 	mvn.w	r3, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8001060:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001064:	600b      	str	r3, [r1, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_ADC_Start+0xe4>)
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	f012 021f 	ands.w	r2, r2, #31
 800106e:	d109      	bne.n	8001084 <HAL_ADC_Start+0xb8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001070:	6888      	ldr	r0, [r1, #8]
 8001072:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001076:	d114      	bne.n	80010a2 <HAL_ADC_Start+0xd6>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001078:	688b      	ldr	r3, [r1, #8]
 800107a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800107e:	608b      	str	r3, [r1, #8]
}
 8001080:	b002      	add	sp, #8
 8001082:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_ADC_Start+0xe8>)
 8001086:	4299      	cmp	r1, r3
 8001088:	d1fa      	bne.n	8001080 <HAL_ADC_Start+0xb4>
 800108a:	688b      	ldr	r3, [r1, #8]
 800108c:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8001090:	d1f6      	bne.n	8001080 <HAL_ADC_Start+0xb4>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001092:	688a      	ldr	r2, [r1, #8]
 8001094:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001098:	608a      	str	r2, [r1, #8]
  return HAL_OK;
 800109a:	4618      	mov	r0, r3
 800109c:	e7f0      	b.n	8001080 <HAL_ADC_Start+0xb4>
  __HAL_LOCK(hadc);
 800109e:	2002      	movs	r0, #2
 80010a0:	e7ee      	b.n	8001080 <HAL_ADC_Start+0xb4>
  return HAL_OK;
 80010a2:	4610      	mov	r0, r2
 80010a4:	e7ec      	b.n	8001080 <HAL_ADC_Start+0xb4>
 80010a6:	bf00      	nop
 80010a8:	000f4240 	.word	0x000f4240
 80010ac:	20000000 	.word	0x20000000
 80010b0:	40012300 	.word	0x40012300
 80010b4:	40012000 	.word	0x40012000

080010b8 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010b8:	6803      	ldr	r3, [r0, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	0552      	lsls	r2, r2, #21
{
 80010be:	b570      	push	{r4, r5, r6, lr}
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010c4:	d50b      	bpl.n	80010de <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010c6:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010c8:	05de      	lsls	r6, r3, #23
 80010ca:	d508      	bpl.n	80010de <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80010d4:	2300      	movs	r3, #0
 80010d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80010da:	2001      	movs	r0, #1
}
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80010de:	f7ff feb5 	bl	8000e4c <HAL_GetTick>
 80010e2:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	0791      	lsls	r1, r2, #30
 80010ea:	d50c      	bpl.n	8001106 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010ec:	f06f 0212 	mvn.w	r2, #18
 80010f0:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010f8:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001100:	d017      	beq.n	8001132 <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 8001102:	2000      	movs	r0, #0
 8001104:	e7ea      	b.n	80010dc <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8001106:	1c68      	adds	r0, r5, #1
 8001108:	d0ed      	beq.n	80010e6 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800110a:	b965      	cbnz	r5, 8001126 <HAL_ADC_PollForConversion+0x6e>
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f013 0302 	ands.w	r3, r3, #2
 8001114:	d1e6      	bne.n	80010e4 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001116:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8001118:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800111c:	f042 0204 	orr.w	r2, r2, #4
 8001120:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8001122:	2003      	movs	r0, #3
 8001124:	e7da      	b.n	80010dc <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001126:	f7ff fe91 	bl	8000e4c <HAL_GetTick>
 800112a:	1b80      	subs	r0, r0, r6
 800112c:	42a8      	cmp	r0, r5
 800112e:	d8ed      	bhi.n	800110c <HAL_ADC_PollForConversion+0x54>
 8001130:	e7d8      	b.n	80010e4 <HAL_ADC_PollForConversion+0x2c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001132:	7e20      	ldrb	r0, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001134:	2800      	cmp	r0, #0
 8001136:	d1e4      	bne.n	8001102 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800113a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800113e:	d002      	beq.n	8001146 <HAL_ADC_PollForConversion+0x8e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001140:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001142:	055a      	lsls	r2, r3, #21
 8001144:	d4dd      	bmi.n	8001102 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800114c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800114e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001150:	04db      	lsls	r3, r3, #19
 8001152:	d4d6      	bmi.n	8001102 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6423      	str	r3, [r4, #64]	; 0x40
 800115c:	e7be      	b.n	80010dc <HAL_ADC_PollForConversion+0x24>

0800115e <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800115e:	6803      	ldr	r3, [r0, #0]
 8001160:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001162:	4770      	bx	lr

08001164 <HAL_ADC_ConfigChannel>:
{
 8001164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800116a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800116e:	2b01      	cmp	r3, #1
 8001170:	d069      	beq.n	8001246 <HAL_ADC_ConfigChannel+0xe2>
 8001172:	2301      	movs	r3, #1
 8001174:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001178:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800117a:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800117c:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800117e:	2d09      	cmp	r5, #9
 8001180:	b2ac      	uxth	r4, r5
 8001182:	d934      	bls.n	80011ee <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001184:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001188:	68df      	ldr	r7, [r3, #12]
 800118a:	3a1e      	subs	r2, #30
 800118c:	f04f 0c07 	mov.w	ip, #7
 8001190:	fa0c fc02 	lsl.w	ip, ip, r2
 8001194:	ea27 070c 	bic.w	r7, r7, ip
 8001198:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800119a:	68df      	ldr	r7, [r3, #12]
 800119c:	fa06 f202 	lsl.w	r2, r6, r2
 80011a0:	433a      	orrs	r2, r7
 80011a2:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80011a4:	6849      	ldr	r1, [r1, #4]
 80011a6:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011a8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 80011ac:	d82f      	bhi.n	800120e <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b0:	3a05      	subs	r2, #5
 80011b2:	261f      	movs	r6, #31
 80011b4:	4096      	lsls	r6, r2
 80011b6:	ea21 0106 	bic.w	r1, r1, r6
 80011ba:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011be:	fa04 f202 	lsl.w	r2, r4, r2
 80011c2:	430a      	orrs	r2, r1
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011c6:	4a30      	ldr	r2, [pc, #192]	; (8001288 <HAL_ADC_ConfigChannel+0x124>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d10a      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x7e>
 80011cc:	2d12      	cmp	r5, #18
 80011ce:	d13c      	bne.n	800124a <HAL_ADC_ConfigChannel+0xe6>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011d0:	4b2e      	ldr	r3, [pc, #184]	; (800128c <HAL_ADC_ConfigChannel+0x128>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80011d8:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80011e0:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 80011e2:	2300      	movs	r3, #0
 80011e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011e8:	4618      	mov	r0, r3
}
 80011ea:	b003      	add	sp, #12
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011ee:	691f      	ldr	r7, [r3, #16]
 80011f0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80011f4:	f04f 0c07 	mov.w	ip, #7
 80011f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80011fc:	ea27 070c 	bic.w	r7, r7, ip
 8001200:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001202:	691f      	ldr	r7, [r3, #16]
 8001204:	fa06 f202 	lsl.w	r2, r6, r2
 8001208:	433a      	orrs	r2, r7
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	e7ca      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 800120e:	290c      	cmp	r1, #12
 8001210:	f04f 011f 	mov.w	r1, #31
 8001214:	d80b      	bhi.n	800122e <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001216:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8001218:	3a23      	subs	r2, #35	; 0x23
 800121a:	4091      	lsls	r1, r2
 800121c:	ea26 0101 	bic.w	r1, r6, r1
 8001220:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001224:	fa04 f202 	lsl.w	r2, r4, r2
 8001228:	430a      	orrs	r2, r1
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
 800122c:	e7cb      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800122e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001230:	3a41      	subs	r2, #65	; 0x41
 8001232:	4091      	lsls	r1, r2
 8001234:	ea26 0101 	bic.w	r1, r6, r1
 8001238:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800123a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800123c:	fa04 f202 	lsl.w	r2, r4, r2
 8001240:	430a      	orrs	r2, r1
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
 8001244:	e7bf      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001246:	2002      	movs	r0, #2
 8001248:	e7cf      	b.n	80011ea <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_ADC_ConfigChannel+0x12c>)
 800124c:	429d      	cmp	r5, r3
 800124e:	d001      	beq.n	8001254 <HAL_ADC_ConfigChannel+0xf0>
 8001250:	2d11      	cmp	r5, #17
 8001252:	d1c6      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_ADC_ConfigChannel+0x128>)
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800125c:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001264:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_ADC_ConfigChannel+0x12c>)
 8001268:	429d      	cmp	r5, r3
 800126a:	d1ba      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_ADC_ConfigChannel+0x130>)
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_ADC_ConfigChannel+0x134>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	fbb3 f3f2 	udiv	r3, r3, r2
 8001276:	220a      	movs	r2, #10
 8001278:	4353      	muls	r3, r2
        counter--;
 800127a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800127c:	9b01      	ldr	r3, [sp, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0af      	beq.n	80011e2 <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 8001282:	9b01      	ldr	r3, [sp, #4]
 8001284:	3b01      	subs	r3, #1
 8001286:	e7f8      	b.n	800127a <HAL_ADC_ConfigChannel+0x116>
 8001288:	40012000 	.word	0x40012000
 800128c:	40012300 	.word	0x40012300
 8001290:	10000012 	.word	0x10000012
 8001294:	20000000 	.word	0x20000000
 8001298:	000f4240 	.word	0x000f4240

0800129c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800129e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80012b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b530      	push	{r4, r5, lr}
 80012c4:	68dc      	ldr	r4, [r3, #12]
 80012c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ca:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	2d04      	cmp	r5, #4
 80012d2:	bf28      	it	cs
 80012d4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012dc:	bf8c      	ite	hi
 80012de:	3c03      	subhi	r4, #3
 80012e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e2:	fa03 f505 	lsl.w	r5, r3, r5
 80012e6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ea:	40a3      	lsls	r3, r4
 80012ec:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80012f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	bfac      	ite	ge
 80012fa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	4a08      	ldrlt	r2, [pc, #32]	; (8001320 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	bfb8      	it	lt
 8001306:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	b2db      	uxtb	r3, r3
 800130c:	bfaa      	itet	ge
 800130e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001318:	bd30      	pop	{r4, r5, pc}
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	e000ed14 	.word	0xe000ed14

08001324 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	3801      	subs	r0, #1
 8001326:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800132a:	d20b      	bcs.n	8001344 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	21f0      	movs	r1, #240	; 0xf0
 8001336:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001340:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001342:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001344:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001350:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80014d8 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001354:	4a5e      	ldr	r2, [pc, #376]	; (80014d0 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001358:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800135a:	2401      	movs	r4, #1
 800135c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001362:	43ac      	bics	r4, r5
 8001364:	f040 80a5 	bne.w	80014b2 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001368:	684d      	ldr	r5, [r1, #4]
 800136a:	f005 0403 	and.w	r4, r5, #3
 800136e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001372:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001374:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001376:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001380:	d834      	bhi.n	80013ec <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001382:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001384:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001388:	68cf      	ldr	r7, [r1, #12]
 800138a:	fa07 f708 	lsl.w	r7, r7, r8
 800138e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001392:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001394:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001396:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800139e:	409f      	lsls	r7, r3
 80013a0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80013a4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80013a6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	688f      	ldr	r7, [r1, #8]
 80013ae:	fa07 f708 	lsl.w	r7, r7, r8
 80013b2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80013b8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ba:	d119      	bne.n	80013f0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80013bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80013c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80013d0:	f04f 0e0f 	mov.w	lr, #15
 80013d4:	fa0e fe0b 	lsl.w	lr, lr, fp
 80013d8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013dc:	690f      	ldr	r7, [r1, #16]
 80013de:	fa07 f70b 	lsl.w	r7, r7, fp
 80013e2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80013e6:	f8ca 7020 	str.w	r7, [sl, #32]
 80013ea:	e001      	b.n	80013f0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ec:	2c03      	cmp	r4, #3
 80013ee:	d1da      	bne.n	80013a6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80013f0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f2:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f8:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fa:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80013fe:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001400:	d057      	beq.n	80014b2 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	f04f 0a00 	mov.w	sl, #0
 8001406:	f8cd a004 	str.w	sl, [sp, #4]
 800140a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	4c31      	ldr	r4, [pc, #196]	; (80014d4 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001410:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001414:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001418:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800141c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001420:	9601      	str	r6, [sp, #4]
 8001422:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001424:	f023 0603 	bic.w	r6, r3, #3
 8001428:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800142c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001430:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001434:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001438:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800143c:	270f      	movs	r7, #15
 800143e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001442:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001444:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001448:	d03a      	beq.n	80014c0 <HAL_GPIO_Init+0x174>
 800144a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800144e:	42a0      	cmp	r0, r4
 8001450:	d038      	beq.n	80014c4 <HAL_GPIO_Init+0x178>
 8001452:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001456:	42a0      	cmp	r0, r4
 8001458:	d036      	beq.n	80014c8 <HAL_GPIO_Init+0x17c>
 800145a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800145e:	42a0      	cmp	r0, r4
 8001460:	d034      	beq.n	80014cc <HAL_GPIO_Init+0x180>
 8001462:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001466:	42a0      	cmp	r0, r4
 8001468:	bf0c      	ite	eq
 800146a:	2404      	moveq	r4, #4
 800146c:	2407      	movne	r4, #7
 800146e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001472:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8001476:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001478:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147c:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800147e:	bf54      	ite	pl
 8001480:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001482:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001486:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148a:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800148c:	bf54      	ite	pl
 800148e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001490:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001494:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001496:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001498:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800149a:	bf54      	ite	pl
 800149c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800149e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80014a2:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a6:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80014a8:	bf54      	ite	pl
 80014aa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80014ac:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80014b0:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	3301      	adds	r3, #1
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	f47f af4f 	bne.w	8001358 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80014ba:	b003      	add	sp, #12
 80014bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c0:	4654      	mov	r4, sl
 80014c2:	e7d4      	b.n	800146e <HAL_GPIO_Init+0x122>
 80014c4:	2401      	movs	r4, #1
 80014c6:	e7d2      	b.n	800146e <HAL_GPIO_Init+0x122>
 80014c8:	2402      	movs	r4, #2
 80014ca:	e7d0      	b.n	800146e <HAL_GPIO_Init+0x122>
 80014cc:	2403      	movs	r4, #3
 80014ce:	e7ce      	b.n	800146e <HAL_GPIO_Init+0x122>
 80014d0:	40013c00 	.word	0x40013c00
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	b10a      	cbz	r2, 80014e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014de:	6181      	str	r1, [r0, #24]
  }
}
 80014e0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e2:	0409      	lsls	r1, r1, #16
 80014e4:	e7fb      	b.n	80014de <HAL_GPIO_WritePin+0x2>
	...

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ec:	4604      	mov	r4, r0
 80014ee:	b340      	cbz	r0, 8001542 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f0:	6803      	ldr	r3, [r0, #0]
 80014f2:	07dd      	lsls	r5, r3, #31
 80014f4:	d410      	bmi.n	8001518 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	0798      	lsls	r0, r3, #30
 80014fa:	d45e      	bmi.n	80015ba <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	071a      	lsls	r2, r3, #28
 8001500:	f100 80a0 	bmi.w	8001644 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	075b      	lsls	r3, r3, #29
 8001508:	f100 80c0 	bmi.w	800168c <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150c:	69a0      	ldr	r0, [r4, #24]
 800150e:	2800      	cmp	r0, #0
 8001510:	f040 8128 	bne.w	8001764 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001514:	2000      	movs	r0, #0
 8001516:	e02b      	b.n	8001570 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001518:	4b8f      	ldr	r3, [pc, #572]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	f002 020c 	and.w	r2, r2, #12
 8001520:	2a04      	cmp	r2, #4
 8001522:	d007      	beq.n	8001534 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800152a:	2a08      	cmp	r2, #8
 800152c:	d10b      	bne.n	8001546 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	0251      	lsls	r1, r2, #9
 8001532:	d508      	bpl.n	8001546 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	039a      	lsls	r2, r3, #14
 800153a:	d5dc      	bpl.n	80014f6 <HAL_RCC_OscConfig+0xe>
 800153c:	6863      	ldr	r3, [r4, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1d9      	bne.n	80014f6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001542:	2001      	movs	r0, #1
 8001544:	e014      	b.n	8001570 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	6862      	ldr	r2, [r4, #4]
 8001548:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800154c:	d113      	bne.n	8001576 <HAL_RCC_OscConfig+0x8e>
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001554:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001556:	f7ff fc79 	bl	8000e4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4e7f      	ldr	r6, [pc, #508]	; (8001758 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800155c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	6833      	ldr	r3, [r6, #0]
 8001560:	039b      	lsls	r3, r3, #14
 8001562:	d4c8      	bmi.n	80014f6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fc72 	bl	8000e4c <HAL_GetTick>
 8001568:	1b40      	subs	r0, r0, r5
 800156a:	2864      	cmp	r0, #100	; 0x64
 800156c:	d9f7      	bls.n	800155e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800156e:	2003      	movs	r0, #3
}
 8001570:	b002      	add	sp, #8
 8001572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001576:	4d78      	ldr	r5, [pc, #480]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001578:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800157c:	682b      	ldr	r3, [r5, #0]
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0xa8>
 8001580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001584:	602b      	str	r3, [r5, #0]
 8001586:	682b      	ldr	r3, [r5, #0]
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800158e:	e7e2      	b.n	8001556 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001594:	602b      	str	r3, [r5, #0]
 8001596:	682b      	ldr	r3, [r5, #0]
 8001598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800159e:	2a00      	cmp	r2, #0
 80015a0:	d1d9      	bne.n	8001556 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80015a2:	f7ff fc53 	bl	8000e4c <HAL_GetTick>
 80015a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	039f      	lsls	r7, r3, #14
 80015ac:	d5a3      	bpl.n	80014f6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ae:	f7ff fc4d 	bl	8000e4c <HAL_GetTick>
 80015b2:	1b80      	subs	r0, r0, r6
 80015b4:	2864      	cmp	r0, #100	; 0x64
 80015b6:	d9f7      	bls.n	80015a8 <HAL_RCC_OscConfig+0xc0>
 80015b8:	e7d9      	b.n	800156e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ba:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	f012 0f0c 	tst.w	r2, #12
 80015c2:	d007      	beq.n	80015d4 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	2a08      	cmp	r2, #8
 80015cc:	d111      	bne.n	80015f2 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	025e      	lsls	r6, r3, #9
 80015d2:	d40e      	bmi.n	80015f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d4:	4a60      	ldr	r2, [pc, #384]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	079d      	lsls	r5, r3, #30
 80015da:	d502      	bpl.n	80015e2 <HAL_RCC_OscConfig+0xfa>
 80015dc:	68e3      	ldr	r3, [r4, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d1af      	bne.n	8001542 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	6921      	ldr	r1, [r4, #16]
 80015e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015ee:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f0:	e784      	b.n	80014fc <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f2:	68e2      	ldr	r2, [r4, #12]
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015f6:	b1b2      	cbz	r2, 8001626 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc26 	bl	8000e4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4d55      	ldr	r5, [pc, #340]	; (8001758 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001602:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	0798      	lsls	r0, r3, #30
 8001608:	d507      	bpl.n	800161a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	682b      	ldr	r3, [r5, #0]
 800160c:	6922      	ldr	r2, [r4, #16]
 800160e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001612:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001616:	602b      	str	r3, [r5, #0]
 8001618:	e770      	b.n	80014fc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fc17 	bl	8000e4c <HAL_GetTick>
 800161e:	1b80      	subs	r0, r0, r6
 8001620:	2802      	cmp	r0, #2
 8001622:	d9ef      	bls.n	8001604 <HAL_RCC_OscConfig+0x11c>
 8001624:	e7a3      	b.n	800156e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8001626:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001628:	f7ff fc10 	bl	8000e4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162c:	4e4a      	ldr	r6, [pc, #296]	; (8001758 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800162e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001630:	6833      	ldr	r3, [r6, #0]
 8001632:	0799      	lsls	r1, r3, #30
 8001634:	f57f af62 	bpl.w	80014fc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fc08 	bl	8000e4c <HAL_GetTick>
 800163c:	1b40      	subs	r0, r0, r5
 800163e:	2802      	cmp	r0, #2
 8001640:	d9f6      	bls.n	8001630 <HAL_RCC_OscConfig+0x148>
 8001642:	e794      	b.n	800156e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001644:	6962      	ldr	r2, [r4, #20]
 8001646:	4b45      	ldr	r3, [pc, #276]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001648:	b182      	cbz	r2, 800166c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800164a:	2201      	movs	r2, #1
 800164c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001650:	f7ff fbfc 	bl	8000e4c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001654:	4e40      	ldr	r6, [pc, #256]	; (8001758 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001656:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001658:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800165a:	079f      	lsls	r7, r3, #30
 800165c:	f53f af52 	bmi.w	8001504 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fbf4 	bl	8000e4c <HAL_GetTick>
 8001664:	1b40      	subs	r0, r0, r5
 8001666:	2802      	cmp	r0, #2
 8001668:	d9f6      	bls.n	8001658 <HAL_RCC_OscConfig+0x170>
 800166a:	e780      	b.n	800156e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800166c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001670:	f7ff fbec 	bl	8000e4c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4e38      	ldr	r6, [pc, #224]	; (8001758 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001676:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800167a:	0798      	lsls	r0, r3, #30
 800167c:	f57f af42 	bpl.w	8001504 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fbe4 	bl	8000e4c <HAL_GetTick>
 8001684:	1b40      	subs	r0, r0, r5
 8001686:	2802      	cmp	r0, #2
 8001688:	d9f6      	bls.n	8001678 <HAL_RCC_OscConfig+0x190>
 800168a:	e770      	b.n	800156e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800168e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001690:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001694:	d128      	bne.n	80016e8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	9201      	str	r2, [sp, #4]
 8001698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800169e:	641a      	str	r2, [r3, #64]	; 0x40
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016aa:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	4d2c      	ldr	r5, [pc, #176]	; (8001760 <HAL_RCC_OscConfig+0x278>)
 80016ae:	682b      	ldr	r3, [r5, #0]
 80016b0:	05d9      	lsls	r1, r3, #23
 80016b2:	d51b      	bpl.n	80016ec <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	68a3      	ldr	r3, [r4, #8]
 80016b6:	4d28      	ldr	r5, [pc, #160]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d127      	bne.n	800170c <HAL_RCC_OscConfig+0x224>
 80016bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80016c4:	f7ff fbc2 	bl	8000e4c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4e23      	ldr	r6, [pc, #140]	; (8001758 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80016ca:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80016d2:	079b      	lsls	r3, r3, #30
 80016d4:	d539      	bpl.n	800174a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80016d6:	2f00      	cmp	r7, #0
 80016d8:	f43f af18 	beq.w	800150c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80016de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	e711      	b.n	800150c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80016e8:	2700      	movs	r7, #0
 80016ea:	e7df      	b.n	80016ac <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016f4:	f7ff fbaa 	bl	8000e4c <HAL_GetTick>
 80016f8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	682b      	ldr	r3, [r5, #0]
 80016fc:	05da      	lsls	r2, r3, #23
 80016fe:	d4d9      	bmi.n	80016b4 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001700:	f7ff fba4 	bl	8000e4c <HAL_GetTick>
 8001704:	1b80      	subs	r0, r0, r6
 8001706:	2802      	cmp	r0, #2
 8001708:	d9f7      	bls.n	80016fa <HAL_RCC_OscConfig+0x212>
 800170a:	e730      	b.n	800156e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170c:	2b05      	cmp	r3, #5
 800170e:	d104      	bne.n	800171a <HAL_RCC_OscConfig+0x232>
 8001710:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	672b      	str	r3, [r5, #112]	; 0x70
 8001718:	e7d0      	b.n	80016bc <HAL_RCC_OscConfig+0x1d4>
 800171a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800171c:	f022 0201 	bic.w	r2, r2, #1
 8001720:	672a      	str	r2, [r5, #112]	; 0x70
 8001722:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001724:	f022 0204 	bic.w	r2, r2, #4
 8001728:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ca      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 800172e:	f7ff fb8d 	bl	8000e4c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001736:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800173a:	0798      	lsls	r0, r3, #30
 800173c:	d5cb      	bpl.n	80016d6 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff fb85 	bl	8000e4c <HAL_GetTick>
 8001742:	1b80      	subs	r0, r0, r6
 8001744:	4540      	cmp	r0, r8
 8001746:	d9f7      	bls.n	8001738 <HAL_RCC_OscConfig+0x250>
 8001748:	e711      	b.n	800156e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fb7f 	bl	8000e4c <HAL_GetTick>
 800174e:	1b40      	subs	r0, r0, r5
 8001750:	4540      	cmp	r0, r8
 8001752:	d9bd      	bls.n	80016d0 <HAL_RCC_OscConfig+0x1e8>
 8001754:	e70b      	b.n	800156e <HAL_RCC_OscConfig+0x86>
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	42470000 	.word	0x42470000
 8001760:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001764:	4d36      	ldr	r5, [pc, #216]	; (8001840 <HAL_RCC_OscConfig+0x358>)
 8001766:	68ab      	ldr	r3, [r5, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d03d      	beq.n	80017ec <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCC_OscConfig+0x35c>)
 8001772:	2200      	movs	r2, #0
 8001774:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001776:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001778:	d12b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800177a:	f7ff fb67 	bl	8000e4c <HAL_GetTick>
 800177e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001780:	682b      	ldr	r3, [r5, #0]
 8001782:	0199      	lsls	r1, r3, #6
 8001784:	d41f      	bmi.n	80017c6 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001786:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800178a:	4313      	orrs	r3, r2
 800178c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800178e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001792:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001794:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001798:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800179a:	0852      	lsrs	r2, r2, #1
 800179c:	3a01      	subs	r2, #1
 800179e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4d26      	ldr	r5, [pc, #152]	; (8001840 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 80017a8:	2201      	movs	r2, #1
 80017aa:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb4e 	bl	8000e4c <HAL_GetTick>
 80017b0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	682b      	ldr	r3, [r5, #0]
 80017b4:	019a      	lsls	r2, r3, #6
 80017b6:	f53f aead 	bmi.w	8001514 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fb47 	bl	8000e4c <HAL_GetTick>
 80017be:	1b00      	subs	r0, r0, r4
 80017c0:	2802      	cmp	r0, #2
 80017c2:	d9f6      	bls.n	80017b2 <HAL_RCC_OscConfig+0x2ca>
 80017c4:	e6d3      	b.n	800156e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fb41 	bl	8000e4c <HAL_GetTick>
 80017ca:	1b80      	subs	r0, r0, r6
 80017cc:	2802      	cmp	r0, #2
 80017ce:	d9d7      	bls.n	8001780 <HAL_RCC_OscConfig+0x298>
 80017d0:	e6cd      	b.n	800156e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80017d2:	f7ff fb3b 	bl	8000e4c <HAL_GetTick>
 80017d6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d8:	682b      	ldr	r3, [r5, #0]
 80017da:	019b      	lsls	r3, r3, #6
 80017dc:	f57f ae9a 	bpl.w	8001514 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fb34 	bl	8000e4c <HAL_GetTick>
 80017e4:	1b00      	subs	r0, r0, r4
 80017e6:	2802      	cmp	r0, #2
 80017e8:	d9f6      	bls.n	80017d8 <HAL_RCC_OscConfig+0x2f0>
 80017ea:	e6c0      	b.n	800156e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ec:	2801      	cmp	r0, #1
 80017ee:	f43f aebf 	beq.w	8001570 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80017f2:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f4:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fa:	4291      	cmp	r1, r2
 80017fc:	f47f aea1 	bne.w	8001542 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001800:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	428a      	cmp	r2, r1
 8001808:	f47f ae9b 	bne.w	8001542 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800180c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001812:	401a      	ands	r2, r3
 8001814:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001818:	f47f ae93 	bne.w	8001542 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800181c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800181e:	0852      	lsrs	r2, r2, #1
 8001820:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001824:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001826:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800182a:	f47f ae8a 	bne.w	8001542 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800182e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001830:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001834:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001838:	f43f ae6c 	beq.w	8001514 <HAL_RCC_OscConfig+0x2c>
 800183c:	e681      	b.n	8001542 <HAL_RCC_OscConfig+0x5a>
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	42470000 	.word	0x42470000

08001848 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001848:	4913      	ldr	r1, [pc, #76]	; (8001898 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800184a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800184c:	688b      	ldr	r3, [r1, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b04      	cmp	r3, #4
 8001854:	d01c      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x48>
 8001856:	2b08      	cmp	r3, #8
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800185a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001860:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001864:	bf14      	ite	ne
 8001866:	480d      	ldrne	r0, [pc, #52]	; (800189c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001868:	480d      	ldreq	r0, [pc, #52]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800186e:	bf18      	it	ne
 8001870:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001872:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001876:	fba1 0100 	umull	r0, r1, r1, r0
 800187a:	f7fe fd01 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_GetSysClockFreq+0x50>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001886:	3301      	adds	r3, #1
 8001888:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800188a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800188e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <HAL_RCC_GetSysClockFreq+0x54>)
 8001892:	e7fc      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001896:	e7fa      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x46>
 8001898:	40023800 	.word	0x40023800
 800189c:	017d7840 	.word	0x017d7840
 80018a0:	00f42400 	.word	0x00f42400

080018a4 <HAL_RCC_ClockConfig>:
{
 80018a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80018aa:	4604      	mov	r4, r0
 80018ac:	b910      	cbnz	r0, 80018b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80018ae:	2001      	movs	r0, #1
}
 80018b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_RCC_ClockConfig+0x124>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	f002 0207 	and.w	r2, r2, #7
 80018bc:	428a      	cmp	r2, r1
 80018be:	d328      	bcc.n	8001912 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	0797      	lsls	r7, r2, #30
 80018c4:	d42d      	bmi.n	8001922 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c6:	07d0      	lsls	r0, r2, #31
 80018c8:	d441      	bmi.n	800194e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_ClockConfig+0x124>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f002 0207 	and.w	r2, r2, #7
 80018d2:	42aa      	cmp	r2, r5
 80018d4:	d866      	bhi.n	80019a4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d6:	6822      	ldr	r2, [r4, #0]
 80018d8:	0751      	lsls	r1, r2, #29
 80018da:	d46c      	bmi.n	80019b6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018dc:	0713      	lsls	r3, r2, #28
 80018de:	d507      	bpl.n	80018f0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e0:	4a3a      	ldr	r2, [pc, #232]	; (80019cc <HAL_RCC_ClockConfig+0x128>)
 80018e2:	6921      	ldr	r1, [r4, #16]
 80018e4:	6893      	ldr	r3, [r2, #8]
 80018e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80018ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f0:	f7ff ffaa 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 80018f4:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HAL_RCC_ClockConfig+0x128>)
 80018f6:	4a36      	ldr	r2, [pc, #216]	; (80019d0 <HAL_RCC_ClockConfig+0x12c>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	40d8      	lsrs	r0, r3
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_RCC_ClockConfig+0x130>)
 8001904:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001906:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_RCC_ClockConfig+0x134>)
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	f7ff fa55 	bl	8000db8 <HAL_InitTick>
  return HAL_OK;
 800190e:	2000      	movs	r0, #0
 8001910:	e7ce      	b.n	80018b0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	b2ca      	uxtb	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	428b      	cmp	r3, r1
 800191e:	d1c6      	bne.n	80018ae <HAL_RCC_ClockConfig+0xa>
 8001920:	e7ce      	b.n	80018c0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001922:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HAL_RCC_ClockConfig+0x128>)
 8001924:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	bf1e      	ittt	ne
 800192a:	6899      	ldrne	r1, [r3, #8]
 800192c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001930:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001932:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001934:	bf42      	ittt	mi
 8001936:	6899      	ldrmi	r1, [r3, #8]
 8001938:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800193c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193e:	4923      	ldr	r1, [pc, #140]	; (80019cc <HAL_RCC_ClockConfig+0x128>)
 8001940:	68a0      	ldr	r0, [r4, #8]
 8001942:	688b      	ldr	r3, [r1, #8]
 8001944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001948:	4303      	orrs	r3, r0
 800194a:	608b      	str	r3, [r1, #8]
 800194c:	e7bb      	b.n	80018c6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194e:	6862      	ldr	r2, [r4, #4]
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_RCC_ClockConfig+0x128>)
 8001952:	2a01      	cmp	r2, #1
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	d0a7      	beq.n	80018ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195e:	4e1b      	ldr	r6, [pc, #108]	; (80019cc <HAL_RCC_ClockConfig+0x128>)
 8001960:	68b3      	ldr	r3, [r6, #8]
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	4313      	orrs	r3, r2
 8001968:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800196a:	f7ff fa6f 	bl	8000e4c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001972:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001974:	68b3      	ldr	r3, [r6, #8]
 8001976:	6862      	ldr	r2, [r4, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001980:	d0a3      	beq.n	80018ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001982:	f7ff fa63 	bl	8000e4c <HAL_GetTick>
 8001986:	1bc0      	subs	r0, r0, r7
 8001988:	4540      	cmp	r0, r8
 800198a:	d9f3      	bls.n	8001974 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800198c:	2003      	movs	r0, #3
 800198e:	e78f      	b.n	80018b0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001990:	1e91      	subs	r1, r2, #2
 8001992:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001994:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	d802      	bhi.n	800199e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001998:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800199c:	e7de      	b.n	800195c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	f013 0f02 	tst.w	r3, #2
 80019a2:	e7db      	b.n	800195c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a4:	b2ea      	uxtb	r2, r5
 80019a6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	42ab      	cmp	r3, r5
 80019b0:	f47f af7d 	bne.w	80018ae <HAL_RCC_ClockConfig+0xa>
 80019b4:	e78f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b6:	4905      	ldr	r1, [pc, #20]	; (80019cc <HAL_RCC_ClockConfig+0x128>)
 80019b8:	68e0      	ldr	r0, [r4, #12]
 80019ba:	688b      	ldr	r3, [r1, #8]
 80019bc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80019c0:	4303      	orrs	r3, r0
 80019c2:	608b      	str	r3, [r1, #8]
 80019c4:	e78a      	b.n	80018dc <HAL_RCC_ClockConfig+0x38>
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08002a9c 	.word	0x08002a9c
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008

080019dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80019dc:	4b01      	ldr	r3, [pc, #4]	; (80019e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000000 	.word	0x20000000

080019e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019f6:	6810      	ldr	r0, [r2, #0]
}
 80019f8:	40d8      	lsrs	r0, r3
 80019fa:	4770      	bx	lr
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08002aac 	.word	0x08002aac
 8001a04:	20000000 	.word	0x20000000

08001a08 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a16:	6810      	ldr	r0, [r2, #0]
}
 8001a18:	40d8      	lsrs	r0, r3
 8001a1a:	4770      	bx	lr
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	08002aac 	.word	0x08002aac
 8001a24:	20000000 	.word	0x20000000

08001a28 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a28:	6a03      	ldr	r3, [r0, #32]
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a30:	6a03      	ldr	r3, [r0, #32]
{
 8001a32:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a36:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a3a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a3e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a40:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a42:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a46:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a48:	4d0a      	ldr	r5, [pc, #40]	; (8001a74 <TIM_OC1_SetConfig+0x4c>)
 8001a4a:	42a8      	cmp	r0, r5
 8001a4c:	d10b      	bne.n	8001a66 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a4e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a50:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001a54:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a56:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a5a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a5e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a60:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a64:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a66:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a68:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a6a:	684a      	ldr	r2, [r1, #4]
 8001a6c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a6e:	6203      	str	r3, [r0, #32]
}
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
 8001a72:	bf00      	nop
 8001a74:	40010000 	.word	0x40010000

08001a78 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a78:	6a03      	ldr	r3, [r0, #32]
 8001a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a7e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a80:	6a03      	ldr	r3, [r0, #32]
{
 8001a82:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a84:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a86:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a8a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a8e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001a92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a9a:	4d0b      	ldr	r5, [pc, #44]	; (8001ac8 <TIM_OC3_SetConfig+0x50>)
 8001a9c:	42a8      	cmp	r0, r5
 8001a9e:	d10d      	bne.n	8001abc <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001aa0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001aa6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001aaa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001aae:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ab2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ab8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001abc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001abe:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ac0:	684a      	ldr	r2, [r1, #4]
 8001ac2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ac4:	6203      	str	r3, [r0, #32]
}
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
 8001ac8:	40010000 	.word	0x40010000

08001acc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001acc:	6a03      	ldr	r3, [r0, #32]
 8001ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ad2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ad4:	6a03      	ldr	r3, [r0, #32]
{
 8001ad6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ad8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ada:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001adc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ade:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ae2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ae6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001aec:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001af0:	4d06      	ldr	r5, [pc, #24]	; (8001b0c <TIM_OC4_SetConfig+0x40>)
 8001af2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001af4:	bf02      	ittt	eq
 8001af6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001af8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001afc:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b00:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b02:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b04:	684a      	ldr	r2, [r1, #4]
 8001b06:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b08:	6203      	str	r3, [r0, #32]
}
 8001b0a:	bd30      	pop	{r4, r5, pc}
 8001b0c:	40010000 	.word	0x40010000

08001b10 <HAL_TIM_PWM_MspInit>:
 8001b10:	4770      	bx	lr
	...

08001b14 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b14:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001b16:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b18:	4290      	cmp	r0, r2
 8001b1a:	d00e      	beq.n	8001b3a <TIM_Base_SetConfig+0x26>
 8001b1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b20:	d00b      	beq.n	8001b3a <TIM_Base_SetConfig+0x26>
 8001b22:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b26:	4290      	cmp	r0, r2
 8001b28:	d007      	beq.n	8001b3a <TIM_Base_SetConfig+0x26>
 8001b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b2e:	4290      	cmp	r0, r2
 8001b30:	d003      	beq.n	8001b3a <TIM_Base_SetConfig+0x26>
 8001b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b36:	4290      	cmp	r0, r2
 8001b38:	d115      	bne.n	8001b66 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001b3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b40:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b42:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <TIM_Base_SetConfig+0x94>)
 8001b44:	4290      	cmp	r0, r2
 8001b46:	d019      	beq.n	8001b7c <TIM_Base_SetConfig+0x68>
 8001b48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b4c:	d016      	beq.n	8001b7c <TIM_Base_SetConfig+0x68>
 8001b4e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b52:	4290      	cmp	r0, r2
 8001b54:	d012      	beq.n	8001b7c <TIM_Base_SetConfig+0x68>
 8001b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b5a:	4290      	cmp	r0, r2
 8001b5c:	d00e      	beq.n	8001b7c <TIM_Base_SetConfig+0x68>
 8001b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b62:	4290      	cmp	r0, r2
 8001b64:	d00a      	beq.n	8001b7c <TIM_Base_SetConfig+0x68>
 8001b66:	4a11      	ldr	r2, [pc, #68]	; (8001bac <TIM_Base_SetConfig+0x98>)
 8001b68:	4290      	cmp	r0, r2
 8001b6a:	d007      	beq.n	8001b7c <TIM_Base_SetConfig+0x68>
 8001b6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b70:	4290      	cmp	r0, r2
 8001b72:	d003      	beq.n	8001b7c <TIM_Base_SetConfig+0x68>
 8001b74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b78:	4290      	cmp	r0, r2
 8001b7a:	d103      	bne.n	8001b84 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b7c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b82:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b84:	694a      	ldr	r2, [r1, #20]
 8001b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b8a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001b8c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b8e:	688b      	ldr	r3, [r1, #8]
 8001b90:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001b92:	680b      	ldr	r3, [r1, #0]
 8001b94:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <TIM_Base_SetConfig+0x94>)
 8001b98:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001b9a:	bf04      	itt	eq
 8001b9c:	690b      	ldreq	r3, [r1, #16]
 8001b9e:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	6143      	str	r3, [r0, #20]
}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40014000 	.word	0x40014000

08001bb0 <HAL_TIM_Base_Init>:
{
 8001bb0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	b330      	cbz	r0, 8001c04 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bbe:	b91b      	cbnz	r3, 8001bc8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001bc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001bc4:	f7ff f812 	bl	8000bec <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bca:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd0:	1d21      	adds	r1, r4, #4
 8001bd2:	f7ff ff9f 	bl	8001b14 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8001bdc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001be2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001be6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001bea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bf6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001bfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001bfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001c02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c04:	2001      	movs	r0, #1
 8001c06:	e7fc      	b.n	8001c02 <HAL_TIM_Base_Init+0x52>

08001c08 <HAL_TIM_PWM_Init>:
{
 8001c08:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	b330      	cbz	r0, 8001c5c <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c16:	b91b      	cbnz	r3, 8001c20 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001c1c:	f7ff ff78 	bl	8001b10 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c22:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c28:	1d21      	adds	r1, r4, #4
 8001c2a:	f7ff ff73 	bl	8001b14 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8001c34:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001c3a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001c3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001c42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001c56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001c5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	e7fc      	b.n	8001c5a <HAL_TIM_PWM_Init+0x52>

08001c60 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c60:	6a03      	ldr	r3, [r0, #32]
 8001c62:	f023 0310 	bic.w	r3, r3, #16
 8001c66:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c68:	6a03      	ldr	r3, [r0, #32]
{
 8001c6a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001c6c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001c6e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c72:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c7a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001c7c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c84:	4d0b      	ldr	r5, [pc, #44]	; (8001cb4 <TIM_OC2_SetConfig+0x54>)
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	d10d      	bne.n	8001ca6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c8a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c90:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c94:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c98:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c9c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ca2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001ca6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ca8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001caa:	684a      	ldr	r2, [r1, #4]
 8001cac:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001cae:	6203      	str	r3, [r0, #32]
}
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40010000 	.word	0x40010000

08001cb8 <HAL_TIM_PWM_ConfigChannel>:
{
 8001cb8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001cba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cbe:	2b01      	cmp	r3, #1
{
 8001cc0:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8001cc2:	d053      	beq.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0xb4>
 8001cc4:	2001      	movs	r0, #1
  switch (Channel)
 8001cc6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001cc8:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8001ccc:	d03d      	beq.n	8001d4a <HAL_TIM_PWM_ConfigChannel+0x92>
 8001cce:	d806      	bhi.n	8001cde <HAL_TIM_PWM_ConfigChannel+0x26>
 8001cd0:	b1c2      	cbz	r2, 8001d04 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8001cd2:	2a04      	cmp	r2, #4
 8001cd4:	d028      	beq.n	8001d28 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_UNLOCK(htim);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8001cde:	2a0c      	cmp	r2, #12
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ce2:	6828      	ldr	r0, [r5, #0]
 8001ce4:	f7ff fef2 	bl	8001acc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ce8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cec:	69da      	ldr	r2, [r3, #28]
 8001cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cf2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d02:	e031      	b.n	8001d68 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d04:	6828      	ldr	r0, [r5, #0]
 8001d06:	f7ff fe8f 	bl	8001a28 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d0a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d0c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	f042 0208 	orr.w	r2, r2, #8
 8001d14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	f022 0204 	bic.w	r2, r2, #4
 8001d1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d22:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001d24:	2000      	movs	r0, #0
      break;
 8001d26:	e7d6      	b.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d28:	6828      	ldr	r0, [r5, #0]
 8001d2a:	f7ff ff99 	bl	8001c60 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d2e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d30:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d32:	699a      	ldr	r2, [r3, #24]
 8001d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d40:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d48:	e7eb      	b.n	8001d22 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d4a:	6828      	ldr	r0, [r5, #0]
 8001d4c:	f7ff fe94 	bl	8001a78 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d50:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d52:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d5c:	69da      	ldr	r2, [r3, #28]
 8001d5e:	f022 0204 	bic.w	r2, r2, #4
 8001d62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d68:	61da      	str	r2, [r3, #28]
 8001d6a:	e7db      	b.n	8001d24 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_LOCK(htim);
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	e7b5      	b.n	8001cdc <HAL_TIM_PWM_ConfigChannel+0x24>

08001d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d70:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d72:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d74:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d76:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d7a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001d7e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d80:	6083      	str	r3, [r0, #8]
}
 8001d82:	bd10      	pop	{r4, pc}

08001d84 <HAL_TIM_ConfigClockSource>:
{
 8001d84:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001d86:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d8a:	2b01      	cmp	r3, #1
{
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001d92:	f000 8091 	beq.w	8001eb8 <HAL_TIM_ConfigClockSource+0x134>
 8001d96:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001d9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001da0:	6800      	ldr	r0, [r0, #0]
 8001da2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001dac:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001dae:	680b      	ldr	r3, [r1, #0]
 8001db0:	2b60      	cmp	r3, #96	; 0x60
 8001db2:	d052      	beq.n	8001e5a <HAL_TIM_ConfigClockSource+0xd6>
 8001db4:	d833      	bhi.n	8001e1e <HAL_TIM_ConfigClockSource+0x9a>
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	d067      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0x106>
 8001dba:	d816      	bhi.n	8001dea <HAL_TIM_ConfigClockSource+0x66>
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d00d      	beq.n	8001ddc <HAL_TIM_ConfigClockSource+0x58>
 8001dc0:	d80a      	bhi.n	8001dd8 <HAL_TIM_ConfigClockSource+0x54>
 8001dc2:	f033 0110 	bics.w	r1, r3, #16
 8001dc6:	d009      	beq.n	8001ddc <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001dd8:	2b30      	cmp	r3, #48	; 0x30
 8001dda:	d1f5      	bne.n	8001dc8 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8001ddc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f043 0307 	orr.w	r3, r3, #7
 8001de8:	e017      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8001dea:	2b50      	cmp	r3, #80	; 0x50
 8001dec:	d1ec      	bne.n	8001dc8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dee:	684a      	ldr	r2, [r1, #4]
 8001df0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001df2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df4:	6a05      	ldr	r5, [r0, #32]
 8001df6:	f025 0501 	bic.w	r5, r5, #1
 8001dfa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dfc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dfe:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e06:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e0a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e0c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e0e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e10:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e16:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001e1a:	6083      	str	r3, [r0, #8]
 8001e1c:	e011      	b.n	8001e42 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8001e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e22:	d00e      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0xbe>
 8001e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e28:	d00d      	beq.n	8001e46 <HAL_TIM_ConfigClockSource+0xc2>
 8001e2a:	2b70      	cmp	r3, #112	; 0x70
 8001e2c:	d1cc      	bne.n	8001dc8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8001e2e:	68cb      	ldr	r3, [r1, #12]
 8001e30:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001e34:	f7ff ff9c 	bl	8001d70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e40:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2200      	movs	r2, #0
 8001e44:	e7c0      	b.n	8001dc8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8001e46:	68cb      	ldr	r3, [r1, #12]
 8001e48:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001e4c:	f7ff ff90 	bl	8001d70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	6893      	ldr	r3, [r2, #8]
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e58:	e7f2      	b.n	8001e40 <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e5a:	684d      	ldr	r5, [r1, #4]
 8001e5c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e5e:	6a01      	ldr	r1, [r0, #32]
 8001e60:	f021 0110 	bic.w	r1, r1, #16
 8001e64:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e66:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001e68:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e6a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e72:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e76:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001e7a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e7c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e7e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e84:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001e88:	e7c7      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e8a:	684a      	ldr	r2, [r1, #4]
 8001e8c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e8e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e90:	6a05      	ldr	r5, [r0, #32]
 8001e92:	f025 0501 	bic.w	r5, r5, #1
 8001e96:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e98:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e9a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ea2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001ea6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001ea8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001eaa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001eac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001eb2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8001eb6:	e7b0      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8001eb8:	461a      	mov	r2, r3
 8001eba:	e78b      	b.n	8001dd4 <HAL_TIM_ConfigClockSource+0x50>

08001ebc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ebc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ebe:	f001 011f 	and.w	r1, r1, #31
{
 8001ec2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ec4:	2401      	movs	r4, #1
 8001ec6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001ec8:	ea23 0304 	bic.w	r3, r3, r4
 8001ecc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ece:	6a03      	ldr	r3, [r0, #32]
 8001ed0:	408a      	lsls	r2, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	6202      	str	r2, [r0, #32]
}
 8001ed6:	bd10      	pop	{r4, pc}

08001ed8 <HAL_TIM_OC_Start>:
{
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001edc:	b929      	cbnz	r1, 8001eea <HAL_TIM_OC_Start+0x12>
 8001ede:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d021      	beq.n	8001f2a <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
}
 8001ee8:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eea:	2904      	cmp	r1, #4
 8001eec:	d107      	bne.n	8001efe <HAL_TIM_OC_Start+0x26>
 8001eee:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d1f7      	bne.n	8001ee6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001efc:	e018      	b.n	8001f30 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001efe:	2908      	cmp	r1, #8
 8001f00:	d107      	bne.n	8001f12 <HAL_TIM_OC_Start+0x3a>
 8001f02:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d1ed      	bne.n	8001ee6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001f10:	e00e      	b.n	8001f30 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d1e5      	bne.n	8001ee6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f1a:	2904      	cmp	r1, #4
 8001f1c:	d0eb      	beq.n	8001ef6 <HAL_TIM_OC_Start+0x1e>
 8001f1e:	2908      	cmp	r1, #8
 8001f20:	d0f3      	beq.n	8001f0a <HAL_TIM_OC_Start+0x32>
 8001f22:	2302      	movs	r3, #2
 8001f24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8001f28:	e002      	b.n	8001f30 <HAL_TIM_OC_Start+0x58>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f30:	2201      	movs	r2, #1
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	f7ff ffc2 	bl	8001ebc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_TIM_OC_Start+0xac>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d10a      	bne.n	8001f56 <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8001f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4e:	2a06      	cmp	r2, #6
 8001f50:	d113      	bne.n	8001f7a <HAL_TIM_OC_Start+0xa2>
  return HAL_OK;
 8001f52:	2000      	movs	r0, #0
 8001f54:	e7c8      	b.n	8001ee8 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5a:	d0f5      	beq.n	8001f48 <HAL_TIM_OC_Start+0x70>
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_TIM_OC_Start+0xb0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d0f2      	beq.n	8001f48 <HAL_TIM_OC_Start+0x70>
 8001f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d0ee      	beq.n	8001f48 <HAL_TIM_OC_Start+0x70>
 8001f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d0ea      	beq.n	8001f48 <HAL_TIM_OC_Start+0x70>
 8001f72:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d0e6      	beq.n	8001f48 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e7e6      	b.n	8001f52 <HAL_TIM_OC_Start+0x7a>
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40000400 	.word	0x40000400

08001f8c <HAL_TIM_PWM_Start>:
 8001f8c:	f7ff bfa4 	b.w	8001ed8 <HAL_TIM_OC_Start>

08001f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f90:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f92:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	f04f 0302 	mov.w	r3, #2
 8001f9c:	d02a      	beq.n	8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0x64>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fa2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fa4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001fa6:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001fa8:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001faa:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fae:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fb0:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb2:	4c11      	ldr	r4, [pc, #68]	; (8001ff8 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8001fb4:	42a3      	cmp	r3, r4
 8001fb6:	d012      	beq.n	8001fde <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbc:	d00f      	beq.n	8001fde <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001fbe:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	d00b      	beq.n	8001fde <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001fc6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fca:	42a3      	cmp	r3, r4
 8001fcc:	d007      	beq.n	8001fde <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001fce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fd2:	42a3      	cmp	r3, r4
 8001fd4:	d003      	beq.n	8001fde <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8001fd6:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8001fda:	42a3      	cmp	r3, r4
 8001fdc:	d104      	bne.n	8001fe8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fde:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fe4:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001ff4:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001ff6:	bd30      	pop	{r4, r5, pc}
 8001ff8:	40010000 	.word	0x40010000

08001ffc <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ffc:	6802      	ldr	r2, [r0, #0]
 8001ffe:	68c1      	ldr	r1, [r0, #12]
 8002000:	6913      	ldr	r3, [r2, #16]
 8002002:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002006:	430b      	orrs	r3, r1
{
 8002008:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800200a:	6113      	str	r3, [r2, #16]
{
 800200c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800200e:	6883      	ldr	r3, [r0, #8]
 8002010:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002012:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002014:	4303      	orrs	r3, r0
 8002016:	6968      	ldr	r0, [r5, #20]
 8002018:	4303      	orrs	r3, r0
 800201a:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 800201c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002020:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002024:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002026:	430b      	orrs	r3, r1
 8002028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800202a:	6953      	ldr	r3, [r2, #20]
 800202c:	69a9      	ldr	r1, [r5, #24]
 800202e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002032:	430b      	orrs	r3, r1
 8002034:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002036:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <UART_SetConfig+0xb8>)
 8002038:	429a      	cmp	r2, r3
 800203a:	d003      	beq.n	8002044 <UART_SetConfig+0x48>
 800203c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002040:	429a      	cmp	r2, r3
 8002042:	d123      	bne.n	800208c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002044:	f7ff fce0 	bl	8001a08 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002048:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800204a:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800204c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002050:	e9d5 4600 	ldrd	r4, r6, [r5]
 8002054:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002058:	d11b      	bne.n	8002092 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800205a:	19b2      	adds	r2, r6, r6
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	415b      	adcs	r3, r3
 8002062:	f7fe f90d 	bl	8000280 <__aeabi_uldivmod>
 8002066:	2164      	movs	r1, #100	; 0x64
 8002068:	fbb0 f5f1 	udiv	r5, r0, r1
 800206c:	fb01 0315 	mls	r3, r1, r5, r0
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	3332      	adds	r3, #50	; 0x32
 8002074:	fbb3 f3f1 	udiv	r3, r3, r1
 8002078:	f003 0207 	and.w	r2, r3, #7
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8002082:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002086:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002088:	60a3      	str	r3, [r4, #8]
  }
}
 800208a:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800208c:	f7ff fcac 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002090:	e7da      	b.n	8002048 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002092:	00b2      	lsls	r2, r6, #2
 8002094:	0fb3      	lsrs	r3, r6, #30
 8002096:	f7fe f8f3 	bl	8000280 <__aeabi_uldivmod>
 800209a:	2264      	movs	r2, #100	; 0x64
 800209c:	fbb0 f1f2 	udiv	r1, r0, r2
 80020a0:	fb02 0311 	mls	r3, r2, r1, r0
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	3332      	adds	r3, #50	; 0x32
 80020a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ac:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80020b0:	e7ea      	b.n	8002088 <UART_SetConfig+0x8c>
 80020b2:	bf00      	nop
 80020b4:	40011000 	.word	0x40011000

080020b8 <HAL_UART_Init>:
{
 80020b8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80020ba:	4604      	mov	r4, r0
 80020bc:	b340      	cbz	r0, 8002110 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80020be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020c6:	b91b      	cbnz	r3, 80020d0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80020cc:	f7fe fde0 	bl	8000c90 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020d2:	2324      	movs	r3, #36	; 0x24
 80020d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80020d8:	68d3      	ldr	r3, [r2, #12]
 80020da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020de:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7ff ff8b 	bl	8001ffc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020fe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002100:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002102:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002104:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800210a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800210e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002110:	2001      	movs	r0, #1
 8002112:	e7fc      	b.n	800210e <HAL_UART_Init+0x56>

08002114 <__errno>:
 8002114:	4b01      	ldr	r3, [pc, #4]	; (800211c <__errno+0x8>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000000c 	.word	0x2000000c

08002120 <__libc_init_array>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	4d0d      	ldr	r5, [pc, #52]	; (8002158 <__libc_init_array+0x38>)
 8002124:	4c0d      	ldr	r4, [pc, #52]	; (800215c <__libc_init_array+0x3c>)
 8002126:	1b64      	subs	r4, r4, r5
 8002128:	10a4      	asrs	r4, r4, #2
 800212a:	2600      	movs	r6, #0
 800212c:	42a6      	cmp	r6, r4
 800212e:	d109      	bne.n	8002144 <__libc_init_array+0x24>
 8002130:	4d0b      	ldr	r5, [pc, #44]	; (8002160 <__libc_init_array+0x40>)
 8002132:	4c0c      	ldr	r4, [pc, #48]	; (8002164 <__libc_init_array+0x44>)
 8002134:	f000 fc96 	bl	8002a64 <_init>
 8002138:	1b64      	subs	r4, r4, r5
 800213a:	10a4      	asrs	r4, r4, #2
 800213c:	2600      	movs	r6, #0
 800213e:	42a6      	cmp	r6, r4
 8002140:	d105      	bne.n	800214e <__libc_init_array+0x2e>
 8002142:	bd70      	pop	{r4, r5, r6, pc}
 8002144:	f855 3b04 	ldr.w	r3, [r5], #4
 8002148:	4798      	blx	r3
 800214a:	3601      	adds	r6, #1
 800214c:	e7ee      	b.n	800212c <__libc_init_array+0xc>
 800214e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002152:	4798      	blx	r3
 8002154:	3601      	adds	r6, #1
 8002156:	e7f2      	b.n	800213e <__libc_init_array+0x1e>
 8002158:	08002af0 	.word	0x08002af0
 800215c:	08002af0 	.word	0x08002af0
 8002160:	08002af0 	.word	0x08002af0
 8002164:	08002af4 	.word	0x08002af4

08002168 <memset>:
 8002168:	4402      	add	r2, r0
 800216a:	4603      	mov	r3, r0
 800216c:	4293      	cmp	r3, r2
 800216e:	d100      	bne.n	8002172 <memset+0xa>
 8002170:	4770      	bx	lr
 8002172:	f803 1b01 	strb.w	r1, [r3], #1
 8002176:	e7f9      	b.n	800216c <memset+0x4>

08002178 <siprintf>:
 8002178:	b40e      	push	{r1, r2, r3}
 800217a:	b500      	push	{lr}
 800217c:	b09c      	sub	sp, #112	; 0x70
 800217e:	ab1d      	add	r3, sp, #116	; 0x74
 8002180:	9002      	str	r0, [sp, #8]
 8002182:	9006      	str	r0, [sp, #24]
 8002184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002188:	4809      	ldr	r0, [pc, #36]	; (80021b0 <siprintf+0x38>)
 800218a:	9107      	str	r1, [sp, #28]
 800218c:	9104      	str	r1, [sp, #16]
 800218e:	4909      	ldr	r1, [pc, #36]	; (80021b4 <siprintf+0x3c>)
 8002190:	f853 2b04 	ldr.w	r2, [r3], #4
 8002194:	9105      	str	r1, [sp, #20]
 8002196:	6800      	ldr	r0, [r0, #0]
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	a902      	add	r1, sp, #8
 800219c:	f000 f870 	bl	8002280 <_svfiprintf_r>
 80021a0:	9b02      	ldr	r3, [sp, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	b01c      	add	sp, #112	; 0x70
 80021a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80021ac:	b003      	add	sp, #12
 80021ae:	4770      	bx	lr
 80021b0:	2000000c 	.word	0x2000000c
 80021b4:	ffff0208 	.word	0xffff0208

080021b8 <strcpy>:
 80021b8:	4603      	mov	r3, r0
 80021ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021be:	f803 2b01 	strb.w	r2, [r3], #1
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	d1f9      	bne.n	80021ba <strcpy+0x2>
 80021c6:	4770      	bx	lr

080021c8 <__ssputs_r>:
 80021c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021cc:	688e      	ldr	r6, [r1, #8]
 80021ce:	429e      	cmp	r6, r3
 80021d0:	4682      	mov	sl, r0
 80021d2:	460c      	mov	r4, r1
 80021d4:	4690      	mov	r8, r2
 80021d6:	461f      	mov	r7, r3
 80021d8:	d838      	bhi.n	800224c <__ssputs_r+0x84>
 80021da:	898a      	ldrh	r2, [r1, #12]
 80021dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80021e0:	d032      	beq.n	8002248 <__ssputs_r+0x80>
 80021e2:	6825      	ldr	r5, [r4, #0]
 80021e4:	6909      	ldr	r1, [r1, #16]
 80021e6:	eba5 0901 	sub.w	r9, r5, r1
 80021ea:	6965      	ldr	r5, [r4, #20]
 80021ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80021f4:	3301      	adds	r3, #1
 80021f6:	444b      	add	r3, r9
 80021f8:	106d      	asrs	r5, r5, #1
 80021fa:	429d      	cmp	r5, r3
 80021fc:	bf38      	it	cc
 80021fe:	461d      	movcc	r5, r3
 8002200:	0553      	lsls	r3, r2, #21
 8002202:	d531      	bpl.n	8002268 <__ssputs_r+0xa0>
 8002204:	4629      	mov	r1, r5
 8002206:	f000 fb63 	bl	80028d0 <_malloc_r>
 800220a:	4606      	mov	r6, r0
 800220c:	b950      	cbnz	r0, 8002224 <__ssputs_r+0x5c>
 800220e:	230c      	movs	r3, #12
 8002210:	f8ca 3000 	str.w	r3, [sl]
 8002214:	89a3      	ldrh	r3, [r4, #12]
 8002216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800221a:	81a3      	strh	r3, [r4, #12]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002224:	6921      	ldr	r1, [r4, #16]
 8002226:	464a      	mov	r2, r9
 8002228:	f000 fabe 	bl	80027a8 <memcpy>
 800222c:	89a3      	ldrh	r3, [r4, #12]
 800222e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002236:	81a3      	strh	r3, [r4, #12]
 8002238:	6126      	str	r6, [r4, #16]
 800223a:	6165      	str	r5, [r4, #20]
 800223c:	444e      	add	r6, r9
 800223e:	eba5 0509 	sub.w	r5, r5, r9
 8002242:	6026      	str	r6, [r4, #0]
 8002244:	60a5      	str	r5, [r4, #8]
 8002246:	463e      	mov	r6, r7
 8002248:	42be      	cmp	r6, r7
 800224a:	d900      	bls.n	800224e <__ssputs_r+0x86>
 800224c:	463e      	mov	r6, r7
 800224e:	6820      	ldr	r0, [r4, #0]
 8002250:	4632      	mov	r2, r6
 8002252:	4641      	mov	r1, r8
 8002254:	f000 fab6 	bl	80027c4 <memmove>
 8002258:	68a3      	ldr	r3, [r4, #8]
 800225a:	1b9b      	subs	r3, r3, r6
 800225c:	60a3      	str	r3, [r4, #8]
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	4433      	add	r3, r6
 8002262:	6023      	str	r3, [r4, #0]
 8002264:	2000      	movs	r0, #0
 8002266:	e7db      	b.n	8002220 <__ssputs_r+0x58>
 8002268:	462a      	mov	r2, r5
 800226a:	f000 fba5 	bl	80029b8 <_realloc_r>
 800226e:	4606      	mov	r6, r0
 8002270:	2800      	cmp	r0, #0
 8002272:	d1e1      	bne.n	8002238 <__ssputs_r+0x70>
 8002274:	6921      	ldr	r1, [r4, #16]
 8002276:	4650      	mov	r0, sl
 8002278:	f000 fabe 	bl	80027f8 <_free_r>
 800227c:	e7c7      	b.n	800220e <__ssputs_r+0x46>
	...

08002280 <_svfiprintf_r>:
 8002280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002284:	4698      	mov	r8, r3
 8002286:	898b      	ldrh	r3, [r1, #12]
 8002288:	061b      	lsls	r3, r3, #24
 800228a:	b09d      	sub	sp, #116	; 0x74
 800228c:	4607      	mov	r7, r0
 800228e:	460d      	mov	r5, r1
 8002290:	4614      	mov	r4, r2
 8002292:	d50e      	bpl.n	80022b2 <_svfiprintf_r+0x32>
 8002294:	690b      	ldr	r3, [r1, #16]
 8002296:	b963      	cbnz	r3, 80022b2 <_svfiprintf_r+0x32>
 8002298:	2140      	movs	r1, #64	; 0x40
 800229a:	f000 fb19 	bl	80028d0 <_malloc_r>
 800229e:	6028      	str	r0, [r5, #0]
 80022a0:	6128      	str	r0, [r5, #16]
 80022a2:	b920      	cbnz	r0, 80022ae <_svfiprintf_r+0x2e>
 80022a4:	230c      	movs	r3, #12
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	e0d1      	b.n	8002452 <_svfiprintf_r+0x1d2>
 80022ae:	2340      	movs	r3, #64	; 0x40
 80022b0:	616b      	str	r3, [r5, #20]
 80022b2:	2300      	movs	r3, #0
 80022b4:	9309      	str	r3, [sp, #36]	; 0x24
 80022b6:	2320      	movs	r3, #32
 80022b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80022c0:	2330      	movs	r3, #48	; 0x30
 80022c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800246c <_svfiprintf_r+0x1ec>
 80022c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022ca:	f04f 0901 	mov.w	r9, #1
 80022ce:	4623      	mov	r3, r4
 80022d0:	469a      	mov	sl, r3
 80022d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022d6:	b10a      	cbz	r2, 80022dc <_svfiprintf_r+0x5c>
 80022d8:	2a25      	cmp	r2, #37	; 0x25
 80022da:	d1f9      	bne.n	80022d0 <_svfiprintf_r+0x50>
 80022dc:	ebba 0b04 	subs.w	fp, sl, r4
 80022e0:	d00b      	beq.n	80022fa <_svfiprintf_r+0x7a>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4622      	mov	r2, r4
 80022e6:	4629      	mov	r1, r5
 80022e8:	4638      	mov	r0, r7
 80022ea:	f7ff ff6d 	bl	80021c8 <__ssputs_r>
 80022ee:	3001      	adds	r0, #1
 80022f0:	f000 80aa 	beq.w	8002448 <_svfiprintf_r+0x1c8>
 80022f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022f6:	445a      	add	r2, fp
 80022f8:	9209      	str	r2, [sp, #36]	; 0x24
 80022fa:	f89a 3000 	ldrb.w	r3, [sl]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80a2 	beq.w	8002448 <_svfiprintf_r+0x1c8>
 8002304:	2300      	movs	r3, #0
 8002306:	f04f 32ff 	mov.w	r2, #4294967295
 800230a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800230e:	f10a 0a01 	add.w	sl, sl, #1
 8002312:	9304      	str	r3, [sp, #16]
 8002314:	9307      	str	r3, [sp, #28]
 8002316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800231a:	931a      	str	r3, [sp, #104]	; 0x68
 800231c:	4654      	mov	r4, sl
 800231e:	2205      	movs	r2, #5
 8002320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002324:	4851      	ldr	r0, [pc, #324]	; (800246c <_svfiprintf_r+0x1ec>)
 8002326:	f7fd ff5b 	bl	80001e0 <memchr>
 800232a:	9a04      	ldr	r2, [sp, #16]
 800232c:	b9d8      	cbnz	r0, 8002366 <_svfiprintf_r+0xe6>
 800232e:	06d0      	lsls	r0, r2, #27
 8002330:	bf44      	itt	mi
 8002332:	2320      	movmi	r3, #32
 8002334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002338:	0711      	lsls	r1, r2, #28
 800233a:	bf44      	itt	mi
 800233c:	232b      	movmi	r3, #43	; 0x2b
 800233e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002342:	f89a 3000 	ldrb.w	r3, [sl]
 8002346:	2b2a      	cmp	r3, #42	; 0x2a
 8002348:	d015      	beq.n	8002376 <_svfiprintf_r+0xf6>
 800234a:	9a07      	ldr	r2, [sp, #28]
 800234c:	4654      	mov	r4, sl
 800234e:	2000      	movs	r0, #0
 8002350:	f04f 0c0a 	mov.w	ip, #10
 8002354:	4621      	mov	r1, r4
 8002356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800235a:	3b30      	subs	r3, #48	; 0x30
 800235c:	2b09      	cmp	r3, #9
 800235e:	d94e      	bls.n	80023fe <_svfiprintf_r+0x17e>
 8002360:	b1b0      	cbz	r0, 8002390 <_svfiprintf_r+0x110>
 8002362:	9207      	str	r2, [sp, #28]
 8002364:	e014      	b.n	8002390 <_svfiprintf_r+0x110>
 8002366:	eba0 0308 	sub.w	r3, r0, r8
 800236a:	fa09 f303 	lsl.w	r3, r9, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	9304      	str	r3, [sp, #16]
 8002372:	46a2      	mov	sl, r4
 8002374:	e7d2      	b.n	800231c <_svfiprintf_r+0x9c>
 8002376:	9b03      	ldr	r3, [sp, #12]
 8002378:	1d19      	adds	r1, r3, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	9103      	str	r1, [sp, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	bfbb      	ittet	lt
 8002382:	425b      	neglt	r3, r3
 8002384:	f042 0202 	orrlt.w	r2, r2, #2
 8002388:	9307      	strge	r3, [sp, #28]
 800238a:	9307      	strlt	r3, [sp, #28]
 800238c:	bfb8      	it	lt
 800238e:	9204      	strlt	r2, [sp, #16]
 8002390:	7823      	ldrb	r3, [r4, #0]
 8002392:	2b2e      	cmp	r3, #46	; 0x2e
 8002394:	d10c      	bne.n	80023b0 <_svfiprintf_r+0x130>
 8002396:	7863      	ldrb	r3, [r4, #1]
 8002398:	2b2a      	cmp	r3, #42	; 0x2a
 800239a:	d135      	bne.n	8002408 <_svfiprintf_r+0x188>
 800239c:	9b03      	ldr	r3, [sp, #12]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	9203      	str	r2, [sp, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bfb8      	it	lt
 80023a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80023ac:	3402      	adds	r4, #2
 80023ae:	9305      	str	r3, [sp, #20]
 80023b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800247c <_svfiprintf_r+0x1fc>
 80023b4:	7821      	ldrb	r1, [r4, #0]
 80023b6:	2203      	movs	r2, #3
 80023b8:	4650      	mov	r0, sl
 80023ba:	f7fd ff11 	bl	80001e0 <memchr>
 80023be:	b140      	cbz	r0, 80023d2 <_svfiprintf_r+0x152>
 80023c0:	2340      	movs	r3, #64	; 0x40
 80023c2:	eba0 000a 	sub.w	r0, r0, sl
 80023c6:	fa03 f000 	lsl.w	r0, r3, r0
 80023ca:	9b04      	ldr	r3, [sp, #16]
 80023cc:	4303      	orrs	r3, r0
 80023ce:	3401      	adds	r4, #1
 80023d0:	9304      	str	r3, [sp, #16]
 80023d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023d6:	4826      	ldr	r0, [pc, #152]	; (8002470 <_svfiprintf_r+0x1f0>)
 80023d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023dc:	2206      	movs	r2, #6
 80023de:	f7fd feff 	bl	80001e0 <memchr>
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d038      	beq.n	8002458 <_svfiprintf_r+0x1d8>
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <_svfiprintf_r+0x1f4>)
 80023e8:	bb1b      	cbnz	r3, 8002432 <_svfiprintf_r+0x1b2>
 80023ea:	9b03      	ldr	r3, [sp, #12]
 80023ec:	3307      	adds	r3, #7
 80023ee:	f023 0307 	bic.w	r3, r3, #7
 80023f2:	3308      	adds	r3, #8
 80023f4:	9303      	str	r3, [sp, #12]
 80023f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023f8:	4433      	add	r3, r6
 80023fa:	9309      	str	r3, [sp, #36]	; 0x24
 80023fc:	e767      	b.n	80022ce <_svfiprintf_r+0x4e>
 80023fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002402:	460c      	mov	r4, r1
 8002404:	2001      	movs	r0, #1
 8002406:	e7a5      	b.n	8002354 <_svfiprintf_r+0xd4>
 8002408:	2300      	movs	r3, #0
 800240a:	3401      	adds	r4, #1
 800240c:	9305      	str	r3, [sp, #20]
 800240e:	4619      	mov	r1, r3
 8002410:	f04f 0c0a 	mov.w	ip, #10
 8002414:	4620      	mov	r0, r4
 8002416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800241a:	3a30      	subs	r2, #48	; 0x30
 800241c:	2a09      	cmp	r2, #9
 800241e:	d903      	bls.n	8002428 <_svfiprintf_r+0x1a8>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0c5      	beq.n	80023b0 <_svfiprintf_r+0x130>
 8002424:	9105      	str	r1, [sp, #20]
 8002426:	e7c3      	b.n	80023b0 <_svfiprintf_r+0x130>
 8002428:	fb0c 2101 	mla	r1, ip, r1, r2
 800242c:	4604      	mov	r4, r0
 800242e:	2301      	movs	r3, #1
 8002430:	e7f0      	b.n	8002414 <_svfiprintf_r+0x194>
 8002432:	ab03      	add	r3, sp, #12
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	462a      	mov	r2, r5
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <_svfiprintf_r+0x1f8>)
 800243a:	a904      	add	r1, sp, #16
 800243c:	4638      	mov	r0, r7
 800243e:	f3af 8000 	nop.w
 8002442:	1c42      	adds	r2, r0, #1
 8002444:	4606      	mov	r6, r0
 8002446:	d1d6      	bne.n	80023f6 <_svfiprintf_r+0x176>
 8002448:	89ab      	ldrh	r3, [r5, #12]
 800244a:	065b      	lsls	r3, r3, #25
 800244c:	f53f af2c 	bmi.w	80022a8 <_svfiprintf_r+0x28>
 8002450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002452:	b01d      	add	sp, #116	; 0x74
 8002454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002458:	ab03      	add	r3, sp, #12
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	462a      	mov	r2, r5
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <_svfiprintf_r+0x1f8>)
 8002460:	a904      	add	r1, sp, #16
 8002462:	4638      	mov	r0, r7
 8002464:	f000 f87a 	bl	800255c <_printf_i>
 8002468:	e7eb      	b.n	8002442 <_svfiprintf_r+0x1c2>
 800246a:	bf00      	nop
 800246c:	08002ab4 	.word	0x08002ab4
 8002470:	08002abe 	.word	0x08002abe
 8002474:	00000000 	.word	0x00000000
 8002478:	080021c9 	.word	0x080021c9
 800247c:	08002aba 	.word	0x08002aba

08002480 <_printf_common>:
 8002480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002484:	4616      	mov	r6, r2
 8002486:	4699      	mov	r9, r3
 8002488:	688a      	ldr	r2, [r1, #8]
 800248a:	690b      	ldr	r3, [r1, #16]
 800248c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002490:	4293      	cmp	r3, r2
 8002492:	bfb8      	it	lt
 8002494:	4613      	movlt	r3, r2
 8002496:	6033      	str	r3, [r6, #0]
 8002498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800249c:	4607      	mov	r7, r0
 800249e:	460c      	mov	r4, r1
 80024a0:	b10a      	cbz	r2, 80024a6 <_printf_common+0x26>
 80024a2:	3301      	adds	r3, #1
 80024a4:	6033      	str	r3, [r6, #0]
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	0699      	lsls	r1, r3, #26
 80024aa:	bf42      	ittt	mi
 80024ac:	6833      	ldrmi	r3, [r6, #0]
 80024ae:	3302      	addmi	r3, #2
 80024b0:	6033      	strmi	r3, [r6, #0]
 80024b2:	6825      	ldr	r5, [r4, #0]
 80024b4:	f015 0506 	ands.w	r5, r5, #6
 80024b8:	d106      	bne.n	80024c8 <_printf_common+0x48>
 80024ba:	f104 0a19 	add.w	sl, r4, #25
 80024be:	68e3      	ldr	r3, [r4, #12]
 80024c0:	6832      	ldr	r2, [r6, #0]
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	42ab      	cmp	r3, r5
 80024c6:	dc26      	bgt.n	8002516 <_printf_common+0x96>
 80024c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024cc:	1e13      	subs	r3, r2, #0
 80024ce:	6822      	ldr	r2, [r4, #0]
 80024d0:	bf18      	it	ne
 80024d2:	2301      	movne	r3, #1
 80024d4:	0692      	lsls	r2, r2, #26
 80024d6:	d42b      	bmi.n	8002530 <_printf_common+0xb0>
 80024d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024dc:	4649      	mov	r1, r9
 80024de:	4638      	mov	r0, r7
 80024e0:	47c0      	blx	r8
 80024e2:	3001      	adds	r0, #1
 80024e4:	d01e      	beq.n	8002524 <_printf_common+0xa4>
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	68e5      	ldr	r5, [r4, #12]
 80024ea:	6832      	ldr	r2, [r6, #0]
 80024ec:	f003 0306 	and.w	r3, r3, #6
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	bf08      	it	eq
 80024f4:	1aad      	subeq	r5, r5, r2
 80024f6:	68a3      	ldr	r3, [r4, #8]
 80024f8:	6922      	ldr	r2, [r4, #16]
 80024fa:	bf0c      	ite	eq
 80024fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002500:	2500      	movne	r5, #0
 8002502:	4293      	cmp	r3, r2
 8002504:	bfc4      	itt	gt
 8002506:	1a9b      	subgt	r3, r3, r2
 8002508:	18ed      	addgt	r5, r5, r3
 800250a:	2600      	movs	r6, #0
 800250c:	341a      	adds	r4, #26
 800250e:	42b5      	cmp	r5, r6
 8002510:	d11a      	bne.n	8002548 <_printf_common+0xc8>
 8002512:	2000      	movs	r0, #0
 8002514:	e008      	b.n	8002528 <_printf_common+0xa8>
 8002516:	2301      	movs	r3, #1
 8002518:	4652      	mov	r2, sl
 800251a:	4649      	mov	r1, r9
 800251c:	4638      	mov	r0, r7
 800251e:	47c0      	blx	r8
 8002520:	3001      	adds	r0, #1
 8002522:	d103      	bne.n	800252c <_printf_common+0xac>
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800252c:	3501      	adds	r5, #1
 800252e:	e7c6      	b.n	80024be <_printf_common+0x3e>
 8002530:	18e1      	adds	r1, r4, r3
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	2030      	movs	r0, #48	; 0x30
 8002536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800253a:	4422      	add	r2, r4
 800253c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002544:	3302      	adds	r3, #2
 8002546:	e7c7      	b.n	80024d8 <_printf_common+0x58>
 8002548:	2301      	movs	r3, #1
 800254a:	4622      	mov	r2, r4
 800254c:	4649      	mov	r1, r9
 800254e:	4638      	mov	r0, r7
 8002550:	47c0      	blx	r8
 8002552:	3001      	adds	r0, #1
 8002554:	d0e6      	beq.n	8002524 <_printf_common+0xa4>
 8002556:	3601      	adds	r6, #1
 8002558:	e7d9      	b.n	800250e <_printf_common+0x8e>
	...

0800255c <_printf_i>:
 800255c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002560:	7e0f      	ldrb	r7, [r1, #24]
 8002562:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002564:	2f78      	cmp	r7, #120	; 0x78
 8002566:	4691      	mov	r9, r2
 8002568:	4680      	mov	r8, r0
 800256a:	460c      	mov	r4, r1
 800256c:	469a      	mov	sl, r3
 800256e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002572:	d807      	bhi.n	8002584 <_printf_i+0x28>
 8002574:	2f62      	cmp	r7, #98	; 0x62
 8002576:	d80a      	bhi.n	800258e <_printf_i+0x32>
 8002578:	2f00      	cmp	r7, #0
 800257a:	f000 80d8 	beq.w	800272e <_printf_i+0x1d2>
 800257e:	2f58      	cmp	r7, #88	; 0x58
 8002580:	f000 80a3 	beq.w	80026ca <_printf_i+0x16e>
 8002584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800258c:	e03a      	b.n	8002604 <_printf_i+0xa8>
 800258e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002592:	2b15      	cmp	r3, #21
 8002594:	d8f6      	bhi.n	8002584 <_printf_i+0x28>
 8002596:	a101      	add	r1, pc, #4	; (adr r1, 800259c <_printf_i+0x40>)
 8002598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800259c:	080025f5 	.word	0x080025f5
 80025a0:	08002609 	.word	0x08002609
 80025a4:	08002585 	.word	0x08002585
 80025a8:	08002585 	.word	0x08002585
 80025ac:	08002585 	.word	0x08002585
 80025b0:	08002585 	.word	0x08002585
 80025b4:	08002609 	.word	0x08002609
 80025b8:	08002585 	.word	0x08002585
 80025bc:	08002585 	.word	0x08002585
 80025c0:	08002585 	.word	0x08002585
 80025c4:	08002585 	.word	0x08002585
 80025c8:	08002715 	.word	0x08002715
 80025cc:	08002639 	.word	0x08002639
 80025d0:	080026f7 	.word	0x080026f7
 80025d4:	08002585 	.word	0x08002585
 80025d8:	08002585 	.word	0x08002585
 80025dc:	08002737 	.word	0x08002737
 80025e0:	08002585 	.word	0x08002585
 80025e4:	08002639 	.word	0x08002639
 80025e8:	08002585 	.word	0x08002585
 80025ec:	08002585 	.word	0x08002585
 80025f0:	080026ff 	.word	0x080026ff
 80025f4:	682b      	ldr	r3, [r5, #0]
 80025f6:	1d1a      	adds	r2, r3, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	602a      	str	r2, [r5, #0]
 80025fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002604:	2301      	movs	r3, #1
 8002606:	e0a3      	b.n	8002750 <_printf_i+0x1f4>
 8002608:	6820      	ldr	r0, [r4, #0]
 800260a:	6829      	ldr	r1, [r5, #0]
 800260c:	0606      	lsls	r6, r0, #24
 800260e:	f101 0304 	add.w	r3, r1, #4
 8002612:	d50a      	bpl.n	800262a <_printf_i+0xce>
 8002614:	680e      	ldr	r6, [r1, #0]
 8002616:	602b      	str	r3, [r5, #0]
 8002618:	2e00      	cmp	r6, #0
 800261a:	da03      	bge.n	8002624 <_printf_i+0xc8>
 800261c:	232d      	movs	r3, #45	; 0x2d
 800261e:	4276      	negs	r6, r6
 8002620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002624:	485e      	ldr	r0, [pc, #376]	; (80027a0 <_printf_i+0x244>)
 8002626:	230a      	movs	r3, #10
 8002628:	e019      	b.n	800265e <_printf_i+0x102>
 800262a:	680e      	ldr	r6, [r1, #0]
 800262c:	602b      	str	r3, [r5, #0]
 800262e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002632:	bf18      	it	ne
 8002634:	b236      	sxthne	r6, r6
 8002636:	e7ef      	b.n	8002618 <_printf_i+0xbc>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	6820      	ldr	r0, [r4, #0]
 800263c:	1d19      	adds	r1, r3, #4
 800263e:	6029      	str	r1, [r5, #0]
 8002640:	0601      	lsls	r1, r0, #24
 8002642:	d501      	bpl.n	8002648 <_printf_i+0xec>
 8002644:	681e      	ldr	r6, [r3, #0]
 8002646:	e002      	b.n	800264e <_printf_i+0xf2>
 8002648:	0646      	lsls	r6, r0, #25
 800264a:	d5fb      	bpl.n	8002644 <_printf_i+0xe8>
 800264c:	881e      	ldrh	r6, [r3, #0]
 800264e:	4854      	ldr	r0, [pc, #336]	; (80027a0 <_printf_i+0x244>)
 8002650:	2f6f      	cmp	r7, #111	; 0x6f
 8002652:	bf0c      	ite	eq
 8002654:	2308      	moveq	r3, #8
 8002656:	230a      	movne	r3, #10
 8002658:	2100      	movs	r1, #0
 800265a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800265e:	6865      	ldr	r5, [r4, #4]
 8002660:	60a5      	str	r5, [r4, #8]
 8002662:	2d00      	cmp	r5, #0
 8002664:	bfa2      	ittt	ge
 8002666:	6821      	ldrge	r1, [r4, #0]
 8002668:	f021 0104 	bicge.w	r1, r1, #4
 800266c:	6021      	strge	r1, [r4, #0]
 800266e:	b90e      	cbnz	r6, 8002674 <_printf_i+0x118>
 8002670:	2d00      	cmp	r5, #0
 8002672:	d04d      	beq.n	8002710 <_printf_i+0x1b4>
 8002674:	4615      	mov	r5, r2
 8002676:	fbb6 f1f3 	udiv	r1, r6, r3
 800267a:	fb03 6711 	mls	r7, r3, r1, r6
 800267e:	5dc7      	ldrb	r7, [r0, r7]
 8002680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002684:	4637      	mov	r7, r6
 8002686:	42bb      	cmp	r3, r7
 8002688:	460e      	mov	r6, r1
 800268a:	d9f4      	bls.n	8002676 <_printf_i+0x11a>
 800268c:	2b08      	cmp	r3, #8
 800268e:	d10b      	bne.n	80026a8 <_printf_i+0x14c>
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	07de      	lsls	r6, r3, #31
 8002694:	d508      	bpl.n	80026a8 <_printf_i+0x14c>
 8002696:	6923      	ldr	r3, [r4, #16]
 8002698:	6861      	ldr	r1, [r4, #4]
 800269a:	4299      	cmp	r1, r3
 800269c:	bfde      	ittt	le
 800269e:	2330      	movle	r3, #48	; 0x30
 80026a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026a8:	1b52      	subs	r2, r2, r5
 80026aa:	6122      	str	r2, [r4, #16]
 80026ac:	f8cd a000 	str.w	sl, [sp]
 80026b0:	464b      	mov	r3, r9
 80026b2:	aa03      	add	r2, sp, #12
 80026b4:	4621      	mov	r1, r4
 80026b6:	4640      	mov	r0, r8
 80026b8:	f7ff fee2 	bl	8002480 <_printf_common>
 80026bc:	3001      	adds	r0, #1
 80026be:	d14c      	bne.n	800275a <_printf_i+0x1fe>
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	b004      	add	sp, #16
 80026c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ca:	4835      	ldr	r0, [pc, #212]	; (80027a0 <_printf_i+0x244>)
 80026cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026d0:	6829      	ldr	r1, [r5, #0]
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80026d8:	6029      	str	r1, [r5, #0]
 80026da:	061d      	lsls	r5, r3, #24
 80026dc:	d514      	bpl.n	8002708 <_printf_i+0x1ac>
 80026de:	07df      	lsls	r7, r3, #31
 80026e0:	bf44      	itt	mi
 80026e2:	f043 0320 	orrmi.w	r3, r3, #32
 80026e6:	6023      	strmi	r3, [r4, #0]
 80026e8:	b91e      	cbnz	r6, 80026f2 <_printf_i+0x196>
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	f023 0320 	bic.w	r3, r3, #32
 80026f0:	6023      	str	r3, [r4, #0]
 80026f2:	2310      	movs	r3, #16
 80026f4:	e7b0      	b.n	8002658 <_printf_i+0xfc>
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	f043 0320 	orr.w	r3, r3, #32
 80026fc:	6023      	str	r3, [r4, #0]
 80026fe:	2378      	movs	r3, #120	; 0x78
 8002700:	4828      	ldr	r0, [pc, #160]	; (80027a4 <_printf_i+0x248>)
 8002702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002706:	e7e3      	b.n	80026d0 <_printf_i+0x174>
 8002708:	0659      	lsls	r1, r3, #25
 800270a:	bf48      	it	mi
 800270c:	b2b6      	uxthmi	r6, r6
 800270e:	e7e6      	b.n	80026de <_printf_i+0x182>
 8002710:	4615      	mov	r5, r2
 8002712:	e7bb      	b.n	800268c <_printf_i+0x130>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	6826      	ldr	r6, [r4, #0]
 8002718:	6961      	ldr	r1, [r4, #20]
 800271a:	1d18      	adds	r0, r3, #4
 800271c:	6028      	str	r0, [r5, #0]
 800271e:	0635      	lsls	r5, r6, #24
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	d501      	bpl.n	8002728 <_printf_i+0x1cc>
 8002724:	6019      	str	r1, [r3, #0]
 8002726:	e002      	b.n	800272e <_printf_i+0x1d2>
 8002728:	0670      	lsls	r0, r6, #25
 800272a:	d5fb      	bpl.n	8002724 <_printf_i+0x1c8>
 800272c:	8019      	strh	r1, [r3, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	6123      	str	r3, [r4, #16]
 8002732:	4615      	mov	r5, r2
 8002734:	e7ba      	b.n	80026ac <_printf_i+0x150>
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	1d1a      	adds	r2, r3, #4
 800273a:	602a      	str	r2, [r5, #0]
 800273c:	681d      	ldr	r5, [r3, #0]
 800273e:	6862      	ldr	r2, [r4, #4]
 8002740:	2100      	movs	r1, #0
 8002742:	4628      	mov	r0, r5
 8002744:	f7fd fd4c 	bl	80001e0 <memchr>
 8002748:	b108      	cbz	r0, 800274e <_printf_i+0x1f2>
 800274a:	1b40      	subs	r0, r0, r5
 800274c:	6060      	str	r0, [r4, #4]
 800274e:	6863      	ldr	r3, [r4, #4]
 8002750:	6123      	str	r3, [r4, #16]
 8002752:	2300      	movs	r3, #0
 8002754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002758:	e7a8      	b.n	80026ac <_printf_i+0x150>
 800275a:	6923      	ldr	r3, [r4, #16]
 800275c:	462a      	mov	r2, r5
 800275e:	4649      	mov	r1, r9
 8002760:	4640      	mov	r0, r8
 8002762:	47d0      	blx	sl
 8002764:	3001      	adds	r0, #1
 8002766:	d0ab      	beq.n	80026c0 <_printf_i+0x164>
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	079b      	lsls	r3, r3, #30
 800276c:	d413      	bmi.n	8002796 <_printf_i+0x23a>
 800276e:	68e0      	ldr	r0, [r4, #12]
 8002770:	9b03      	ldr	r3, [sp, #12]
 8002772:	4298      	cmp	r0, r3
 8002774:	bfb8      	it	lt
 8002776:	4618      	movlt	r0, r3
 8002778:	e7a4      	b.n	80026c4 <_printf_i+0x168>
 800277a:	2301      	movs	r3, #1
 800277c:	4632      	mov	r2, r6
 800277e:	4649      	mov	r1, r9
 8002780:	4640      	mov	r0, r8
 8002782:	47d0      	blx	sl
 8002784:	3001      	adds	r0, #1
 8002786:	d09b      	beq.n	80026c0 <_printf_i+0x164>
 8002788:	3501      	adds	r5, #1
 800278a:	68e3      	ldr	r3, [r4, #12]
 800278c:	9903      	ldr	r1, [sp, #12]
 800278e:	1a5b      	subs	r3, r3, r1
 8002790:	42ab      	cmp	r3, r5
 8002792:	dcf2      	bgt.n	800277a <_printf_i+0x21e>
 8002794:	e7eb      	b.n	800276e <_printf_i+0x212>
 8002796:	2500      	movs	r5, #0
 8002798:	f104 0619 	add.w	r6, r4, #25
 800279c:	e7f5      	b.n	800278a <_printf_i+0x22e>
 800279e:	bf00      	nop
 80027a0:	08002ac5 	.word	0x08002ac5
 80027a4:	08002ad6 	.word	0x08002ad6

080027a8 <memcpy>:
 80027a8:	440a      	add	r2, r1
 80027aa:	4291      	cmp	r1, r2
 80027ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80027b0:	d100      	bne.n	80027b4 <memcpy+0xc>
 80027b2:	4770      	bx	lr
 80027b4:	b510      	push	{r4, lr}
 80027b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027be:	4291      	cmp	r1, r2
 80027c0:	d1f9      	bne.n	80027b6 <memcpy+0xe>
 80027c2:	bd10      	pop	{r4, pc}

080027c4 <memmove>:
 80027c4:	4288      	cmp	r0, r1
 80027c6:	b510      	push	{r4, lr}
 80027c8:	eb01 0402 	add.w	r4, r1, r2
 80027cc:	d902      	bls.n	80027d4 <memmove+0x10>
 80027ce:	4284      	cmp	r4, r0
 80027d0:	4623      	mov	r3, r4
 80027d2:	d807      	bhi.n	80027e4 <memmove+0x20>
 80027d4:	1e43      	subs	r3, r0, #1
 80027d6:	42a1      	cmp	r1, r4
 80027d8:	d008      	beq.n	80027ec <memmove+0x28>
 80027da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027e2:	e7f8      	b.n	80027d6 <memmove+0x12>
 80027e4:	4402      	add	r2, r0
 80027e6:	4601      	mov	r1, r0
 80027e8:	428a      	cmp	r2, r1
 80027ea:	d100      	bne.n	80027ee <memmove+0x2a>
 80027ec:	bd10      	pop	{r4, pc}
 80027ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80027f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80027f6:	e7f7      	b.n	80027e8 <memmove+0x24>

080027f8 <_free_r>:
 80027f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027fa:	2900      	cmp	r1, #0
 80027fc:	d044      	beq.n	8002888 <_free_r+0x90>
 80027fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002802:	9001      	str	r0, [sp, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	f1a1 0404 	sub.w	r4, r1, #4
 800280a:	bfb8      	it	lt
 800280c:	18e4      	addlt	r4, r4, r3
 800280e:	f000 f913 	bl	8002a38 <__malloc_lock>
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <_free_r+0x94>)
 8002814:	9801      	ldr	r0, [sp, #4]
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	b933      	cbnz	r3, 8002828 <_free_r+0x30>
 800281a:	6063      	str	r3, [r4, #4]
 800281c:	6014      	str	r4, [r2, #0]
 800281e:	b003      	add	sp, #12
 8002820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002824:	f000 b90e 	b.w	8002a44 <__malloc_unlock>
 8002828:	42a3      	cmp	r3, r4
 800282a:	d908      	bls.n	800283e <_free_r+0x46>
 800282c:	6825      	ldr	r5, [r4, #0]
 800282e:	1961      	adds	r1, r4, r5
 8002830:	428b      	cmp	r3, r1
 8002832:	bf01      	itttt	eq
 8002834:	6819      	ldreq	r1, [r3, #0]
 8002836:	685b      	ldreq	r3, [r3, #4]
 8002838:	1949      	addeq	r1, r1, r5
 800283a:	6021      	streq	r1, [r4, #0]
 800283c:	e7ed      	b.n	800281a <_free_r+0x22>
 800283e:	461a      	mov	r2, r3
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	b10b      	cbz	r3, 8002848 <_free_r+0x50>
 8002844:	42a3      	cmp	r3, r4
 8002846:	d9fa      	bls.n	800283e <_free_r+0x46>
 8002848:	6811      	ldr	r1, [r2, #0]
 800284a:	1855      	adds	r5, r2, r1
 800284c:	42a5      	cmp	r5, r4
 800284e:	d10b      	bne.n	8002868 <_free_r+0x70>
 8002850:	6824      	ldr	r4, [r4, #0]
 8002852:	4421      	add	r1, r4
 8002854:	1854      	adds	r4, r2, r1
 8002856:	42a3      	cmp	r3, r4
 8002858:	6011      	str	r1, [r2, #0]
 800285a:	d1e0      	bne.n	800281e <_free_r+0x26>
 800285c:	681c      	ldr	r4, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	6053      	str	r3, [r2, #4]
 8002862:	4421      	add	r1, r4
 8002864:	6011      	str	r1, [r2, #0]
 8002866:	e7da      	b.n	800281e <_free_r+0x26>
 8002868:	d902      	bls.n	8002870 <_free_r+0x78>
 800286a:	230c      	movs	r3, #12
 800286c:	6003      	str	r3, [r0, #0]
 800286e:	e7d6      	b.n	800281e <_free_r+0x26>
 8002870:	6825      	ldr	r5, [r4, #0]
 8002872:	1961      	adds	r1, r4, r5
 8002874:	428b      	cmp	r3, r1
 8002876:	bf04      	itt	eq
 8002878:	6819      	ldreq	r1, [r3, #0]
 800287a:	685b      	ldreq	r3, [r3, #4]
 800287c:	6063      	str	r3, [r4, #4]
 800287e:	bf04      	itt	eq
 8002880:	1949      	addeq	r1, r1, r5
 8002882:	6021      	streq	r1, [r4, #0]
 8002884:	6054      	str	r4, [r2, #4]
 8002886:	e7ca      	b.n	800281e <_free_r+0x26>
 8002888:	b003      	add	sp, #12
 800288a:	bd30      	pop	{r4, r5, pc}
 800288c:	200001b0 	.word	0x200001b0

08002890 <sbrk_aligned>:
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	4e0e      	ldr	r6, [pc, #56]	; (80028cc <sbrk_aligned+0x3c>)
 8002894:	460c      	mov	r4, r1
 8002896:	6831      	ldr	r1, [r6, #0]
 8002898:	4605      	mov	r5, r0
 800289a:	b911      	cbnz	r1, 80028a2 <sbrk_aligned+0x12>
 800289c:	f000 f8bc 	bl	8002a18 <_sbrk_r>
 80028a0:	6030      	str	r0, [r6, #0]
 80028a2:	4621      	mov	r1, r4
 80028a4:	4628      	mov	r0, r5
 80028a6:	f000 f8b7 	bl	8002a18 <_sbrk_r>
 80028aa:	1c43      	adds	r3, r0, #1
 80028ac:	d00a      	beq.n	80028c4 <sbrk_aligned+0x34>
 80028ae:	1cc4      	adds	r4, r0, #3
 80028b0:	f024 0403 	bic.w	r4, r4, #3
 80028b4:	42a0      	cmp	r0, r4
 80028b6:	d007      	beq.n	80028c8 <sbrk_aligned+0x38>
 80028b8:	1a21      	subs	r1, r4, r0
 80028ba:	4628      	mov	r0, r5
 80028bc:	f000 f8ac 	bl	8002a18 <_sbrk_r>
 80028c0:	3001      	adds	r0, #1
 80028c2:	d101      	bne.n	80028c8 <sbrk_aligned+0x38>
 80028c4:	f04f 34ff 	mov.w	r4, #4294967295
 80028c8:	4620      	mov	r0, r4
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
 80028cc:	200001b4 	.word	0x200001b4

080028d0 <_malloc_r>:
 80028d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028d4:	1ccd      	adds	r5, r1, #3
 80028d6:	f025 0503 	bic.w	r5, r5, #3
 80028da:	3508      	adds	r5, #8
 80028dc:	2d0c      	cmp	r5, #12
 80028de:	bf38      	it	cc
 80028e0:	250c      	movcc	r5, #12
 80028e2:	2d00      	cmp	r5, #0
 80028e4:	4607      	mov	r7, r0
 80028e6:	db01      	blt.n	80028ec <_malloc_r+0x1c>
 80028e8:	42a9      	cmp	r1, r5
 80028ea:	d905      	bls.n	80028f8 <_malloc_r+0x28>
 80028ec:	230c      	movs	r3, #12
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	2600      	movs	r6, #0
 80028f2:	4630      	mov	r0, r6
 80028f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028f8:	4e2e      	ldr	r6, [pc, #184]	; (80029b4 <_malloc_r+0xe4>)
 80028fa:	f000 f89d 	bl	8002a38 <__malloc_lock>
 80028fe:	6833      	ldr	r3, [r6, #0]
 8002900:	461c      	mov	r4, r3
 8002902:	bb34      	cbnz	r4, 8002952 <_malloc_r+0x82>
 8002904:	4629      	mov	r1, r5
 8002906:	4638      	mov	r0, r7
 8002908:	f7ff ffc2 	bl	8002890 <sbrk_aligned>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	4604      	mov	r4, r0
 8002910:	d14d      	bne.n	80029ae <_malloc_r+0xde>
 8002912:	6834      	ldr	r4, [r6, #0]
 8002914:	4626      	mov	r6, r4
 8002916:	2e00      	cmp	r6, #0
 8002918:	d140      	bne.n	800299c <_malloc_r+0xcc>
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	4631      	mov	r1, r6
 800291e:	4638      	mov	r0, r7
 8002920:	eb04 0803 	add.w	r8, r4, r3
 8002924:	f000 f878 	bl	8002a18 <_sbrk_r>
 8002928:	4580      	cmp	r8, r0
 800292a:	d13a      	bne.n	80029a2 <_malloc_r+0xd2>
 800292c:	6821      	ldr	r1, [r4, #0]
 800292e:	3503      	adds	r5, #3
 8002930:	1a6d      	subs	r5, r5, r1
 8002932:	f025 0503 	bic.w	r5, r5, #3
 8002936:	3508      	adds	r5, #8
 8002938:	2d0c      	cmp	r5, #12
 800293a:	bf38      	it	cc
 800293c:	250c      	movcc	r5, #12
 800293e:	4629      	mov	r1, r5
 8002940:	4638      	mov	r0, r7
 8002942:	f7ff ffa5 	bl	8002890 <sbrk_aligned>
 8002946:	3001      	adds	r0, #1
 8002948:	d02b      	beq.n	80029a2 <_malloc_r+0xd2>
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	442b      	add	r3, r5
 800294e:	6023      	str	r3, [r4, #0]
 8002950:	e00e      	b.n	8002970 <_malloc_r+0xa0>
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	1b52      	subs	r2, r2, r5
 8002956:	d41e      	bmi.n	8002996 <_malloc_r+0xc6>
 8002958:	2a0b      	cmp	r2, #11
 800295a:	d916      	bls.n	800298a <_malloc_r+0xba>
 800295c:	1961      	adds	r1, r4, r5
 800295e:	42a3      	cmp	r3, r4
 8002960:	6025      	str	r5, [r4, #0]
 8002962:	bf18      	it	ne
 8002964:	6059      	strne	r1, [r3, #4]
 8002966:	6863      	ldr	r3, [r4, #4]
 8002968:	bf08      	it	eq
 800296a:	6031      	streq	r1, [r6, #0]
 800296c:	5162      	str	r2, [r4, r5]
 800296e:	604b      	str	r3, [r1, #4]
 8002970:	4638      	mov	r0, r7
 8002972:	f104 060b 	add.w	r6, r4, #11
 8002976:	f000 f865 	bl	8002a44 <__malloc_unlock>
 800297a:	f026 0607 	bic.w	r6, r6, #7
 800297e:	1d23      	adds	r3, r4, #4
 8002980:	1af2      	subs	r2, r6, r3
 8002982:	d0b6      	beq.n	80028f2 <_malloc_r+0x22>
 8002984:	1b9b      	subs	r3, r3, r6
 8002986:	50a3      	str	r3, [r4, r2]
 8002988:	e7b3      	b.n	80028f2 <_malloc_r+0x22>
 800298a:	6862      	ldr	r2, [r4, #4]
 800298c:	42a3      	cmp	r3, r4
 800298e:	bf0c      	ite	eq
 8002990:	6032      	streq	r2, [r6, #0]
 8002992:	605a      	strne	r2, [r3, #4]
 8002994:	e7ec      	b.n	8002970 <_malloc_r+0xa0>
 8002996:	4623      	mov	r3, r4
 8002998:	6864      	ldr	r4, [r4, #4]
 800299a:	e7b2      	b.n	8002902 <_malloc_r+0x32>
 800299c:	4634      	mov	r4, r6
 800299e:	6876      	ldr	r6, [r6, #4]
 80029a0:	e7b9      	b.n	8002916 <_malloc_r+0x46>
 80029a2:	230c      	movs	r3, #12
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	4638      	mov	r0, r7
 80029a8:	f000 f84c 	bl	8002a44 <__malloc_unlock>
 80029ac:	e7a1      	b.n	80028f2 <_malloc_r+0x22>
 80029ae:	6025      	str	r5, [r4, #0]
 80029b0:	e7de      	b.n	8002970 <_malloc_r+0xa0>
 80029b2:	bf00      	nop
 80029b4:	200001b0 	.word	0x200001b0

080029b8 <_realloc_r>:
 80029b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029bc:	4680      	mov	r8, r0
 80029be:	4614      	mov	r4, r2
 80029c0:	460e      	mov	r6, r1
 80029c2:	b921      	cbnz	r1, 80029ce <_realloc_r+0x16>
 80029c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029c8:	4611      	mov	r1, r2
 80029ca:	f7ff bf81 	b.w	80028d0 <_malloc_r>
 80029ce:	b92a      	cbnz	r2, 80029dc <_realloc_r+0x24>
 80029d0:	f7ff ff12 	bl	80027f8 <_free_r>
 80029d4:	4625      	mov	r5, r4
 80029d6:	4628      	mov	r0, r5
 80029d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029dc:	f000 f838 	bl	8002a50 <_malloc_usable_size_r>
 80029e0:	4284      	cmp	r4, r0
 80029e2:	4607      	mov	r7, r0
 80029e4:	d802      	bhi.n	80029ec <_realloc_r+0x34>
 80029e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80029ea:	d812      	bhi.n	8002a12 <_realloc_r+0x5a>
 80029ec:	4621      	mov	r1, r4
 80029ee:	4640      	mov	r0, r8
 80029f0:	f7ff ff6e 	bl	80028d0 <_malloc_r>
 80029f4:	4605      	mov	r5, r0
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d0ed      	beq.n	80029d6 <_realloc_r+0x1e>
 80029fa:	42bc      	cmp	r4, r7
 80029fc:	4622      	mov	r2, r4
 80029fe:	4631      	mov	r1, r6
 8002a00:	bf28      	it	cs
 8002a02:	463a      	movcs	r2, r7
 8002a04:	f7ff fed0 	bl	80027a8 <memcpy>
 8002a08:	4631      	mov	r1, r6
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f7ff fef4 	bl	80027f8 <_free_r>
 8002a10:	e7e1      	b.n	80029d6 <_realloc_r+0x1e>
 8002a12:	4635      	mov	r5, r6
 8002a14:	e7df      	b.n	80029d6 <_realloc_r+0x1e>
	...

08002a18 <_sbrk_r>:
 8002a18:	b538      	push	{r3, r4, r5, lr}
 8002a1a:	4d06      	ldr	r5, [pc, #24]	; (8002a34 <_sbrk_r+0x1c>)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	4604      	mov	r4, r0
 8002a20:	4608      	mov	r0, r1
 8002a22:	602b      	str	r3, [r5, #0]
 8002a24:	f7fe f974 	bl	8000d10 <_sbrk>
 8002a28:	1c43      	adds	r3, r0, #1
 8002a2a:	d102      	bne.n	8002a32 <_sbrk_r+0x1a>
 8002a2c:	682b      	ldr	r3, [r5, #0]
 8002a2e:	b103      	cbz	r3, 8002a32 <_sbrk_r+0x1a>
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	bd38      	pop	{r3, r4, r5, pc}
 8002a34:	200001b8 	.word	0x200001b8

08002a38 <__malloc_lock>:
 8002a38:	4801      	ldr	r0, [pc, #4]	; (8002a40 <__malloc_lock+0x8>)
 8002a3a:	f000 b811 	b.w	8002a60 <__retarget_lock_acquire_recursive>
 8002a3e:	bf00      	nop
 8002a40:	200001bc 	.word	0x200001bc

08002a44 <__malloc_unlock>:
 8002a44:	4801      	ldr	r0, [pc, #4]	; (8002a4c <__malloc_unlock+0x8>)
 8002a46:	f000 b80c 	b.w	8002a62 <__retarget_lock_release_recursive>
 8002a4a:	bf00      	nop
 8002a4c:	200001bc 	.word	0x200001bc

08002a50 <_malloc_usable_size_r>:
 8002a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a54:	1f18      	subs	r0, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bfbc      	itt	lt
 8002a5a:	580b      	ldrlt	r3, [r1, r0]
 8002a5c:	18c0      	addlt	r0, r0, r3
 8002a5e:	4770      	bx	lr

08002a60 <__retarget_lock_acquire_recursive>:
 8002a60:	4770      	bx	lr

08002a62 <__retarget_lock_release_recursive>:
 8002a62:	4770      	bx	lr

08002a64 <_init>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	bf00      	nop
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr

08002a70 <_fini>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	bf00      	nop
 8002a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a76:	bc08      	pop	{r3}
 8002a78:	469e      	mov	lr, r3
 8002a7a:	4770      	bx	lr
