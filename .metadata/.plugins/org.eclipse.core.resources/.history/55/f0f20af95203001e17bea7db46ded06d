/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

TIM_HandleTypeDef htim2;

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for checkButtonTask */
osThreadId_t checkButtonTaskHandle;
const osThreadAttr_t checkButtonTask_attributes = {
  .name = "checkButtonTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for emergencyStopTa */
osThreadId_t emergencyStopTaHandle;
const osThreadAttr_t emergencyStopTa_attributes = {
  .name = "emergencyStopTa",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityAboveNormal,
};
/* Definitions for receiveJetson */
osThreadId_t receiveJetsonHandle;
const osThreadAttr_t receiveJetson_attributes = {
  .name = "receiveJetson",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for transmitJetson */
osThreadId_t transmitJetsonHandle;
const osThreadAttr_t transmitJetson_attributes = {
  .name = "transmitJetson",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for gripperTask */
osThreadId_t gripperTaskHandle;
const osThreadAttr_t gripperTask_attributes = {
  .name = "gripperTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for artTask */
osThreadId_t artTaskHandle;
const osThreadAttr_t artTask_attributes = {
  .name = "artTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for TaskADC_Gripper */
osThreadId_t TaskADC_GripperHandle;
const osThreadAttr_t TaskADC_Gripper_attributes = {
  .name = "TaskADC_Gripper",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for TaskADC_Art */
osThreadId_t TaskADC_ArtHandle;
const osThreadAttr_t TaskADC_Art_attributes = {
  .name = "TaskADC_Art",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for ADC_ConversionC */
osThreadId_t ADC_ConversionCHandle;
const osThreadAttr_t ADC_ConversionC_attributes = {
  .name = "ADC_ConversionC",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* USER CODE BEGIN PV */
uint16_t adcGripper, adcArt, task_adcGripper, task_adcArt;
int pwmGripper = 0, pwmArt = 0;
volatile uint16_t adcVal[2];

int gripperOpen = 70, gripperClose = 123, artUp = 197, artDown = 83;
int comm[2];
int gripperFlag = 0, artFlag = 0, stopFlag = 0;
int gripperOK = 0, artOK = 0, stopOK = 0, objectHeld = 0;
int okFlags[4];


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
void StartDefaultTask(void *argument);
void StartCheckButton(void *argument);
void StartEmergencyStop(void *argument);
void StartReceiveJetson(void *argument);
void StartTransmitJetson(void *argument);
void StartGripper(void *argument);
void StartArt(void *argument);
void StartADCGripper(void *argument);
void StartADCArt(void *argument);
void StartADC_ConversionComplete(void *argument);

/* USER CODE BEGIN PFP */
void write(void);
void read(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of checkButtonTask */
  checkButtonTaskHandle = osThreadNew(StartCheckButton, NULL, &checkButtonTask_attributes);

  /* creation of emergencyStopTa */
  emergencyStopTaHandle = osThreadNew(StartEmergencyStop, NULL, &emergencyStopTa_attributes);

  /* creation of receiveJetson */
  receiveJetsonHandle = osThreadNew(StartReceiveJetson, NULL, &receiveJetson_attributes);

  /* creation of transmitJetson */
  transmitJetsonHandle = osThreadNew(StartTransmitJetson, NULL, &transmitJetson_attributes);

  /* creation of gripperTask */
  gripperTaskHandle = osThreadNew(StartGripper, NULL, &gripperTask_attributes);

  /* creation of artTask */
  artTaskHandle = osThreadNew(StartArt, NULL, &artTask_attributes);

  /* creation of TaskADC_Gripper */
  TaskADC_GripperHandle = osThreadNew(StartADCGripper, NULL, &TaskADC_Gripper_attributes);

  /* creation of TaskADC_Art */
  TaskADC_ArtHandle = osThreadNew(StartADCArt, NULL, &TaskADC_Art_attributes);

  /* creation of ADC_ConversionC */
  ADC_ConversionCHandle = osThreadNew(StartADC_ConversionComplete, NULL, &ADC_ConversionC_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 64;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 2499;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adcGripper = adcVal[0];
	adcArt = adcVal[1];
}

void write() {
    gripperOK = okFlags[0];
    artOK = okFlags[1];
    objectHeld = okFlags[2];
    stopOK = okFlags[3];
}

void read() {
    comm[0] = 1;
    comm[1] = 2;
}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartCheckButton */
/**
* @brief Function implementing the checkButtonTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCheckButton */
void StartCheckButton(void *argument)
{
  /* USER CODE BEGIN StartCheckButton */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET){
	 		  objectHeld = 0;
	 	  }
	 	  else{
	 		  objectHeld = 1;
	 	  }
	     osDelay(1);

  }
  /* USER CODE END StartCheckButton */
}

/* USER CODE BEGIN Header_StartEmergencyStop */
/**
* @brief Function implementing the emergencyStopTa thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEmergencyStop */
void StartEmergencyStop(void *argument)
{
  /* USER CODE BEGIN StartEmergencyStop */
  /* Infinite loop */
  for(;;)
  {
	  if(stopFlag == 1){
		  gripperFlag = 0;
		  artFlag = 0;
		  stopFlag = 0;
	  }
    osDelay(1);
  }
  /* USER CODE END StartEmergencyStop */
}

/* USER CODE BEGIN Header_StartReceiveJetson */
/**
* @brief Function implementing the receiveJetson thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveJetson */
void StartReceiveJetson(void *argument)
{
  /* USER CODE BEGIN StartReceiveJetson */
  /* Infinite loop */
  for(;;)
  {
//	  for (int i = 0; i < 2; i++) {
//	      comm[i] = read();
//	  }
	  read();
	  switch (comm[0]){
		case 1:
			if (comm[1]==1)
			{
				gripperFlag = 1;
			}
			else if (comm[1]==2)
			{
				gripperFlag = 2;
			}
			else
			{
				gripperFlag = 0;
			}
			break;
		case 2:
			if (comm[1]==1)
			{
				artFlag = 1;
			}
			else if (comm[1]==2)
			{
				artFlag = 2;
			}
			else
			{
				artFlag = 0;
			}
			break;
		case 3:
			stopFlag = 1;
			break;
		default:
			gripperFlag = 0;
			artFlag = 0;
			stopFlag = 0;
	  }
    osDelay(1);
  }
  /* USER CODE END StartReceiveJetson */
}

/* USER CODE BEGIN Header_StartTransmitJetson */
/**
* @brief Function implementing the transmitJetson thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitJetson */
void StartTransmitJetson(void *argument)
{
  /* USER CODE BEGIN StartTransmitJetson */
  /* Infinite loop */
  for(;;)
  {
	  if (gripperOK == 1)
	  {
		  okFlags[0]= gripperOK;
		  write();
		  gripperOK = 0;
	  }
	  if (artOK == 1)
	  {
	  	  okFlags[1]= artOK;
	  	  write();
	  	  artOK = 0;
	  }
	  if (objectHeld == 1)
	  {
	  	  okFlags[2]= objectHeld;
	  	  write();
	  }
	  if (stopOK == 1)
	  {
	  	  okFlags[3]= stopOK;
	  	  write();
	  	  stopOK = 0;
	  }
    osDelay(10);
  }
  /* USER CODE END StartTransmitJetson */
}

/* USER CODE BEGIN Header_StartGripper */
/**
* @brief Function implementing the gripperTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripper */
void StartGripper(void *argument)
{
  /* USER CODE BEGIN StartGripper */
  /* Infinite loop */
  for(;;)
  {
	  if(gripperFlag == 1)
	  {
		  TIM2->CCR1 = gripperOpen;
		  osDelay(50);
		  gripperFlag = 0;
		  gripperOK = 1;
	  }
	  else if (gripperFlag == 2)
	  {
		  TIM2->CCR1 = gripperClose;
		  osDelay(50);
		  gripperFlag = 0;
		  gripperOK = 1;
	  }
    osDelay(1);
  }
  /* USER CODE END StartGripper */
}

/* USER CODE BEGIN Header_StartArt */
/**
* @brief Function implementing the artTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArt */
void StartArt(void *argument)
{
  /* USER CODE BEGIN StartArt */
  /* Infinite loop */
  for(;;)
  {
	  if(artFlag == 1)
	  	  {
	  		  TIM2->CCR2 = artUp;
	  		  osDelay(50);
	  		  artFlag = 0;
	  		  artOK = 1;
	  	  }
	 else if (artFlag == 2)
	  	  {
	  		  TIM2->CCR2 = artDown;
	  		  osDelay(50);
	  		  artFlag = 0;
	  		  artOK = 1;
	  	  }
	 osDelay(1);
  }
  /* USER CODE END StartArt */
}

/* USER CODE BEGIN Header_StartADCGripper */
/**
* @brief Function implementing the TaskADC_Gripper thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADCGripper */
void StartADCGripper(void *argument)
{
  /* USER CODE BEGIN StartADCGripper */
  /* Infinite loop */
  for(;;)
  {
	  task_adcGripper = adcGripper;
	 	      osDelay(100);

  }
  /* USER CODE END StartADCGripper */
}

/* USER CODE BEGIN Header_StartADCArt */
/**
* @brief Function implementing the TaskADC_Art thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADCArt */
void StartADCArt(void *argument)
{
  /* USER CODE BEGIN StartADCArt */
  /* Infinite loop */
  for(;;)
  {
	  task_adcArt = adcArt;
	 	    osDelay(200);
  }
  /* USER CODE END StartADCArt */
}

/* USER CODE BEGIN Header_StartADC_ConversionComplete */
/**
* @brief Function implementing the ADC_ConversionC thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC_ConversionComplete */
void StartADC_ConversionComplete(void *argument)
{
  /* USER CODE BEGIN StartADC_ConversionComplete */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adcVal, 2);
	 	      osDelay(100);

  }
  /* USER CODE END StartADC_ConversionComplete */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM5 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
