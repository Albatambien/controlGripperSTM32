
proyecto_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e4  080024e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024ec  080024ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f0  080024f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080024f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08002564  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002564  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000433a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010e7  00000000  00000000  000243da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  000254c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000420  00000000  00000000  00025990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015528  00000000  00000000  00025db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005993  00000000  00000000  0003b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008361f  00000000  00000000  00040c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c428a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001548  00000000  00000000  000c42dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002478 	.word	0x08002478

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002478 	.word	0x08002478

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd_begin>:
static void lcd_sendCmd(LCD_t *lcd, char cmd);
static void delay_us(uint16_t time);

/* Exported functions --------------------------------------------------------*/
//init lcd display
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	4608      	mov	r0, r1
 800058e:	4611      	mov	r1, r2
 8000590:	461a      	mov	r2, r3
 8000592:	4603      	mov	r3, r0
 8000594:	70fb      	strb	r3, [r7, #3]
 8000596:	460b      	mov	r3, r1
 8000598:	70bb      	strb	r3, [r7, #2]
 800059a:	4613      	mov	r3, r2
 800059c:	707b      	strb	r3, [r7, #1]
	// 4 bit initialization
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 80005a6:	78bb      	ldrb	r3, [r7, #2]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d908      	bls.n	80005be <lcd_begin+0x3a>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	lcd->rows = rows;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	78ba      	ldrb	r2, [r7, #2]
 80005c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	lcd->cols = cols;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	78fa      	ldrb	r2, [r7, #3]
 80005ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd_setRowOffsets(lcd, 0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80005ce:	78fa      	ldrb	r2, [r7, #3]
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	3340      	adds	r3, #64	; 0x40
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4613      	mov	r3, r2
 80005d8:	2240      	movs	r2, #64	; 0x40
 80005da:	2100      	movs	r1, #0
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f8c4 	bl	800076a <lcd_setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 80005e2:	787b      	ldrb	r3, [r7, #1]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00b      	beq.n	8000600 <lcd_begin+0x7c>
 80005e8:	78bb      	ldrb	r3, [r7, #2]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d108      	bne.n	8000600 <lcd_begin+0x7c>
		lcd->displayfunction |= LCD_5x10DOTS;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	HAL_Delay(50);	// wait for >40ms
 8000600:	2032      	movs	r0, #50	; 0x32
 8000602:	f000 fbc1 	bl	8000d88 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 8000606:	2103      	movs	r1, #3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f948 	bl	800089e <lcd_sendCmd>
	HAL_Delay(5);		// wait for >4.1ms
 800060e:	2005      	movs	r0, #5
 8000610:	f000 fbba 	bl	8000d88 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 8000614:	2103      	movs	r1, #3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f941 	bl	800089e <lcd_sendCmd>
	delay_us(150);	// wait for >100us
 800061c:	2096      	movs	r0, #150	; 0x96
 800061e:	f000 f95b 	bl	80008d8 <delay_us>
	lcd_sendCmd(lcd, 0x03);
 8000622:	2103      	movs	r1, #3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f93a 	bl	800089e <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 800062a:	2102      	movs	r1, #2
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 f936 	bl	800089e <lcd_sendCmd>
	HAL_Delay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f000 fba8 	bl	8000d88 <HAL_Delay>

	// finally, set interface type, # lines and font size
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800063e:	f043 0320 	orr.w	r3, r3, #32
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f929 	bl	800089e <lcd_sendCmd>
	//set display control D=1,C=0, B=0, display on, cursor off and cursor blink off
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2204      	movs	r2, #4
 8000650:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_display(lcd);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 f824 	bl	80006a2 <lcd_display>
	lcd_clear(lcd);  // clear display
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f815 	bl	800068a <lcd_clear>
	HAL_Delay(2);
 8000660:	2002      	movs	r0, #2
 8000662:	f000 fb91 	bl	8000d88 <HAL_Delay>
	// set the entry mode --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2202      	movs	r2, #2
 800066a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4619      	mov	r1, r3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f90e 	bl	800089e <lcd_sendCmd>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <lcd_clear>:
// ----------------------------------------------------------------

//clear lcd display
void lcd_clear(LCD_t *lcd) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 8000692:	2101      	movs	r1, #1
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f902 	bl	800089e <lcd_sendCmd>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <lcd_display>:
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
// ----------------------------------------------------------------

// Turn the display on
void lcd_display(LCD_t *lcd) {
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f8e7 	bl	800089e <lcd_sendCmd>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <lcd_setCursor>:
	lcd_sendCmd(lcd, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}
// ----------------------------------------------------------------

//set cursor position
void lcd_setCursor(LCD_t *lcd, uint8_t col, uint8_t row) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
 80006e4:	4613      	mov	r3, r2
 80006e6:	70bb      	strb	r3, [r7, #2]
	const size_t max_rows = sizeof(lcd->row_offsets) / sizeof(*lcd->row_offsets);
 80006e8:	2304      	movs	r3, #4
 80006ea:	60fb      	str	r3, [r7, #12]
	if (row >= max_rows) {
 80006ec:	78bb      	ldrb	r3, [r7, #2]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d803      	bhi.n	80006fc <lcd_setCursor+0x24>
		row = max_rows - 1;    // we count rows starting w/0
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	3b01      	subs	r3, #1
 80006fa:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= lcd->rows) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000702:	78ba      	ldrb	r2, [r7, #2]
 8000704:	429a      	cmp	r2, r3
 8000706:	d304      	bcc.n	8000712 <lcd_setCursor+0x3a>
		row = lcd->rows - 1;    // we count rows starting w/0
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800070e:	3b01      	subs	r3, #1
 8000710:	70bb      	strb	r3, [r7, #2]
	}

	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 8000712:	78bb      	ldrb	r3, [r7, #2]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	4413      	add	r3, r2
 8000720:	b2db      	uxtb	r3, r3
 8000722:	b25b      	sxtb	r3, r3
 8000724:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000728:	b25b      	sxtb	r3, r3
 800072a:	b2db      	uxtb	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f8b5 	bl	800089e <lcd_sendCmd>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <lcd_print>:
// ----------------------------------------------------------------

//send strings to lcd
void lcd_print(LCD_t *lcd, char *str) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	while (*str)
 8000746:	e007      	b.n	8000758 <lcd_print+0x1c>
		lcd_sendData(lcd, *str++);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	603a      	str	r2, [r7, #0]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 f886 	bl	8000864 <lcd_sendData>
	while (*str)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f3      	bne.n	8000748 <lcd_print+0xc>
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <lcd_setRowOffsets>:
// ----------------------------------------------------------------

/* Privated functions --------------------------------------------------------*/
//set row offset for diferent display
static void lcd_setRowOffsets(LCD_t *lcd, int row0, int row1, int row2,
    int row3) {
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	603b      	str	r3, [r7, #0]
	lcd->row_offsets[0] = row0;
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->row_offsets[1] = row1;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->row_offsets[2] = row2;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->row_offsets[3] = row3;
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <lcd_send>:
// ----------------------------------------------------------------

//send info to lcd in 4 byte mode
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
 80007b8:	4613      	mov	r3, r2
 80007ba:	70bb      	strb	r3, [r7, #2]
	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	78ba      	ldrb	r2, [r7, #2]
 80007c6:	4619      	mov	r1, r3
 80007c8:	f000 fd6c 	bl	80012a4 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	f000 fd5f 	bl	80012a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	089b      	lsrs	r3, r3, #2
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	f000 fd52 	bl	80012a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6a18      	ldr	r0, [r3, #32]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	085b      	lsrs	r3, r3, #1
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	461a      	mov	r2, r3
 8000816:	f000 fd45 	bl	80012a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6998      	ldr	r0, [r3, #24]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	8b99      	ldrh	r1, [r3, #28]
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	f000 fd3a 	bl	80012a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6918      	ldr	r0, [r3, #16]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	8a9b      	ldrh	r3, [r3, #20]
 8000838:	2201      	movs	r2, #1
 800083a:	4619      	mov	r1, r3
 800083c:	f000 fd32 	bl	80012a4 <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 8000840:	2001      	movs	r0, #1
 8000842:	f000 f849 	bl	80008d8 <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6918      	ldr	r0, [r3, #16]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	8a9b      	ldrh	r3, [r3, #20]
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	f000 fd27 	bl	80012a4 <HAL_GPIO_WritePin>
	delay_us(50);	// commands need > 37us to settle
 8000856:	2032      	movs	r0, #50	; 0x32
 8000858:	f000 f83e 	bl	80008d8 <delay_us>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <lcd_sendData>:
// ----------------------------------------------------------------

//send data to lcd
static void lcd_sendData(LCD_t *lcd, char data) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
	char _data;

	// send higher nibble
	_data = ((data >> 4) & 0x0f);
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	091b      	lsrs	r3, r3, #4
 8000874:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	2201      	movs	r2, #1
 800087a:	4619      	mov	r1, r3
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff95 	bl	80007ac <lcd_send>

	// send Lower nibble
	_data = ((data) & 0x0f);
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2201      	movs	r2, #1
 800088e:	4619      	mov	r1, r3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff8b 	bl	80007ac <lcd_send>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <lcd_sendCmd>:
// ----------------------------------------------------------------

//send command to lcd
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	460b      	mov	r3, r1
 80008a8:	70fb      	strb	r3, [r7, #3]
	char _cmd;

	// send higher nibble
	_cmd = ((cmd >> 4) & 0x0f);
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	091b      	lsrs	r3, r3, #4
 80008ae:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	2200      	movs	r2, #0
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ff78 	bl	80007ac <lcd_send>

	// send Lower nibble
	_cmd = ((cmd) & 0x0f);
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2200      	movs	r2, #0
 80008c8:	4619      	mov	r1, r3
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ff6e 	bl	80007ac <lcd_send>
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <delay_us>:
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 80008e2:	f001 f91d 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <delay_us+0x44>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	0c9b      	lsrs	r3, r3, #18
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	88fa      	ldrh	r2, [r7, #6]
 80008f4:	fb12 f303 	smulbb	r3, r2, r3
 80008f8:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < delay; i += 14) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e003      	b.n	8000908 <delay_us+0x30>
		__ASM("NOP");
 8000900:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	330e      	adds	r3, #14
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	897b      	ldrh	r3, [r7, #10]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbf7      	blt.n	8000900 <delay_us+0x28>
	}
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	431bde83 	.word	0x431bde83

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000924:	f000 f9be 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000928:	f000 f850 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092c:	f000 f8ac 	bl	8000a88 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //--------------------------------LCD SETTINGS-------------------------------------
  lcd.RS_port = LCD_RS_GPIO_Port;
 8000930:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <main+0x98>)
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <main+0x9c>)
 8000934:	601a      	str	r2, [r3, #0]
  lcd.RS_pin = LCD_RS_Pin;
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <main+0x98>)
 8000938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093c:	809a      	strh	r2, [r3, #4]
  lcd.EN_port = LCD_EN_GPIO_Port;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <main+0x98>)
 8000940:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <main+0x9c>)
 8000942:	611a      	str	r2, [r3, #16]
  lcd.EN_pin = LCD_EN_Pin;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <main+0x98>)
 8000946:	2202      	movs	r2, #2
 8000948:	829a      	strh	r2, [r3, #20]
  lcd.D4_port = LCD_D4_GPIO_Port;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <main+0x98>)
 800094c:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <main+0x9c>)
 800094e:	619a      	str	r2, [r3, #24]
  lcd.D4_pin = LCD_D4_Pin;
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <main+0x98>)
 8000952:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000956:	839a      	strh	r2, [r3, #28]
  lcd.D5_port = LCD_D5_GPIO_Port;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <main+0x98>)
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <main+0x9c>)
 800095c:	621a      	str	r2, [r3, #32]
  lcd.D5_pin = LCD_D5_Pin;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <main+0x98>)
 8000960:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000964:	849a      	strh	r2, [r3, #36]	; 0x24
  lcd.D6_port = LCD_D6_GPIO_Port;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <main+0x98>)
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <main+0x9c>)
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  lcd.D6_pin = LCD_D6_Pin;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <main+0x98>)
 800096e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000972:	859a      	strh	r2, [r3, #44]	; 0x2c
  lcd.D7_port = LCD_D7_GPIO_Port;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <main+0x98>)
 8000976:	4a11      	ldr	r2, [pc, #68]	; (80009bc <main+0x9c>)
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  lcd.D7_pin = LCD_D7_Pin;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <main+0x98>)
 800097c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000980:	869a      	strh	r2, [r3, #52]	; 0x34

  //--------INICIALIZANDO EL LCD------------
  lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000982:	2300      	movs	r3, #0
 8000984:	2202      	movs	r2, #2
 8000986:	2110      	movs	r1, #16
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <main+0x98>)
 800098a:	f7ff fdfb 	bl	8000584 <lcd_begin>

  //--------PRUEBA--------
  //lcd_setCursor(&lcd, 0, 0);
  //lcd_print(&lcd, "Primer prueba");
  lcd_setCursor(&lcd, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <main+0x98>)
 8000994:	f7ff fea0 	bl	80006d8 <lcd_setCursor>
  //lectura = "Lectura: %hu " + adcIn;
  //lcd_print(&lcd, lectura);
  //lcd_print(&lcd, "de funcionamiento");

  sprintf(buffer, "Mi variable: %u", adcIn);
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <main+0xa0>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4909      	ldr	r1, [pc, #36]	; (80009c4 <main+0xa4>)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <main+0xa8>)
 80009a2:	f001 f8fb 	bl	8001b9c <siprintf>
  // Imprime el mensaje en la LCD
  lcd_print(&lcd, buffer);
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <main+0xa8>)
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <main+0x98>)
 80009aa:	f7ff fec7 	bl	800073c <lcd_print>
  HAL_Delay(500);
 80009ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b2:	f000 f9e9 	bl	8000d88 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <main+0x96>
 80009b8:	2000008c 	.word	0x2000008c
 80009bc:	40020400 	.word	0x40020400
 80009c0:	200000cc 	.word	0x200000cc
 80009c4:	08002490 	.word	0x08002490
 80009c8:	200000d0 	.word	0x200000d0

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	; 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2230      	movs	r2, #48	; 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f8d6 	bl	8001b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <SystemClock_Config+0xb4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <SystemClock_Config+0xb4>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <SystemClock_Config+0xb4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <SystemClock_Config+0xb8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <SystemClock_Config+0xb8>)
 8000a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <SystemClock_Config+0xb8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	2310      	movs	r3, #16
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0320 	add.w	r3, r7, #32
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fc4b 	bl	80012d8 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a48:	f000 f862 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 feae 	bl	80017c8 <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a72:	f000 f84d 	bl	8000b10 <Error_Handler>
  }
}
 8000a76:	bf00      	nop
 8000a78:	3750      	adds	r7, #80	; 0x50
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40007000 	.word	0x40007000

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_GPIO_Init+0x80>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <MX_GPIO_Init+0x80>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_GPIO_Init+0x80>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_GPIO_Init+0x80>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <MX_GPIO_Init+0x80>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_GPIO_Init+0x80>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|LCD_D7_Pin|LCD_D6_Pin
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f24f 4102 	movw	r1, #62466	; 0xf402
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <MX_GPIO_Init+0x84>)
 8000ade:	f000 fbe1 	bl	80012a4 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D7_Pin LCD_D6_Pin
                           LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D7_Pin|LCD_D6_Pin
 8000ae2:	f24f 4302 	movw	r3, #62466	; 0xf402
 8000ae6:	60fb      	str	r3, [r7, #12]
                          |LCD_D5_Pin|LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_GPIO_Init+0x84>)
 8000afc:	f000 fa4e 	bl	8000f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f8c6 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f000 ffa2 	bl	8001b38 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20020000 	.word	0x20020000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	200000e0 	.word	0x200000e0
 8000c28:	200000f8 	.word	0x200000f8

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd7 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f000 ff61 	bl	8001b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fe4d 	bl	8000920 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c94:	080024f4 	.word	0x080024f4
  ldr r2, =_sbss
 8000c98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c9c:	200000f8 	.word	0x200000f8

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f931 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff ff20 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f93b 	bl	8000f82 <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f911 	bl	8000f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200000e4 	.word	0x200000e4

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200000e4 	.word	0x200000e4

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffde 	bl	8000d70 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f7ff ff8e 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff47 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff5c 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff8e 	bl	8000e88 <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5d 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffb0 	bl	8000ef0 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e159      	b.n	800126c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 8148 	bne.w	8001266 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d130      	bne.n	8001050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 0201 	and.w	r2, r3, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b03      	cmp	r3, #3
 800105a:	d017      	beq.n	800108c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80a2 	beq.w	8001266 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b57      	ldr	r3, [pc, #348]	; (8001284 <HAL_GPIO_Init+0x2e8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a56      	ldr	r2, [pc, #344]	; (8001284 <HAL_GPIO_Init+0x2e8>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b54      	ldr	r3, [pc, #336]	; (8001284 <HAL_GPIO_Init+0x2e8>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_GPIO_Init+0x2ec>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a49      	ldr	r2, [pc, #292]	; (800128c <HAL_GPIO_Init+0x2f0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_GPIO_Init+0x202>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a48      	ldr	r2, [pc, #288]	; (8001290 <HAL_GPIO_Init+0x2f4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0x1fe>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a47      	ldr	r2, [pc, #284]	; (8001294 <HAL_GPIO_Init+0x2f8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x1fa>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a46      	ldr	r2, [pc, #280]	; (8001298 <HAL_GPIO_Init+0x2fc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x1f6>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a45      	ldr	r2, [pc, #276]	; (800129c <HAL_GPIO_Init+0x300>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x1f2>
 800118a:	2304      	movs	r3, #4
 800118c:	e008      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 800118e:	2307      	movs	r3, #7
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 8001192:	2303      	movs	r3, #3
 8001194:	e004      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 8001196:	2302      	movs	r3, #2
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 800119e:	2300      	movs	r3, #0
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	f002 0203 	and.w	r2, r2, #3
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	4093      	lsls	r3, r2
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b0:	4935      	ldr	r1, [pc, #212]	; (8001288 <HAL_GPIO_Init+0x2ec>)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_GPIO_Init+0x304>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e2:	4a2f      	ldr	r2, [pc, #188]	; (80012a0 <HAL_GPIO_Init+0x304>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_GPIO_Init+0x304>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800120c:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <HAL_GPIO_Init+0x304>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_GPIO_Init+0x304>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001236:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <HAL_GPIO_Init+0x304>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_GPIO_Init+0x304>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001260:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_GPIO_Init+0x304>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	f67f aea2 	bls.w	8000fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40021000 	.word	0x40021000
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e267      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d075      	beq.n	80013e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d00c      	beq.n	800131c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001302:	4b85      	ldr	r3, [pc, #532]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130a:	2b08      	cmp	r3, #8
 800130c:	d112      	bne.n	8001334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130e:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800131a:	d10b      	bne.n	8001334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d05b      	beq.n	80013e0 <HAL_RCC_OscConfig+0x108>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d157      	bne.n	80013e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e242      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x74>
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a75      	ldr	r2, [pc, #468]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e01d      	b.n	8001388 <HAL_RCC_OscConfig+0xb0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x98>
 8001356:	4b70      	ldr	r3, [pc, #448]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6f      	ldr	r2, [pc, #444]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800135c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a6c      	ldr	r2, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e00b      	b.n	8001388 <HAL_RCC_OscConfig+0xb0>
 8001370:	4b69      	ldr	r3, [pc, #420]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a68      	ldr	r2, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b66      	ldr	r3, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a65      	ldr	r2, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d013      	beq.n	80013b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fcee 	bl	8000d70 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fcea 	bl	8000d70 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e207      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0xc0>
 80013b6:	e014      	b.n	80013e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fcda 	bl	8000d70 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fcd6 	bl	8000d70 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1f3      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0xe8>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d063      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001402:	2b08      	cmp	r3, #8
 8001404:	d11c      	bne.n	8001440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d116      	bne.n	8001440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x152>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d001      	beq.n	800142a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e1c7      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4937      	ldr	r1, [pc, #220]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	e03a      	b.n	80014b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <HAL_RCC_OscConfig+0x244>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff fc8f 	bl	8000d70 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fc8b 	bl	8000d70 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e1a8      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4925      	ldr	r1, [pc, #148]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
 8001488:	e015      	b.n	80014b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_RCC_OscConfig+0x244>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fc6e 	bl	8000d70 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fc6a 	bl	8000d70 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e187      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d036      	beq.n	8001530 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d016      	beq.n	80014f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_RCC_OscConfig+0x248>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff fc4e 	bl	8000d70 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc4a 	bl	8000d70 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e167      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x240>)
 80014ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x200>
 80014f6:	e01b      	b.n	8001530 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_RCC_OscConfig+0x248>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fc37 	bl	8000d70 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	e00e      	b.n	8001524 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fc33 	bl	8000d70 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d907      	bls.n	8001524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e150      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
 8001518:	40023800 	.word	0x40023800
 800151c:	42470000 	.word	0x42470000
 8001520:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ea      	bne.n	8001506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8097 	beq.w	800166c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001542:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10f      	bne.n	800156e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a7c      	ldr	r2, [pc, #496]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156a:	2301      	movs	r3, #1
 800156c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4b77      	ldr	r3, [pc, #476]	; (800174c <HAL_RCC_OscConfig+0x474>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d118      	bne.n	80015ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157a:	4b74      	ldr	r3, [pc, #464]	; (800174c <HAL_RCC_OscConfig+0x474>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a73      	ldr	r2, [pc, #460]	; (800174c <HAL_RCC_OscConfig+0x474>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001586:	f7ff fbf3 	bl	8000d70 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff fbef 	bl	8000d70 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e10c      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b6a      	ldr	r3, [pc, #424]	; (800174c <HAL_RCC_OscConfig+0x474>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x2ea>
 80015b4:	4b64      	ldr	r3, [pc, #400]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a63      	ldr	r2, [pc, #396]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	e01c      	b.n	80015fc <HAL_RCC_OscConfig+0x324>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x30c>
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a5e      	ldr	r2, [pc, #376]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	4b5c      	ldr	r3, [pc, #368]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a5b      	ldr	r2, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0x324>
 80015e4:	4b58      	ldr	r3, [pc, #352]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a57      	ldr	r2, [pc, #348]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
 80015f0:	4b55      	ldr	r3, [pc, #340]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a54      	ldr	r2, [pc, #336]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d015      	beq.n	8001630 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fbb4 	bl	8000d70 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160a:	e00a      	b.n	8001622 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff fbb0 	bl	8000d70 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0cb      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001622:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0ee      	beq.n	800160c <HAL_RCC_OscConfig+0x334>
 800162e:	e014      	b.n	800165a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fb9e 	bl	8000d70 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff fb9a 	bl	8000d70 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e0b5      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164e:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ee      	bne.n	8001638 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	4a38      	ldr	r2, [pc, #224]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800166a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a1 	beq.w	80017b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d05c      	beq.n	800173c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d141      	bne.n	800170e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb6e 	bl	8000d70 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb6a 	bl	8000d70 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e087      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	019b      	lsls	r3, r3, #6
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	491b      	ldr	r1, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_RCC_OscConfig+0x478>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb43 	bl	8000d70 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fb3f 	bl	8000d70 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e05c      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x416>
 800170c:	e054      	b.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_RCC_OscConfig+0x478>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fb2c 	bl	8000d70 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff fb28 	bl	8000d70 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e045      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_RCC_OscConfig+0x470>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x444>
 800173a:	e03d      	b.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e038      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000
 8001750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x4ec>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d028      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d121      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d11a      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800178a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178c:	4293      	cmp	r3, r2
 800178e:	d111      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	3b01      	subs	r3, #1
 800179e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0cc      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017dc:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d90c      	bls.n	8001804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b65      	ldr	r3, [pc, #404]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b63      	ldr	r3, [pc, #396]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0b8      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	4b59      	ldr	r3, [pc, #356]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a58      	ldr	r2, [pc, #352]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001834:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800183e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	494d      	ldr	r1, [pc, #308]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d044      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d119      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e07f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d003      	beq.n	8001886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001882:	2b03      	cmp	r3, #3
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e06f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e067      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f023 0203 	bic.w	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4934      	ldr	r1, [pc, #208]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b8:	f7ff fa5a 	bl	8000d70 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c0:	f7ff fa56 	bl	8000d70 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e04f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 020c 	and.w	r2, r3, #12
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d1eb      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d20c      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e032      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4916      	ldr	r1, [pc, #88]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	490e      	ldr	r1, [pc, #56]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800194e:	f000 f821 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001952:	4602      	mov	r2, r0
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	490a      	ldr	r1, [pc, #40]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	5ccb      	ldrb	r3, [r1, r3]
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f9ba 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00
 8001984:	40023800 	.word	0x40023800
 8001988:	080024a0 	.word	0x080024a0
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001998:	b090      	sub	sp, #64	; 0x40
 800199a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
 80019a0:	2300      	movs	r3, #0
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d00d      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x40>
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	f200 80a1 	bhi.w	8001b00 <HAL_RCC_GetSysClockFreq+0x16c>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x34>
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x3a>
 80019c6:	e09b      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019cc:	e09b      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ce:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x188>)
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019d2:	e098      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d4:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019de:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d028      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ea:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	099b      	lsrs	r3, r3, #6
 80019f0:	2200      	movs	r2, #0
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	627a      	str	r2, [r7, #36]	; 0x24
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019fc:	2100      	movs	r1, #0
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a00:	fb03 f201 	mul.w	r2, r3, r1
 8001a04:	2300      	movs	r3, #0
 8001a06:	fb00 f303 	mul.w	r3, r0, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a43      	ldr	r2, [pc, #268]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a0e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a14:	460a      	mov	r2, r1
 8001a16:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1a:	4413      	add	r3, r2
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a20:	2200      	movs	r2, #0
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	61fa      	str	r2, [r7, #28]
 8001a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a2e:	f7fe fc27 	bl	8000280 <__aeabi_uldivmod>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4613      	mov	r3, r2
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a3a:	e053      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	2200      	movs	r2, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	617a      	str	r2, [r7, #20]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a4e:	f04f 0b00 	mov.w	fp, #0
 8001a52:	4652      	mov	r2, sl
 8001a54:	465b      	mov	r3, fp
 8001a56:	f04f 0000 	mov.w	r0, #0
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	0159      	lsls	r1, r3, #5
 8001a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a64:	0150      	lsls	r0, r2, #5
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a6e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a86:	ebb2 0408 	subs.w	r4, r2, r8
 8001a8a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	00eb      	lsls	r3, r5, #3
 8001a98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a9c:	00e2      	lsls	r2, r4, #3
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	eb14 030a 	adds.w	r3, r4, sl
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	eb45 030b 	adc.w	r3, r5, fp
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aba:	4629      	mov	r1, r5
 8001abc:	028b      	lsls	r3, r1, #10
 8001abe:	4621      	mov	r1, r4
 8001ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	028a      	lsls	r2, r1, #10
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	60fa      	str	r2, [r7, #12]
 8001ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ad8:	f7fe fbd2 	bl	8000280 <__aeabi_uldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	3301      	adds	r3, #1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001afe:	e002      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3740      	adds	r7, #64	; 0x40
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	017d7840 	.word	0x017d7840

08001b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000

08001b38 <__errno>:
 8001b38:	4b01      	ldr	r3, [pc, #4]	; (8001b40 <__errno+0x8>)
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2000000c 	.word	0x2000000c

08001b44 <__libc_init_array>:
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	4d0d      	ldr	r5, [pc, #52]	; (8001b7c <__libc_init_array+0x38>)
 8001b48:	4c0d      	ldr	r4, [pc, #52]	; (8001b80 <__libc_init_array+0x3c>)
 8001b4a:	1b64      	subs	r4, r4, r5
 8001b4c:	10a4      	asrs	r4, r4, #2
 8001b4e:	2600      	movs	r6, #0
 8001b50:	42a6      	cmp	r6, r4
 8001b52:	d109      	bne.n	8001b68 <__libc_init_array+0x24>
 8001b54:	4d0b      	ldr	r5, [pc, #44]	; (8001b84 <__libc_init_array+0x40>)
 8001b56:	4c0c      	ldr	r4, [pc, #48]	; (8001b88 <__libc_init_array+0x44>)
 8001b58:	f000 fc8e 	bl	8002478 <_init>
 8001b5c:	1b64      	subs	r4, r4, r5
 8001b5e:	10a4      	asrs	r4, r4, #2
 8001b60:	2600      	movs	r6, #0
 8001b62:	42a6      	cmp	r6, r4
 8001b64:	d105      	bne.n	8001b72 <__libc_init_array+0x2e>
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
 8001b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b6c:	4798      	blx	r3
 8001b6e:	3601      	adds	r6, #1
 8001b70:	e7ee      	b.n	8001b50 <__libc_init_array+0xc>
 8001b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b76:	4798      	blx	r3
 8001b78:	3601      	adds	r6, #1
 8001b7a:	e7f2      	b.n	8001b62 <__libc_init_array+0x1e>
 8001b7c:	080024ec 	.word	0x080024ec
 8001b80:	080024ec 	.word	0x080024ec
 8001b84:	080024ec 	.word	0x080024ec
 8001b88:	080024f0 	.word	0x080024f0

08001b8c <memset>:
 8001b8c:	4402      	add	r2, r0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d100      	bne.n	8001b96 <memset+0xa>
 8001b94:	4770      	bx	lr
 8001b96:	f803 1b01 	strb.w	r1, [r3], #1
 8001b9a:	e7f9      	b.n	8001b90 <memset+0x4>

08001b9c <siprintf>:
 8001b9c:	b40e      	push	{r1, r2, r3}
 8001b9e:	b500      	push	{lr}
 8001ba0:	b09c      	sub	sp, #112	; 0x70
 8001ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8001ba4:	9002      	str	r0, [sp, #8]
 8001ba6:	9006      	str	r0, [sp, #24]
 8001ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <siprintf+0x38>)
 8001bae:	9107      	str	r1, [sp, #28]
 8001bb0:	9104      	str	r1, [sp, #16]
 8001bb2:	4909      	ldr	r1, [pc, #36]	; (8001bd8 <siprintf+0x3c>)
 8001bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bb8:	9105      	str	r1, [sp, #20]
 8001bba:	6800      	ldr	r0, [r0, #0]
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	a902      	add	r1, sp, #8
 8001bc0:	f000 f868 	bl	8001c94 <_svfiprintf_r>
 8001bc4:	9b02      	ldr	r3, [sp, #8]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	b01c      	add	sp, #112	; 0x70
 8001bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bd0:	b003      	add	sp, #12
 8001bd2:	4770      	bx	lr
 8001bd4:	2000000c 	.word	0x2000000c
 8001bd8:	ffff0208 	.word	0xffff0208

08001bdc <__ssputs_r>:
 8001bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001be0:	688e      	ldr	r6, [r1, #8]
 8001be2:	429e      	cmp	r6, r3
 8001be4:	4682      	mov	sl, r0
 8001be6:	460c      	mov	r4, r1
 8001be8:	4690      	mov	r8, r2
 8001bea:	461f      	mov	r7, r3
 8001bec:	d838      	bhi.n	8001c60 <__ssputs_r+0x84>
 8001bee:	898a      	ldrh	r2, [r1, #12]
 8001bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001bf4:	d032      	beq.n	8001c5c <__ssputs_r+0x80>
 8001bf6:	6825      	ldr	r5, [r4, #0]
 8001bf8:	6909      	ldr	r1, [r1, #16]
 8001bfa:	eba5 0901 	sub.w	r9, r5, r1
 8001bfe:	6965      	ldr	r5, [r4, #20]
 8001c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c08:	3301      	adds	r3, #1
 8001c0a:	444b      	add	r3, r9
 8001c0c:	106d      	asrs	r5, r5, #1
 8001c0e:	429d      	cmp	r5, r3
 8001c10:	bf38      	it	cc
 8001c12:	461d      	movcc	r5, r3
 8001c14:	0553      	lsls	r3, r2, #21
 8001c16:	d531      	bpl.n	8001c7c <__ssputs_r+0xa0>
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f000 fb63 	bl	80022e4 <_malloc_r>
 8001c1e:	4606      	mov	r6, r0
 8001c20:	b950      	cbnz	r0, 8001c38 <__ssputs_r+0x5c>
 8001c22:	230c      	movs	r3, #12
 8001c24:	f8ca 3000 	str.w	r3, [sl]
 8001c28:	89a3      	ldrh	r3, [r4, #12]
 8001c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2e:	81a3      	strh	r3, [r4, #12]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c38:	6921      	ldr	r1, [r4, #16]
 8001c3a:	464a      	mov	r2, r9
 8001c3c:	f000 fabe 	bl	80021bc <memcpy>
 8001c40:	89a3      	ldrh	r3, [r4, #12]
 8001c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4a:	81a3      	strh	r3, [r4, #12]
 8001c4c:	6126      	str	r6, [r4, #16]
 8001c4e:	6165      	str	r5, [r4, #20]
 8001c50:	444e      	add	r6, r9
 8001c52:	eba5 0509 	sub.w	r5, r5, r9
 8001c56:	6026      	str	r6, [r4, #0]
 8001c58:	60a5      	str	r5, [r4, #8]
 8001c5a:	463e      	mov	r6, r7
 8001c5c:	42be      	cmp	r6, r7
 8001c5e:	d900      	bls.n	8001c62 <__ssputs_r+0x86>
 8001c60:	463e      	mov	r6, r7
 8001c62:	6820      	ldr	r0, [r4, #0]
 8001c64:	4632      	mov	r2, r6
 8001c66:	4641      	mov	r1, r8
 8001c68:	f000 fab6 	bl	80021d8 <memmove>
 8001c6c:	68a3      	ldr	r3, [r4, #8]
 8001c6e:	1b9b      	subs	r3, r3, r6
 8001c70:	60a3      	str	r3, [r4, #8]
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	4433      	add	r3, r6
 8001c76:	6023      	str	r3, [r4, #0]
 8001c78:	2000      	movs	r0, #0
 8001c7a:	e7db      	b.n	8001c34 <__ssputs_r+0x58>
 8001c7c:	462a      	mov	r2, r5
 8001c7e:	f000 fba5 	bl	80023cc <_realloc_r>
 8001c82:	4606      	mov	r6, r0
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d1e1      	bne.n	8001c4c <__ssputs_r+0x70>
 8001c88:	6921      	ldr	r1, [r4, #16]
 8001c8a:	4650      	mov	r0, sl
 8001c8c:	f000 fabe 	bl	800220c <_free_r>
 8001c90:	e7c7      	b.n	8001c22 <__ssputs_r+0x46>
	...

08001c94 <_svfiprintf_r>:
 8001c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c98:	4698      	mov	r8, r3
 8001c9a:	898b      	ldrh	r3, [r1, #12]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	b09d      	sub	sp, #116	; 0x74
 8001ca0:	4607      	mov	r7, r0
 8001ca2:	460d      	mov	r5, r1
 8001ca4:	4614      	mov	r4, r2
 8001ca6:	d50e      	bpl.n	8001cc6 <_svfiprintf_r+0x32>
 8001ca8:	690b      	ldr	r3, [r1, #16]
 8001caa:	b963      	cbnz	r3, 8001cc6 <_svfiprintf_r+0x32>
 8001cac:	2140      	movs	r1, #64	; 0x40
 8001cae:	f000 fb19 	bl	80022e4 <_malloc_r>
 8001cb2:	6028      	str	r0, [r5, #0]
 8001cb4:	6128      	str	r0, [r5, #16]
 8001cb6:	b920      	cbnz	r0, 8001cc2 <_svfiprintf_r+0x2e>
 8001cb8:	230c      	movs	r3, #12
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	e0d1      	b.n	8001e66 <_svfiprintf_r+0x1d2>
 8001cc2:	2340      	movs	r3, #64	; 0x40
 8001cc4:	616b      	str	r3, [r5, #20]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8001cca:	2320      	movs	r3, #32
 8001ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cd4:	2330      	movs	r3, #48	; 0x30
 8001cd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001e80 <_svfiprintf_r+0x1ec>
 8001cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cde:	f04f 0901 	mov.w	r9, #1
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	469a      	mov	sl, r3
 8001ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cea:	b10a      	cbz	r2, 8001cf0 <_svfiprintf_r+0x5c>
 8001cec:	2a25      	cmp	r2, #37	; 0x25
 8001cee:	d1f9      	bne.n	8001ce4 <_svfiprintf_r+0x50>
 8001cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8001cf4:	d00b      	beq.n	8001d0e <_svfiprintf_r+0x7a>
 8001cf6:	465b      	mov	r3, fp
 8001cf8:	4622      	mov	r2, r4
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	4638      	mov	r0, r7
 8001cfe:	f7ff ff6d 	bl	8001bdc <__ssputs_r>
 8001d02:	3001      	adds	r0, #1
 8001d04:	f000 80aa 	beq.w	8001e5c <_svfiprintf_r+0x1c8>
 8001d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d0a:	445a      	add	r2, fp
 8001d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8001d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80a2 	beq.w	8001e5c <_svfiprintf_r+0x1c8>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d22:	f10a 0a01 	add.w	sl, sl, #1
 8001d26:	9304      	str	r3, [sp, #16]
 8001d28:	9307      	str	r3, [sp, #28]
 8001d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8001d30:	4654      	mov	r4, sl
 8001d32:	2205      	movs	r2, #5
 8001d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d38:	4851      	ldr	r0, [pc, #324]	; (8001e80 <_svfiprintf_r+0x1ec>)
 8001d3a:	f7fe fa51 	bl	80001e0 <memchr>
 8001d3e:	9a04      	ldr	r2, [sp, #16]
 8001d40:	b9d8      	cbnz	r0, 8001d7a <_svfiprintf_r+0xe6>
 8001d42:	06d0      	lsls	r0, r2, #27
 8001d44:	bf44      	itt	mi
 8001d46:	2320      	movmi	r3, #32
 8001d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d4c:	0711      	lsls	r1, r2, #28
 8001d4e:	bf44      	itt	mi
 8001d50:	232b      	movmi	r3, #43	; 0x2b
 8001d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d56:	f89a 3000 	ldrb.w	r3, [sl]
 8001d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8001d5c:	d015      	beq.n	8001d8a <_svfiprintf_r+0xf6>
 8001d5e:	9a07      	ldr	r2, [sp, #28]
 8001d60:	4654      	mov	r4, sl
 8001d62:	2000      	movs	r0, #0
 8001d64:	f04f 0c0a 	mov.w	ip, #10
 8001d68:	4621      	mov	r1, r4
 8001d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d6e:	3b30      	subs	r3, #48	; 0x30
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	d94e      	bls.n	8001e12 <_svfiprintf_r+0x17e>
 8001d74:	b1b0      	cbz	r0, 8001da4 <_svfiprintf_r+0x110>
 8001d76:	9207      	str	r2, [sp, #28]
 8001d78:	e014      	b.n	8001da4 <_svfiprintf_r+0x110>
 8001d7a:	eba0 0308 	sub.w	r3, r0, r8
 8001d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8001d82:	4313      	orrs	r3, r2
 8001d84:	9304      	str	r3, [sp, #16]
 8001d86:	46a2      	mov	sl, r4
 8001d88:	e7d2      	b.n	8001d30 <_svfiprintf_r+0x9c>
 8001d8a:	9b03      	ldr	r3, [sp, #12]
 8001d8c:	1d19      	adds	r1, r3, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	9103      	str	r1, [sp, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bfbb      	ittet	lt
 8001d96:	425b      	neglt	r3, r3
 8001d98:	f042 0202 	orrlt.w	r2, r2, #2
 8001d9c:	9307      	strge	r3, [sp, #28]
 8001d9e:	9307      	strlt	r3, [sp, #28]
 8001da0:	bfb8      	it	lt
 8001da2:	9204      	strlt	r2, [sp, #16]
 8001da4:	7823      	ldrb	r3, [r4, #0]
 8001da6:	2b2e      	cmp	r3, #46	; 0x2e
 8001da8:	d10c      	bne.n	8001dc4 <_svfiprintf_r+0x130>
 8001daa:	7863      	ldrb	r3, [r4, #1]
 8001dac:	2b2a      	cmp	r3, #42	; 0x2a
 8001dae:	d135      	bne.n	8001e1c <_svfiprintf_r+0x188>
 8001db0:	9b03      	ldr	r3, [sp, #12]
 8001db2:	1d1a      	adds	r2, r3, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	9203      	str	r2, [sp, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bfb8      	it	lt
 8001dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dc0:	3402      	adds	r4, #2
 8001dc2:	9305      	str	r3, [sp, #20]
 8001dc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001e90 <_svfiprintf_r+0x1fc>
 8001dc8:	7821      	ldrb	r1, [r4, #0]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	4650      	mov	r0, sl
 8001dce:	f7fe fa07 	bl	80001e0 <memchr>
 8001dd2:	b140      	cbz	r0, 8001de6 <_svfiprintf_r+0x152>
 8001dd4:	2340      	movs	r3, #64	; 0x40
 8001dd6:	eba0 000a 	sub.w	r0, r0, sl
 8001dda:	fa03 f000 	lsl.w	r0, r3, r0
 8001dde:	9b04      	ldr	r3, [sp, #16]
 8001de0:	4303      	orrs	r3, r0
 8001de2:	3401      	adds	r4, #1
 8001de4:	9304      	str	r3, [sp, #16]
 8001de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dea:	4826      	ldr	r0, [pc, #152]	; (8001e84 <_svfiprintf_r+0x1f0>)
 8001dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001df0:	2206      	movs	r2, #6
 8001df2:	f7fe f9f5 	bl	80001e0 <memchr>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d038      	beq.n	8001e6c <_svfiprintf_r+0x1d8>
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <_svfiprintf_r+0x1f4>)
 8001dfc:	bb1b      	cbnz	r3, 8001e46 <_svfiprintf_r+0x1b2>
 8001dfe:	9b03      	ldr	r3, [sp, #12]
 8001e00:	3307      	adds	r3, #7
 8001e02:	f023 0307 	bic.w	r3, r3, #7
 8001e06:	3308      	adds	r3, #8
 8001e08:	9303      	str	r3, [sp, #12]
 8001e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e0c:	4433      	add	r3, r6
 8001e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8001e10:	e767      	b.n	8001ce2 <_svfiprintf_r+0x4e>
 8001e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e16:	460c      	mov	r4, r1
 8001e18:	2001      	movs	r0, #1
 8001e1a:	e7a5      	b.n	8001d68 <_svfiprintf_r+0xd4>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	3401      	adds	r4, #1
 8001e20:	9305      	str	r3, [sp, #20]
 8001e22:	4619      	mov	r1, r3
 8001e24:	f04f 0c0a 	mov.w	ip, #10
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e2e:	3a30      	subs	r2, #48	; 0x30
 8001e30:	2a09      	cmp	r2, #9
 8001e32:	d903      	bls.n	8001e3c <_svfiprintf_r+0x1a8>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0c5      	beq.n	8001dc4 <_svfiprintf_r+0x130>
 8001e38:	9105      	str	r1, [sp, #20]
 8001e3a:	e7c3      	b.n	8001dc4 <_svfiprintf_r+0x130>
 8001e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e40:	4604      	mov	r4, r0
 8001e42:	2301      	movs	r3, #1
 8001e44:	e7f0      	b.n	8001e28 <_svfiprintf_r+0x194>
 8001e46:	ab03      	add	r3, sp, #12
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	462a      	mov	r2, r5
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <_svfiprintf_r+0x1f8>)
 8001e4e:	a904      	add	r1, sp, #16
 8001e50:	4638      	mov	r0, r7
 8001e52:	f3af 8000 	nop.w
 8001e56:	1c42      	adds	r2, r0, #1
 8001e58:	4606      	mov	r6, r0
 8001e5a:	d1d6      	bne.n	8001e0a <_svfiprintf_r+0x176>
 8001e5c:	89ab      	ldrh	r3, [r5, #12]
 8001e5e:	065b      	lsls	r3, r3, #25
 8001e60:	f53f af2c 	bmi.w	8001cbc <_svfiprintf_r+0x28>
 8001e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e66:	b01d      	add	sp, #116	; 0x74
 8001e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e6c:	ab03      	add	r3, sp, #12
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	462a      	mov	r2, r5
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <_svfiprintf_r+0x1f8>)
 8001e74:	a904      	add	r1, sp, #16
 8001e76:	4638      	mov	r0, r7
 8001e78:	f000 f87a 	bl	8001f70 <_printf_i>
 8001e7c:	e7eb      	b.n	8001e56 <_svfiprintf_r+0x1c2>
 8001e7e:	bf00      	nop
 8001e80:	080024b0 	.word	0x080024b0
 8001e84:	080024ba 	.word	0x080024ba
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	08001bdd 	.word	0x08001bdd
 8001e90:	080024b6 	.word	0x080024b6

08001e94 <_printf_common>:
 8001e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e98:	4616      	mov	r6, r2
 8001e9a:	4699      	mov	r9, r3
 8001e9c:	688a      	ldr	r2, [r1, #8]
 8001e9e:	690b      	ldr	r3, [r1, #16]
 8001ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	bfb8      	it	lt
 8001ea8:	4613      	movlt	r3, r2
 8001eaa:	6033      	str	r3, [r6, #0]
 8001eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001eb0:	4607      	mov	r7, r0
 8001eb2:	460c      	mov	r4, r1
 8001eb4:	b10a      	cbz	r2, 8001eba <_printf_common+0x26>
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	6033      	str	r3, [r6, #0]
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	0699      	lsls	r1, r3, #26
 8001ebe:	bf42      	ittt	mi
 8001ec0:	6833      	ldrmi	r3, [r6, #0]
 8001ec2:	3302      	addmi	r3, #2
 8001ec4:	6033      	strmi	r3, [r6, #0]
 8001ec6:	6825      	ldr	r5, [r4, #0]
 8001ec8:	f015 0506 	ands.w	r5, r5, #6
 8001ecc:	d106      	bne.n	8001edc <_printf_common+0x48>
 8001ece:	f104 0a19 	add.w	sl, r4, #25
 8001ed2:	68e3      	ldr	r3, [r4, #12]
 8001ed4:	6832      	ldr	r2, [r6, #0]
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	42ab      	cmp	r3, r5
 8001eda:	dc26      	bgt.n	8001f2a <_printf_common+0x96>
 8001edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ee0:	1e13      	subs	r3, r2, #0
 8001ee2:	6822      	ldr	r2, [r4, #0]
 8001ee4:	bf18      	it	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	0692      	lsls	r2, r2, #26
 8001eea:	d42b      	bmi.n	8001f44 <_printf_common+0xb0>
 8001eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	4638      	mov	r0, r7
 8001ef4:	47c0      	blx	r8
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	d01e      	beq.n	8001f38 <_printf_common+0xa4>
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	68e5      	ldr	r5, [r4, #12]
 8001efe:	6832      	ldr	r2, [r6, #0]
 8001f00:	f003 0306 	and.w	r3, r3, #6
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	bf08      	it	eq
 8001f08:	1aad      	subeq	r5, r5, r2
 8001f0a:	68a3      	ldr	r3, [r4, #8]
 8001f0c:	6922      	ldr	r2, [r4, #16]
 8001f0e:	bf0c      	ite	eq
 8001f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f14:	2500      	movne	r5, #0
 8001f16:	4293      	cmp	r3, r2
 8001f18:	bfc4      	itt	gt
 8001f1a:	1a9b      	subgt	r3, r3, r2
 8001f1c:	18ed      	addgt	r5, r5, r3
 8001f1e:	2600      	movs	r6, #0
 8001f20:	341a      	adds	r4, #26
 8001f22:	42b5      	cmp	r5, r6
 8001f24:	d11a      	bne.n	8001f5c <_printf_common+0xc8>
 8001f26:	2000      	movs	r0, #0
 8001f28:	e008      	b.n	8001f3c <_printf_common+0xa8>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4652      	mov	r2, sl
 8001f2e:	4649      	mov	r1, r9
 8001f30:	4638      	mov	r0, r7
 8001f32:	47c0      	blx	r8
 8001f34:	3001      	adds	r0, #1
 8001f36:	d103      	bne.n	8001f40 <_printf_common+0xac>
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f40:	3501      	adds	r5, #1
 8001f42:	e7c6      	b.n	8001ed2 <_printf_common+0x3e>
 8001f44:	18e1      	adds	r1, r4, r3
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	2030      	movs	r0, #48	; 0x30
 8001f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f4e:	4422      	add	r2, r4
 8001f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f58:	3302      	adds	r3, #2
 8001f5a:	e7c7      	b.n	8001eec <_printf_common+0x58>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	4622      	mov	r2, r4
 8001f60:	4649      	mov	r1, r9
 8001f62:	4638      	mov	r0, r7
 8001f64:	47c0      	blx	r8
 8001f66:	3001      	adds	r0, #1
 8001f68:	d0e6      	beq.n	8001f38 <_printf_common+0xa4>
 8001f6a:	3601      	adds	r6, #1
 8001f6c:	e7d9      	b.n	8001f22 <_printf_common+0x8e>
	...

08001f70 <_printf_i>:
 8001f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f74:	7e0f      	ldrb	r7, [r1, #24]
 8001f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f78:	2f78      	cmp	r7, #120	; 0x78
 8001f7a:	4691      	mov	r9, r2
 8001f7c:	4680      	mov	r8, r0
 8001f7e:	460c      	mov	r4, r1
 8001f80:	469a      	mov	sl, r3
 8001f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f86:	d807      	bhi.n	8001f98 <_printf_i+0x28>
 8001f88:	2f62      	cmp	r7, #98	; 0x62
 8001f8a:	d80a      	bhi.n	8001fa2 <_printf_i+0x32>
 8001f8c:	2f00      	cmp	r7, #0
 8001f8e:	f000 80d8 	beq.w	8002142 <_printf_i+0x1d2>
 8001f92:	2f58      	cmp	r7, #88	; 0x58
 8001f94:	f000 80a3 	beq.w	80020de <_printf_i+0x16e>
 8001f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fa0:	e03a      	b.n	8002018 <_printf_i+0xa8>
 8001fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fa6:	2b15      	cmp	r3, #21
 8001fa8:	d8f6      	bhi.n	8001f98 <_printf_i+0x28>
 8001faa:	a101      	add	r1, pc, #4	; (adr r1, 8001fb0 <_printf_i+0x40>)
 8001fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fb0:	08002009 	.word	0x08002009
 8001fb4:	0800201d 	.word	0x0800201d
 8001fb8:	08001f99 	.word	0x08001f99
 8001fbc:	08001f99 	.word	0x08001f99
 8001fc0:	08001f99 	.word	0x08001f99
 8001fc4:	08001f99 	.word	0x08001f99
 8001fc8:	0800201d 	.word	0x0800201d
 8001fcc:	08001f99 	.word	0x08001f99
 8001fd0:	08001f99 	.word	0x08001f99
 8001fd4:	08001f99 	.word	0x08001f99
 8001fd8:	08001f99 	.word	0x08001f99
 8001fdc:	08002129 	.word	0x08002129
 8001fe0:	0800204d 	.word	0x0800204d
 8001fe4:	0800210b 	.word	0x0800210b
 8001fe8:	08001f99 	.word	0x08001f99
 8001fec:	08001f99 	.word	0x08001f99
 8001ff0:	0800214b 	.word	0x0800214b
 8001ff4:	08001f99 	.word	0x08001f99
 8001ff8:	0800204d 	.word	0x0800204d
 8001ffc:	08001f99 	.word	0x08001f99
 8002000:	08001f99 	.word	0x08001f99
 8002004:	08002113 	.word	0x08002113
 8002008:	682b      	ldr	r3, [r5, #0]
 800200a:	1d1a      	adds	r2, r3, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	602a      	str	r2, [r5, #0]
 8002010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002018:	2301      	movs	r3, #1
 800201a:	e0a3      	b.n	8002164 <_printf_i+0x1f4>
 800201c:	6820      	ldr	r0, [r4, #0]
 800201e:	6829      	ldr	r1, [r5, #0]
 8002020:	0606      	lsls	r6, r0, #24
 8002022:	f101 0304 	add.w	r3, r1, #4
 8002026:	d50a      	bpl.n	800203e <_printf_i+0xce>
 8002028:	680e      	ldr	r6, [r1, #0]
 800202a:	602b      	str	r3, [r5, #0]
 800202c:	2e00      	cmp	r6, #0
 800202e:	da03      	bge.n	8002038 <_printf_i+0xc8>
 8002030:	232d      	movs	r3, #45	; 0x2d
 8002032:	4276      	negs	r6, r6
 8002034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002038:	485e      	ldr	r0, [pc, #376]	; (80021b4 <_printf_i+0x244>)
 800203a:	230a      	movs	r3, #10
 800203c:	e019      	b.n	8002072 <_printf_i+0x102>
 800203e:	680e      	ldr	r6, [r1, #0]
 8002040:	602b      	str	r3, [r5, #0]
 8002042:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002046:	bf18      	it	ne
 8002048:	b236      	sxthne	r6, r6
 800204a:	e7ef      	b.n	800202c <_printf_i+0xbc>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	6820      	ldr	r0, [r4, #0]
 8002050:	1d19      	adds	r1, r3, #4
 8002052:	6029      	str	r1, [r5, #0]
 8002054:	0601      	lsls	r1, r0, #24
 8002056:	d501      	bpl.n	800205c <_printf_i+0xec>
 8002058:	681e      	ldr	r6, [r3, #0]
 800205a:	e002      	b.n	8002062 <_printf_i+0xf2>
 800205c:	0646      	lsls	r6, r0, #25
 800205e:	d5fb      	bpl.n	8002058 <_printf_i+0xe8>
 8002060:	881e      	ldrh	r6, [r3, #0]
 8002062:	4854      	ldr	r0, [pc, #336]	; (80021b4 <_printf_i+0x244>)
 8002064:	2f6f      	cmp	r7, #111	; 0x6f
 8002066:	bf0c      	ite	eq
 8002068:	2308      	moveq	r3, #8
 800206a:	230a      	movne	r3, #10
 800206c:	2100      	movs	r1, #0
 800206e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002072:	6865      	ldr	r5, [r4, #4]
 8002074:	60a5      	str	r5, [r4, #8]
 8002076:	2d00      	cmp	r5, #0
 8002078:	bfa2      	ittt	ge
 800207a:	6821      	ldrge	r1, [r4, #0]
 800207c:	f021 0104 	bicge.w	r1, r1, #4
 8002080:	6021      	strge	r1, [r4, #0]
 8002082:	b90e      	cbnz	r6, 8002088 <_printf_i+0x118>
 8002084:	2d00      	cmp	r5, #0
 8002086:	d04d      	beq.n	8002124 <_printf_i+0x1b4>
 8002088:	4615      	mov	r5, r2
 800208a:	fbb6 f1f3 	udiv	r1, r6, r3
 800208e:	fb03 6711 	mls	r7, r3, r1, r6
 8002092:	5dc7      	ldrb	r7, [r0, r7]
 8002094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002098:	4637      	mov	r7, r6
 800209a:	42bb      	cmp	r3, r7
 800209c:	460e      	mov	r6, r1
 800209e:	d9f4      	bls.n	800208a <_printf_i+0x11a>
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d10b      	bne.n	80020bc <_printf_i+0x14c>
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	07de      	lsls	r6, r3, #31
 80020a8:	d508      	bpl.n	80020bc <_printf_i+0x14c>
 80020aa:	6923      	ldr	r3, [r4, #16]
 80020ac:	6861      	ldr	r1, [r4, #4]
 80020ae:	4299      	cmp	r1, r3
 80020b0:	bfde      	ittt	le
 80020b2:	2330      	movle	r3, #48	; 0x30
 80020b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80020b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80020bc:	1b52      	subs	r2, r2, r5
 80020be:	6122      	str	r2, [r4, #16]
 80020c0:	f8cd a000 	str.w	sl, [sp]
 80020c4:	464b      	mov	r3, r9
 80020c6:	aa03      	add	r2, sp, #12
 80020c8:	4621      	mov	r1, r4
 80020ca:	4640      	mov	r0, r8
 80020cc:	f7ff fee2 	bl	8001e94 <_printf_common>
 80020d0:	3001      	adds	r0, #1
 80020d2:	d14c      	bne.n	800216e <_printf_i+0x1fe>
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	b004      	add	sp, #16
 80020da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020de:	4835      	ldr	r0, [pc, #212]	; (80021b4 <_printf_i+0x244>)
 80020e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80020e4:	6829      	ldr	r1, [r5, #0]
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80020ec:	6029      	str	r1, [r5, #0]
 80020ee:	061d      	lsls	r5, r3, #24
 80020f0:	d514      	bpl.n	800211c <_printf_i+0x1ac>
 80020f2:	07df      	lsls	r7, r3, #31
 80020f4:	bf44      	itt	mi
 80020f6:	f043 0320 	orrmi.w	r3, r3, #32
 80020fa:	6023      	strmi	r3, [r4, #0]
 80020fc:	b91e      	cbnz	r6, 8002106 <_printf_i+0x196>
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	f023 0320 	bic.w	r3, r3, #32
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	2310      	movs	r3, #16
 8002108:	e7b0      	b.n	800206c <_printf_i+0xfc>
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	f043 0320 	orr.w	r3, r3, #32
 8002110:	6023      	str	r3, [r4, #0]
 8002112:	2378      	movs	r3, #120	; 0x78
 8002114:	4828      	ldr	r0, [pc, #160]	; (80021b8 <_printf_i+0x248>)
 8002116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800211a:	e7e3      	b.n	80020e4 <_printf_i+0x174>
 800211c:	0659      	lsls	r1, r3, #25
 800211e:	bf48      	it	mi
 8002120:	b2b6      	uxthmi	r6, r6
 8002122:	e7e6      	b.n	80020f2 <_printf_i+0x182>
 8002124:	4615      	mov	r5, r2
 8002126:	e7bb      	b.n	80020a0 <_printf_i+0x130>
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	6826      	ldr	r6, [r4, #0]
 800212c:	6961      	ldr	r1, [r4, #20]
 800212e:	1d18      	adds	r0, r3, #4
 8002130:	6028      	str	r0, [r5, #0]
 8002132:	0635      	lsls	r5, r6, #24
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	d501      	bpl.n	800213c <_printf_i+0x1cc>
 8002138:	6019      	str	r1, [r3, #0]
 800213a:	e002      	b.n	8002142 <_printf_i+0x1d2>
 800213c:	0670      	lsls	r0, r6, #25
 800213e:	d5fb      	bpl.n	8002138 <_printf_i+0x1c8>
 8002140:	8019      	strh	r1, [r3, #0]
 8002142:	2300      	movs	r3, #0
 8002144:	6123      	str	r3, [r4, #16]
 8002146:	4615      	mov	r5, r2
 8002148:	e7ba      	b.n	80020c0 <_printf_i+0x150>
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	1d1a      	adds	r2, r3, #4
 800214e:	602a      	str	r2, [r5, #0]
 8002150:	681d      	ldr	r5, [r3, #0]
 8002152:	6862      	ldr	r2, [r4, #4]
 8002154:	2100      	movs	r1, #0
 8002156:	4628      	mov	r0, r5
 8002158:	f7fe f842 	bl	80001e0 <memchr>
 800215c:	b108      	cbz	r0, 8002162 <_printf_i+0x1f2>
 800215e:	1b40      	subs	r0, r0, r5
 8002160:	6060      	str	r0, [r4, #4]
 8002162:	6863      	ldr	r3, [r4, #4]
 8002164:	6123      	str	r3, [r4, #16]
 8002166:	2300      	movs	r3, #0
 8002168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800216c:	e7a8      	b.n	80020c0 <_printf_i+0x150>
 800216e:	6923      	ldr	r3, [r4, #16]
 8002170:	462a      	mov	r2, r5
 8002172:	4649      	mov	r1, r9
 8002174:	4640      	mov	r0, r8
 8002176:	47d0      	blx	sl
 8002178:	3001      	adds	r0, #1
 800217a:	d0ab      	beq.n	80020d4 <_printf_i+0x164>
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	079b      	lsls	r3, r3, #30
 8002180:	d413      	bmi.n	80021aa <_printf_i+0x23a>
 8002182:	68e0      	ldr	r0, [r4, #12]
 8002184:	9b03      	ldr	r3, [sp, #12]
 8002186:	4298      	cmp	r0, r3
 8002188:	bfb8      	it	lt
 800218a:	4618      	movlt	r0, r3
 800218c:	e7a4      	b.n	80020d8 <_printf_i+0x168>
 800218e:	2301      	movs	r3, #1
 8002190:	4632      	mov	r2, r6
 8002192:	4649      	mov	r1, r9
 8002194:	4640      	mov	r0, r8
 8002196:	47d0      	blx	sl
 8002198:	3001      	adds	r0, #1
 800219a:	d09b      	beq.n	80020d4 <_printf_i+0x164>
 800219c:	3501      	adds	r5, #1
 800219e:	68e3      	ldr	r3, [r4, #12]
 80021a0:	9903      	ldr	r1, [sp, #12]
 80021a2:	1a5b      	subs	r3, r3, r1
 80021a4:	42ab      	cmp	r3, r5
 80021a6:	dcf2      	bgt.n	800218e <_printf_i+0x21e>
 80021a8:	e7eb      	b.n	8002182 <_printf_i+0x212>
 80021aa:	2500      	movs	r5, #0
 80021ac:	f104 0619 	add.w	r6, r4, #25
 80021b0:	e7f5      	b.n	800219e <_printf_i+0x22e>
 80021b2:	bf00      	nop
 80021b4:	080024c1 	.word	0x080024c1
 80021b8:	080024d2 	.word	0x080024d2

080021bc <memcpy>:
 80021bc:	440a      	add	r2, r1
 80021be:	4291      	cmp	r1, r2
 80021c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80021c4:	d100      	bne.n	80021c8 <memcpy+0xc>
 80021c6:	4770      	bx	lr
 80021c8:	b510      	push	{r4, lr}
 80021ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021d2:	4291      	cmp	r1, r2
 80021d4:	d1f9      	bne.n	80021ca <memcpy+0xe>
 80021d6:	bd10      	pop	{r4, pc}

080021d8 <memmove>:
 80021d8:	4288      	cmp	r0, r1
 80021da:	b510      	push	{r4, lr}
 80021dc:	eb01 0402 	add.w	r4, r1, r2
 80021e0:	d902      	bls.n	80021e8 <memmove+0x10>
 80021e2:	4284      	cmp	r4, r0
 80021e4:	4623      	mov	r3, r4
 80021e6:	d807      	bhi.n	80021f8 <memmove+0x20>
 80021e8:	1e43      	subs	r3, r0, #1
 80021ea:	42a1      	cmp	r1, r4
 80021ec:	d008      	beq.n	8002200 <memmove+0x28>
 80021ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80021f6:	e7f8      	b.n	80021ea <memmove+0x12>
 80021f8:	4402      	add	r2, r0
 80021fa:	4601      	mov	r1, r0
 80021fc:	428a      	cmp	r2, r1
 80021fe:	d100      	bne.n	8002202 <memmove+0x2a>
 8002200:	bd10      	pop	{r4, pc}
 8002202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800220a:	e7f7      	b.n	80021fc <memmove+0x24>

0800220c <_free_r>:
 800220c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800220e:	2900      	cmp	r1, #0
 8002210:	d044      	beq.n	800229c <_free_r+0x90>
 8002212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002216:	9001      	str	r0, [sp, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f1a1 0404 	sub.w	r4, r1, #4
 800221e:	bfb8      	it	lt
 8002220:	18e4      	addlt	r4, r4, r3
 8002222:	f000 f913 	bl	800244c <__malloc_lock>
 8002226:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <_free_r+0x94>)
 8002228:	9801      	ldr	r0, [sp, #4]
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	b933      	cbnz	r3, 800223c <_free_r+0x30>
 800222e:	6063      	str	r3, [r4, #4]
 8002230:	6014      	str	r4, [r2, #0]
 8002232:	b003      	add	sp, #12
 8002234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002238:	f000 b90e 	b.w	8002458 <__malloc_unlock>
 800223c:	42a3      	cmp	r3, r4
 800223e:	d908      	bls.n	8002252 <_free_r+0x46>
 8002240:	6825      	ldr	r5, [r4, #0]
 8002242:	1961      	adds	r1, r4, r5
 8002244:	428b      	cmp	r3, r1
 8002246:	bf01      	itttt	eq
 8002248:	6819      	ldreq	r1, [r3, #0]
 800224a:	685b      	ldreq	r3, [r3, #4]
 800224c:	1949      	addeq	r1, r1, r5
 800224e:	6021      	streq	r1, [r4, #0]
 8002250:	e7ed      	b.n	800222e <_free_r+0x22>
 8002252:	461a      	mov	r2, r3
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	b10b      	cbz	r3, 800225c <_free_r+0x50>
 8002258:	42a3      	cmp	r3, r4
 800225a:	d9fa      	bls.n	8002252 <_free_r+0x46>
 800225c:	6811      	ldr	r1, [r2, #0]
 800225e:	1855      	adds	r5, r2, r1
 8002260:	42a5      	cmp	r5, r4
 8002262:	d10b      	bne.n	800227c <_free_r+0x70>
 8002264:	6824      	ldr	r4, [r4, #0]
 8002266:	4421      	add	r1, r4
 8002268:	1854      	adds	r4, r2, r1
 800226a:	42a3      	cmp	r3, r4
 800226c:	6011      	str	r1, [r2, #0]
 800226e:	d1e0      	bne.n	8002232 <_free_r+0x26>
 8002270:	681c      	ldr	r4, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	6053      	str	r3, [r2, #4]
 8002276:	4421      	add	r1, r4
 8002278:	6011      	str	r1, [r2, #0]
 800227a:	e7da      	b.n	8002232 <_free_r+0x26>
 800227c:	d902      	bls.n	8002284 <_free_r+0x78>
 800227e:	230c      	movs	r3, #12
 8002280:	6003      	str	r3, [r0, #0]
 8002282:	e7d6      	b.n	8002232 <_free_r+0x26>
 8002284:	6825      	ldr	r5, [r4, #0]
 8002286:	1961      	adds	r1, r4, r5
 8002288:	428b      	cmp	r3, r1
 800228a:	bf04      	itt	eq
 800228c:	6819      	ldreq	r1, [r3, #0]
 800228e:	685b      	ldreq	r3, [r3, #4]
 8002290:	6063      	str	r3, [r4, #4]
 8002292:	bf04      	itt	eq
 8002294:	1949      	addeq	r1, r1, r5
 8002296:	6021      	streq	r1, [r4, #0]
 8002298:	6054      	str	r4, [r2, #4]
 800229a:	e7ca      	b.n	8002232 <_free_r+0x26>
 800229c:	b003      	add	sp, #12
 800229e:	bd30      	pop	{r4, r5, pc}
 80022a0:	200000e8 	.word	0x200000e8

080022a4 <sbrk_aligned>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	4e0e      	ldr	r6, [pc, #56]	; (80022e0 <sbrk_aligned+0x3c>)
 80022a8:	460c      	mov	r4, r1
 80022aa:	6831      	ldr	r1, [r6, #0]
 80022ac:	4605      	mov	r5, r0
 80022ae:	b911      	cbnz	r1, 80022b6 <sbrk_aligned+0x12>
 80022b0:	f000 f8bc 	bl	800242c <_sbrk_r>
 80022b4:	6030      	str	r0, [r6, #0]
 80022b6:	4621      	mov	r1, r4
 80022b8:	4628      	mov	r0, r5
 80022ba:	f000 f8b7 	bl	800242c <_sbrk_r>
 80022be:	1c43      	adds	r3, r0, #1
 80022c0:	d00a      	beq.n	80022d8 <sbrk_aligned+0x34>
 80022c2:	1cc4      	adds	r4, r0, #3
 80022c4:	f024 0403 	bic.w	r4, r4, #3
 80022c8:	42a0      	cmp	r0, r4
 80022ca:	d007      	beq.n	80022dc <sbrk_aligned+0x38>
 80022cc:	1a21      	subs	r1, r4, r0
 80022ce:	4628      	mov	r0, r5
 80022d0:	f000 f8ac 	bl	800242c <_sbrk_r>
 80022d4:	3001      	adds	r0, #1
 80022d6:	d101      	bne.n	80022dc <sbrk_aligned+0x38>
 80022d8:	f04f 34ff 	mov.w	r4, #4294967295
 80022dc:	4620      	mov	r0, r4
 80022de:	bd70      	pop	{r4, r5, r6, pc}
 80022e0:	200000ec 	.word	0x200000ec

080022e4 <_malloc_r>:
 80022e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e8:	1ccd      	adds	r5, r1, #3
 80022ea:	f025 0503 	bic.w	r5, r5, #3
 80022ee:	3508      	adds	r5, #8
 80022f0:	2d0c      	cmp	r5, #12
 80022f2:	bf38      	it	cc
 80022f4:	250c      	movcc	r5, #12
 80022f6:	2d00      	cmp	r5, #0
 80022f8:	4607      	mov	r7, r0
 80022fa:	db01      	blt.n	8002300 <_malloc_r+0x1c>
 80022fc:	42a9      	cmp	r1, r5
 80022fe:	d905      	bls.n	800230c <_malloc_r+0x28>
 8002300:	230c      	movs	r3, #12
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	2600      	movs	r6, #0
 8002306:	4630      	mov	r0, r6
 8002308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800230c:	4e2e      	ldr	r6, [pc, #184]	; (80023c8 <_malloc_r+0xe4>)
 800230e:	f000 f89d 	bl	800244c <__malloc_lock>
 8002312:	6833      	ldr	r3, [r6, #0]
 8002314:	461c      	mov	r4, r3
 8002316:	bb34      	cbnz	r4, 8002366 <_malloc_r+0x82>
 8002318:	4629      	mov	r1, r5
 800231a:	4638      	mov	r0, r7
 800231c:	f7ff ffc2 	bl	80022a4 <sbrk_aligned>
 8002320:	1c43      	adds	r3, r0, #1
 8002322:	4604      	mov	r4, r0
 8002324:	d14d      	bne.n	80023c2 <_malloc_r+0xde>
 8002326:	6834      	ldr	r4, [r6, #0]
 8002328:	4626      	mov	r6, r4
 800232a:	2e00      	cmp	r6, #0
 800232c:	d140      	bne.n	80023b0 <_malloc_r+0xcc>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	4631      	mov	r1, r6
 8002332:	4638      	mov	r0, r7
 8002334:	eb04 0803 	add.w	r8, r4, r3
 8002338:	f000 f878 	bl	800242c <_sbrk_r>
 800233c:	4580      	cmp	r8, r0
 800233e:	d13a      	bne.n	80023b6 <_malloc_r+0xd2>
 8002340:	6821      	ldr	r1, [r4, #0]
 8002342:	3503      	adds	r5, #3
 8002344:	1a6d      	subs	r5, r5, r1
 8002346:	f025 0503 	bic.w	r5, r5, #3
 800234a:	3508      	adds	r5, #8
 800234c:	2d0c      	cmp	r5, #12
 800234e:	bf38      	it	cc
 8002350:	250c      	movcc	r5, #12
 8002352:	4629      	mov	r1, r5
 8002354:	4638      	mov	r0, r7
 8002356:	f7ff ffa5 	bl	80022a4 <sbrk_aligned>
 800235a:	3001      	adds	r0, #1
 800235c:	d02b      	beq.n	80023b6 <_malloc_r+0xd2>
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	442b      	add	r3, r5
 8002362:	6023      	str	r3, [r4, #0]
 8002364:	e00e      	b.n	8002384 <_malloc_r+0xa0>
 8002366:	6822      	ldr	r2, [r4, #0]
 8002368:	1b52      	subs	r2, r2, r5
 800236a:	d41e      	bmi.n	80023aa <_malloc_r+0xc6>
 800236c:	2a0b      	cmp	r2, #11
 800236e:	d916      	bls.n	800239e <_malloc_r+0xba>
 8002370:	1961      	adds	r1, r4, r5
 8002372:	42a3      	cmp	r3, r4
 8002374:	6025      	str	r5, [r4, #0]
 8002376:	bf18      	it	ne
 8002378:	6059      	strne	r1, [r3, #4]
 800237a:	6863      	ldr	r3, [r4, #4]
 800237c:	bf08      	it	eq
 800237e:	6031      	streq	r1, [r6, #0]
 8002380:	5162      	str	r2, [r4, r5]
 8002382:	604b      	str	r3, [r1, #4]
 8002384:	4638      	mov	r0, r7
 8002386:	f104 060b 	add.w	r6, r4, #11
 800238a:	f000 f865 	bl	8002458 <__malloc_unlock>
 800238e:	f026 0607 	bic.w	r6, r6, #7
 8002392:	1d23      	adds	r3, r4, #4
 8002394:	1af2      	subs	r2, r6, r3
 8002396:	d0b6      	beq.n	8002306 <_malloc_r+0x22>
 8002398:	1b9b      	subs	r3, r3, r6
 800239a:	50a3      	str	r3, [r4, r2]
 800239c:	e7b3      	b.n	8002306 <_malloc_r+0x22>
 800239e:	6862      	ldr	r2, [r4, #4]
 80023a0:	42a3      	cmp	r3, r4
 80023a2:	bf0c      	ite	eq
 80023a4:	6032      	streq	r2, [r6, #0]
 80023a6:	605a      	strne	r2, [r3, #4]
 80023a8:	e7ec      	b.n	8002384 <_malloc_r+0xa0>
 80023aa:	4623      	mov	r3, r4
 80023ac:	6864      	ldr	r4, [r4, #4]
 80023ae:	e7b2      	b.n	8002316 <_malloc_r+0x32>
 80023b0:	4634      	mov	r4, r6
 80023b2:	6876      	ldr	r6, [r6, #4]
 80023b4:	e7b9      	b.n	800232a <_malloc_r+0x46>
 80023b6:	230c      	movs	r3, #12
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4638      	mov	r0, r7
 80023bc:	f000 f84c 	bl	8002458 <__malloc_unlock>
 80023c0:	e7a1      	b.n	8002306 <_malloc_r+0x22>
 80023c2:	6025      	str	r5, [r4, #0]
 80023c4:	e7de      	b.n	8002384 <_malloc_r+0xa0>
 80023c6:	bf00      	nop
 80023c8:	200000e8 	.word	0x200000e8

080023cc <_realloc_r>:
 80023cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023d0:	4680      	mov	r8, r0
 80023d2:	4614      	mov	r4, r2
 80023d4:	460e      	mov	r6, r1
 80023d6:	b921      	cbnz	r1, 80023e2 <_realloc_r+0x16>
 80023d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023dc:	4611      	mov	r1, r2
 80023de:	f7ff bf81 	b.w	80022e4 <_malloc_r>
 80023e2:	b92a      	cbnz	r2, 80023f0 <_realloc_r+0x24>
 80023e4:	f7ff ff12 	bl	800220c <_free_r>
 80023e8:	4625      	mov	r5, r4
 80023ea:	4628      	mov	r0, r5
 80023ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f0:	f000 f838 	bl	8002464 <_malloc_usable_size_r>
 80023f4:	4284      	cmp	r4, r0
 80023f6:	4607      	mov	r7, r0
 80023f8:	d802      	bhi.n	8002400 <_realloc_r+0x34>
 80023fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80023fe:	d812      	bhi.n	8002426 <_realloc_r+0x5a>
 8002400:	4621      	mov	r1, r4
 8002402:	4640      	mov	r0, r8
 8002404:	f7ff ff6e 	bl	80022e4 <_malloc_r>
 8002408:	4605      	mov	r5, r0
 800240a:	2800      	cmp	r0, #0
 800240c:	d0ed      	beq.n	80023ea <_realloc_r+0x1e>
 800240e:	42bc      	cmp	r4, r7
 8002410:	4622      	mov	r2, r4
 8002412:	4631      	mov	r1, r6
 8002414:	bf28      	it	cs
 8002416:	463a      	movcs	r2, r7
 8002418:	f7ff fed0 	bl	80021bc <memcpy>
 800241c:	4631      	mov	r1, r6
 800241e:	4640      	mov	r0, r8
 8002420:	f7ff fef4 	bl	800220c <_free_r>
 8002424:	e7e1      	b.n	80023ea <_realloc_r+0x1e>
 8002426:	4635      	mov	r5, r6
 8002428:	e7df      	b.n	80023ea <_realloc_r+0x1e>
	...

0800242c <_sbrk_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4d06      	ldr	r5, [pc, #24]	; (8002448 <_sbrk_r+0x1c>)
 8002430:	2300      	movs	r3, #0
 8002432:	4604      	mov	r4, r0
 8002434:	4608      	mov	r0, r1
 8002436:	602b      	str	r3, [r5, #0]
 8002438:	f7fe fbc2 	bl	8000bc0 <_sbrk>
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	d102      	bne.n	8002446 <_sbrk_r+0x1a>
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	b103      	cbz	r3, 8002446 <_sbrk_r+0x1a>
 8002444:	6023      	str	r3, [r4, #0]
 8002446:	bd38      	pop	{r3, r4, r5, pc}
 8002448:	200000f0 	.word	0x200000f0

0800244c <__malloc_lock>:
 800244c:	4801      	ldr	r0, [pc, #4]	; (8002454 <__malloc_lock+0x8>)
 800244e:	f000 b811 	b.w	8002474 <__retarget_lock_acquire_recursive>
 8002452:	bf00      	nop
 8002454:	200000f4 	.word	0x200000f4

08002458 <__malloc_unlock>:
 8002458:	4801      	ldr	r0, [pc, #4]	; (8002460 <__malloc_unlock+0x8>)
 800245a:	f000 b80c 	b.w	8002476 <__retarget_lock_release_recursive>
 800245e:	bf00      	nop
 8002460:	200000f4 	.word	0x200000f4

08002464 <_malloc_usable_size_r>:
 8002464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002468:	1f18      	subs	r0, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	bfbc      	itt	lt
 800246e:	580b      	ldrlt	r3, [r1, r0]
 8002470:	18c0      	addlt	r0, r0, r3
 8002472:	4770      	bx	lr

08002474 <__retarget_lock_acquire_recursive>:
 8002474:	4770      	bx	lr

08002476 <__retarget_lock_release_recursive>:
 8002476:	4770      	bx	lr

08002478 <_init>:
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247a:	bf00      	nop
 800247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247e:	bc08      	pop	{r3}
 8002480:	469e      	mov	lr, r3
 8002482:	4770      	bx	lr

08002484 <_fini>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr
